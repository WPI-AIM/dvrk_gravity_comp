# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstStereoVisionPython', [dirname(__file__)])
        except ImportError:
            import _cisstStereoVisionPython
            return _cisstStereoVisionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_cisstStereoVisionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cisstStereoVisionPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstStereoVisionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstStereoVisionPython.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cisstStereoVisionPython.SwigPyIterator_value(self)
    def incr(self, n=1): return _cisstStereoVisionPython.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cisstStereoVisionPython.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cisstStereoVisionPython.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cisstStereoVisionPython.SwigPyIterator_equal(self, *args)
    def copy(self): return _cisstStereoVisionPython.SwigPyIterator_copy(self)
    def next(self): return _cisstStereoVisionPython.SwigPyIterator_next(self)
    def __next__(self): return _cisstStereoVisionPython.SwigPyIterator___next__(self)
    def previous(self): return _cisstStereoVisionPython.SwigPyIterator_previous(self)
    def advance(self, *args): return _cisstStereoVisionPython.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cisstStereoVisionPython.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cisstStereoVisionPython.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cisstStereoVisionPython.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cisstStereoVisionPython.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cisstStereoVisionPython.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cisstStereoVisionPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cisstStereoVisionPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstStereoVisionPython.ios_base_erase_event
    imbue_event = _cisstStereoVisionPython.ios_base_imbue_event
    copyfmt_event = _cisstStereoVisionPython.ios_base_copyfmt_event
    def register_callback(self, *args): return _cisstStereoVisionPython.ios_base_register_callback(self, *args)
    def flags(self, *args): return _cisstStereoVisionPython.ios_base_flags(self, *args)
    def setf(self, *args): return _cisstStereoVisionPython.ios_base_setf(self, *args)
    def unsetf(self, *args): return _cisstStereoVisionPython.ios_base_unsetf(self, *args)
    def precision(self, *args): return _cisstStereoVisionPython.ios_base_precision(self, *args)
    def width(self, *args): return _cisstStereoVisionPython.ios_base_width(self, *args)
    sync_with_stdio = staticmethod(_cisstStereoVisionPython.ios_base_sync_with_stdio)
    def imbue(self, *args): return _cisstStereoVisionPython.ios_base_imbue(self, *args)
    def getloc(self): return _cisstStereoVisionPython.ios_base_getloc(self)
    xalloc = staticmethod(_cisstStereoVisionPython.ios_base_xalloc)
    def iword(self, *args): return _cisstStereoVisionPython.ios_base_iword(self, *args)
    def pword(self, *args): return _cisstStereoVisionPython.ios_base_pword(self, *args)
    __swig_destroy__ = _cisstStereoVisionPython.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _cisstStereoVisionPython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _cisstStereoVisionPython.cvar
ios_base.boolalpha = _cisstStereoVisionPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstStereoVisionPython.cvar.ios_base_dec
ios_base.fixed = _cisstStereoVisionPython.cvar.ios_base_fixed
ios_base.hex = _cisstStereoVisionPython.cvar.ios_base_hex
ios_base.internal = _cisstStereoVisionPython.cvar.ios_base_internal
ios_base.left = _cisstStereoVisionPython.cvar.ios_base_left
ios_base.oct = _cisstStereoVisionPython.cvar.ios_base_oct
ios_base.right = _cisstStereoVisionPython.cvar.ios_base_right
ios_base.scientific = _cisstStereoVisionPython.cvar.ios_base_scientific
ios_base.showbase = _cisstStereoVisionPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstStereoVisionPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstStereoVisionPython.cvar.ios_base_showpos
ios_base.skipws = _cisstStereoVisionPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstStereoVisionPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstStereoVisionPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstStereoVisionPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstStereoVisionPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstStereoVisionPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstStereoVisionPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstStereoVisionPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstStereoVisionPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstStereoVisionPython.cvar.ios_base_goodbit
ios_base.app = _cisstStereoVisionPython.cvar.ios_base_app
ios_base.ate = _cisstStereoVisionPython.cvar.ios_base_ate
ios_base.binary = _cisstStereoVisionPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstStereoVisionPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstStereoVisionPython.cvar.ios_base_out
ios_base.trunc = _cisstStereoVisionPython.cvar.ios_base_trunc
ios_base.beg = _cisstStereoVisionPython.cvar.ios_base_beg
ios_base.cur = _cisstStereoVisionPython.cvar.ios_base_cur
ios_base.end = _cisstStereoVisionPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _cisstStereoVisionPython.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _cisstStereoVisionPython.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _cisstStereoVisionPython.ios_base_xalloc()
ios_base_xalloc = _cisstStereoVisionPython.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def rdstate(self): return _cisstStereoVisionPython.ios_rdstate(self)
    def clear(self, *args): return _cisstStereoVisionPython.ios_clear(self, *args)
    def setstate(self, *args): return _cisstStereoVisionPython.ios_setstate(self, *args)
    def good(self): return _cisstStereoVisionPython.ios_good(self)
    def eof(self): return _cisstStereoVisionPython.ios_eof(self)
    def fail(self): return _cisstStereoVisionPython.ios_fail(self)
    def bad(self): return _cisstStereoVisionPython.ios_bad(self)
    def exceptions(self, *args): return _cisstStereoVisionPython.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _cisstStereoVisionPython.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _cisstStereoVisionPython.ios_tie(self, *args)
    def rdbuf(self, *args): return _cisstStereoVisionPython.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _cisstStereoVisionPython.ios_copyfmt(self, *args)
    def fill(self, *args): return _cisstStereoVisionPython.ios_fill(self, *args)
    def imbue(self, *args): return _cisstStereoVisionPython.ios_imbue(self, *args)
    def narrow(self, *args): return _cisstStereoVisionPython.ios_narrow(self, *args)
    def widen(self, *args): return _cisstStereoVisionPython.ios_widen(self, *args)
ios_swigregister = _cisstStereoVisionPython.ios_swigregister
ios_swigregister(ios)

class streambuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstStereoVisionPython.delete_streambuf
    __del__ = lambda self : None;
    def pubimbue(self, *args): return _cisstStereoVisionPython.streambuf_pubimbue(self, *args)
    def getloc(self): return _cisstStereoVisionPython.streambuf_getloc(self)
    def pubsetbuf(self, *args): return _cisstStereoVisionPython.streambuf_pubsetbuf(self, *args)
    def pubseekoff(self, *args): return _cisstStereoVisionPython.streambuf_pubseekoff(self, *args)
    def pubseekpos(self, *args): return _cisstStereoVisionPython.streambuf_pubseekpos(self, *args)
    def pubsync(self): return _cisstStereoVisionPython.streambuf_pubsync(self)
    def in_avail(self): return _cisstStereoVisionPython.streambuf_in_avail(self)
    def snextc(self): return _cisstStereoVisionPython.streambuf_snextc(self)
    def sbumpc(self): return _cisstStereoVisionPython.streambuf_sbumpc(self)
    def sgetc(self): return _cisstStereoVisionPython.streambuf_sgetc(self)
    def sgetn(self, *args): return _cisstStereoVisionPython.streambuf_sgetn(self, *args)
    def sputbackc(self, *args): return _cisstStereoVisionPython.streambuf_sputbackc(self, *args)
    def sungetc(self): return _cisstStereoVisionPython.streambuf_sungetc(self)
    def sputc(self, *args): return _cisstStereoVisionPython.streambuf_sputc(self, *args)
    def sputn(self, *args): return _cisstStereoVisionPython.streambuf_sputn(self, *args)
streambuf_swigregister = _cisstStereoVisionPython.streambuf_swigregister
streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstStereoVisionPython.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _cisstStereoVisionPython.ostream___lshift__(self, *args)
    def put(self, *args): return _cisstStereoVisionPython.ostream_put(self, *args)
    def write(self, *args): return _cisstStereoVisionPython.ostream_write(self, *args)
    def flush(self): return _cisstStereoVisionPython.ostream_flush(self)
    def tellp(self): return _cisstStereoVisionPython.ostream_tellp(self)
    def seekp(self, *args): return _cisstStereoVisionPython.ostream_seekp(self, *args)
ostream_swigregister = _cisstStereoVisionPython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstStereoVisionPython.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _cisstStereoVisionPython.istream___rshift__(self, *args)
    def gcount(self): return _cisstStereoVisionPython.istream_gcount(self)
    def get(self, *args): return _cisstStereoVisionPython.istream_get(self, *args)
    def getline(self, *args): return _cisstStereoVisionPython.istream_getline(self, *args)
    def ignore(self, *args): return _cisstStereoVisionPython.istream_ignore(self, *args)
    def peek(self): return _cisstStereoVisionPython.istream_peek(self)
    def read(self, *args): return _cisstStereoVisionPython.istream_read(self, *args)
    def readsome(self, *args): return _cisstStereoVisionPython.istream_readsome(self, *args)
    def putback(self, *args): return _cisstStereoVisionPython.istream_putback(self, *args)
    def unget(self): return _cisstStereoVisionPython.istream_unget(self)
    def sync(self): return _cisstStereoVisionPython.istream_sync(self)
    def tellg(self): return _cisstStereoVisionPython.istream_tellg(self)
    def seekg(self, *args): return _cisstStereoVisionPython.istream_seekg(self, *args)
istream_swigregister = _cisstStereoVisionPython.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstStereoVisionPython.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _cisstStereoVisionPython.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _cisstStereoVisionPython.endl_cb_ptr

def endl(*args):
  return _cisstStereoVisionPython.endl(*args)
endl = _cisstStereoVisionPython.endl
ends_cb_ptr = _cisstStereoVisionPython.ends_cb_ptr

def ends(*args):
  return _cisstStereoVisionPython.ends(*args)
ends = _cisstStereoVisionPython.ends
flush_cb_ptr = _cisstStereoVisionPython.flush_cb_ptr

def flush(*args):
  return _cisstStereoVisionPython.flush(*args)
flush = _cisstStereoVisionPython.flush
import cisstCommonPython
import cisstVectorPython
import cisstMultiTaskPython
import cisstOSAbstractionPython

def svlInitialize():
  """svlInitialize()"""
  return _cisstStereoVisionPython.svlInitialize()
class svlStreamManager(cisstMultiTaskPython.mtsComponent):
    """Proxy of C++ svlStreamManager class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlStreamManager_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlStreamManager_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlStreamManager_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(svlStreamManager self) -> svlStreamManager
        __init__(svlStreamManager self, unsigned int threadcount) -> svlStreamManager
        """
        this = _cisstStereoVisionPython.new_svlStreamManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlStreamManager
    __del__ = lambda self : None;
    def SetSourceFilter(self, *args):
        """SetSourceFilter(svlStreamManager self, svlFilterSourceBase source) -> int"""
        return _cisstStereoVisionPython.svlStreamManager_SetSourceFilter(self, *args)

    def Initialize(self):
        """Initialize(svlStreamManager self) -> int"""
        return _cisstStereoVisionPython.svlStreamManager_Initialize(self)

    def Release(self):
        """Release(svlStreamManager self)"""
        return _cisstStereoVisionPython.svlStreamManager_Release(self)

    def IsInitialized(self):
        """IsInitialized(svlStreamManager self) -> bool"""
        return _cisstStereoVisionPython.svlStreamManager_IsInitialized(self)

    def Play(self):
        """Play(svlStreamManager self) -> int"""
        return _cisstStereoVisionPython.svlStreamManager_Play(self)

    def Stop(self):
        """Stop(svlStreamManager self)"""
        return _cisstStereoVisionPython.svlStreamManager_Stop(self)

    def IsRunning(self):
        """IsRunning(svlStreamManager self) -> bool"""
        return _cisstStereoVisionPython.svlStreamManager_IsRunning(self)

    def WaitForStop(self, *args):
        """
        WaitForStop(svlStreamManager self, double timeout=-1.0) -> int
        WaitForStop(svlStreamManager self) -> int
        """
        return _cisstStereoVisionPython.svlStreamManager_WaitForStop(self, *args)

    def GetStreamStatus(self):
        """GetStreamStatus(svlStreamManager self) -> int"""
        return _cisstStereoVisionPython.svlStreamManager_GetStreamStatus(self)

    def DisconnectAll(self):
        """DisconnectAll(svlStreamManager self)"""
        return _cisstStereoVisionPython.svlStreamManager_DisconnectAll(self)

svlStreamManager_swigregister = _cisstStereoVisionPython.svlStreamManager_swigregister
svlStreamManager_swigregister(svlStreamManager)

def svlStreamManager_ClassServices():
  """svlStreamManager_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlStreamManager_ClassServices()

class svlFilterBase(cisstMultiTaskPython.mtsComponent):
    """Proxy of C++ svlFilterBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterBase
    __del__ = lambda self : None;
    def IsInitialized(self):
        """IsInitialized(svlFilterBase self) -> bool"""
        return _cisstStereoVisionPython.svlFilterBase_IsInitialized(self)

    def IsRunning(self):
        """IsRunning(svlFilterBase self) -> bool"""
        return _cisstStereoVisionPython.svlFilterBase_IsRunning(self)

    def GetFrameCounter(self):
        """GetFrameCounter(svlFilterBase self) -> unsigned int"""
        return _cisstStereoVisionPython.svlFilterBase_GetFrameCounter(self)

    def GetInput(self, *args):
        """
        GetInput(svlFilterBase self) -> svlFilterInput
        GetInput(svlFilterBase self, std::string const & inputname) -> svlFilterInput *
        """
        return _cisstStereoVisionPython.svlFilterBase_GetInput(self, *args)

    def GetOutput(self, *args):
        """
        GetOutput(svlFilterBase self) -> svlFilterOutput
        GetOutput(svlFilterBase self, std::string const & outputname) -> svlFilterOutput
        """
        return _cisstStereoVisionPython.svlFilterBase_GetOutput(self, *args)

    def SetEnable(self, *args):
        """SetEnable(svlFilterBase self, bool const & enable)"""
        return _cisstStereoVisionPython.svlFilterBase_SetEnable(self, *args)

    def GetEnable(self, *args):
        """GetEnable(svlFilterBase self, bool & enable)"""
        return _cisstStereoVisionPython.svlFilterBase_GetEnable(self, *args)

    def Enable(self):
        """Enable(svlFilterBase self)"""
        return _cisstStereoVisionPython.svlFilterBase_Enable(self)

    def Disable(self):
        """Disable(svlFilterBase self)"""
        return _cisstStereoVisionPython.svlFilterBase_Disable(self)

    def IsEnabled(self):
        """IsEnabled(svlFilterBase self) -> bool"""
        return _cisstStereoVisionPython.svlFilterBase_IsEnabled(self)

    def IsDisabled(self):
        """IsDisabled(svlFilterBase self) -> bool"""
        return _cisstStereoVisionPython.svlFilterBase_IsDisabled(self)

svlFilterBase_swigregister = _cisstStereoVisionPython.svlFilterBase_swigregister
svlFilterBase_swigregister(svlFilterBase)

def svlFilterBase_ClassServices():
  """svlFilterBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterBase_ClassServices()

class svlFilterImageFileWriter(svlFilterBase):
    """Proxy of C++ svlFilterImageFileWriter class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterImageFileWriter_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterImageFileWriter_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterImageFileWriter_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterImageFileWriter self) -> svlFilterImageFileWriter"""
        this = _cisstStereoVisionPython.new_svlFilterImageFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterImageFileWriter
    __del__ = lambda self : None;
    def Disable(self, *args):
        """
        Disable(svlFilterImageFileWriter self, bool disable, int videoch=SVL_LEFT) -> int
        Disable(svlFilterImageFileWriter self, bool disable) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageFileWriter_Disable(self, *args)

    def SetFilePath(self, *args):
        """
        SetFilePath(svlFilterImageFileWriter self, std::string const & filepathprefix, std::string const & extension, int videoch=SVL_LEFT) -> int
        SetFilePath(svlFilterImageFileWriter self, std::string const & filepathprefix, std::string const & extension) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageFileWriter_SetFilePath(self, *args)

    def SetCompression(self, *args):
        """
        SetCompression(svlFilterImageFileWriter self, int compression, int videoch=SVL_LEFT) -> int
        SetCompression(svlFilterImageFileWriter self, int compression) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageFileWriter_SetCompression(self, *args)

    def EnableTimestamps(self, enable=True):
        """
        EnableTimestamps(svlFilterImageFileWriter self, bool enable=True)
        EnableTimestamps(svlFilterImageFileWriter self)
        """
        return _cisstStereoVisionPython.svlFilterImageFileWriter_EnableTimestamps(self, enable)

    def Pause(self):
        """Pause(svlFilterImageFileWriter self)"""
        return _cisstStereoVisionPython.svlFilterImageFileWriter_Pause(self)

    def Record(self, *args):
        """
        Record(svlFilterImageFileWriter self, int frames=-1)
        Record(svlFilterImageFileWriter self)
        """
        return _cisstStereoVisionPython.svlFilterImageFileWriter_Record(self, *args)

svlFilterImageFileWriter_swigregister = _cisstStereoVisionPython.svlFilterImageFileWriter_swigregister
svlFilterImageFileWriter_swigregister(svlFilterImageFileWriter)

def svlFilterImageFileWriter_ClassServices():
  """svlFilterImageFileWriter_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterImageFileWriter_ClassServices()

class svlFilterImageRectifier(svlFilterBase):
    """Proxy of C++ svlFilterImageRectifier class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterImageRectifier_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterImageRectifier_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterImageRectifier_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterImageRectifier self) -> svlFilterImageRectifier"""
        this = _cisstStereoVisionPython.new_svlFilterImageRectifier()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterImageRectifier
    __del__ = lambda self : None;
    def LoadTable(self, *args):
        """
        LoadTable(svlFilterImageRectifier self, std::string const & filepath, unsigned int videoch=SVL_LEFT, int exponentlen=3) -> int
        LoadTable(svlFilterImageRectifier self, std::string const & filepath, unsigned int videoch=SVL_LEFT) -> int
        LoadTable(svlFilterImageRectifier self, std::string const & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageRectifier_LoadTable(self, *args)

    def SetTableFromCameraCalibration(self, *args):
        """
        SetTableFromCameraCalibration(svlFilterImageRectifier self, unsigned int height, unsigned int width, vct3x3 R, vct2 f, vct2 c, vctFixedSizeVector< double,7 > k, 
            double alpha, unsigned int videoch) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageRectifier_SetTableFromCameraCalibration(self, *args)

    def GetTables(self):
        """GetTables(svlFilterImageRectifier self) -> vctFixedSizeVector< svlImageProcessing::Internals,SVL_MAX_CHANNELS >"""
        return _cisstStereoVisionPython.svlFilterImageRectifier_GetTables(self)

    def EnableInterpolation(self, enable=True):
        """
        EnableInterpolation(svlFilterImageRectifier self, bool enable=True)
        EnableInterpolation(svlFilterImageRectifier self)
        """
        return _cisstStereoVisionPython.svlFilterImageRectifier_EnableInterpolation(self, enable)

svlFilterImageRectifier_swigregister = _cisstStereoVisionPython.svlFilterImageRectifier_swigregister
svlFilterImageRectifier_swigregister(svlFilterImageRectifier)

def svlFilterImageRectifier_ClassServices():
  """svlFilterImageRectifier_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterImageRectifier_ClassServices()

class svlFilterImageResizer(svlFilterBase):
    """Proxy of C++ svlFilterImageResizer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterImageResizer_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterImageResizer_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterImageResizer_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterImageResizer self) -> svlFilterImageResizer"""
        this = _cisstStereoVisionPython.new_svlFilterImageResizer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterImageResizer
    __del__ = lambda self : None;
    def SetOutputSize(self, *args):
        """
        SetOutputSize(svlFilterImageResizer self, unsigned int width, unsigned int height, unsigned int videoch=SVL_LEFT) -> int
        SetOutputSize(svlFilterImageResizer self, unsigned int width, unsigned int height) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageResizer_SetOutputSize(self, *args)

    def SetOutputRatio(self, *args):
        """
        SetOutputRatio(svlFilterImageResizer self, double widthratio, double heightratio, unsigned int videoch=SVL_LEFT) -> int
        SetOutputRatio(svlFilterImageResizer self, double widthratio, double heightratio) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageResizer_SetOutputRatio(self, *args)

    def SetInterpolation(self, *args):
        """SetInterpolation(svlFilterImageResizer self, bool const & enable)"""
        return _cisstStereoVisionPython.svlFilterImageResizer_SetInterpolation(self, *args)

    def GetInterpolation(self, *args):
        """GetInterpolation(svlFilterImageResizer self, bool & enable)"""
        return _cisstStereoVisionPython.svlFilterImageResizer_GetInterpolation(self, *args)

svlFilterImageResizer_swigregister = _cisstStereoVisionPython.svlFilterImageResizer_swigregister
svlFilterImageResizer_swigregister(svlFilterImageResizer)

def svlFilterImageResizer_ClassServices():
  """svlFilterImageResizer_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterImageResizer_ClassServices()

class svlFilterSourceBase(svlFilterBase):
    """Proxy of C++ svlFilterSourceBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterSourceBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterSourceBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterSourceBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterSourceBase
    __del__ = lambda self : None;
    def SetTargetFrequency(self, *args):
        """SetTargetFrequency(svlFilterSourceBase self, double const & hertz)"""
        return _cisstStereoVisionPython.svlFilterSourceBase_SetTargetFrequency(self, *args)

    def GetTargetFrequency(self):
        """GetTargetFrequency(svlFilterSourceBase self) -> double"""
        return _cisstStereoVisionPython.svlFilterSourceBase_GetTargetFrequency(self)

    def SetLoop(self, *args):
        """SetLoop(svlFilterSourceBase self, bool const & loop)"""
        return _cisstStereoVisionPython.svlFilterSourceBase_SetLoop(self, *args)

    def GetLoop(self):
        """GetLoop(svlFilterSourceBase self) -> bool"""
        return _cisstStereoVisionPython.svlFilterSourceBase_GetLoop(self)

    def Pause(self):
        """Pause(svlFilterSourceBase self)"""
        return _cisstStereoVisionPython.svlFilterSourceBase_Pause(self)

    def Play(self, *args):
        """
        Play(svlFilterSourceBase self)
        Play(svlFilterSourceBase self, int const & frames)
        """
        return _cisstStereoVisionPython.svlFilterSourceBase_Play(self, *args)

svlFilterSourceBase_swigregister = _cisstStereoVisionPython.svlFilterSourceBase_swigregister
svlFilterSourceBase_swigregister(svlFilterSourceBase)

def svlFilterSourceBase_ClassServices():
  """svlFilterSourceBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterSourceBase_ClassServices()

class svlFilterSourceVideoFile(svlFilterSourceBase):
    """Proxy of C++ svlFilterSourceVideoFile class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterSourceVideoFile_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterSourceVideoFile_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(svlFilterSourceVideoFile self) -> svlFilterSourceVideoFile
        __init__(svlFilterSourceVideoFile self, unsigned int channelcount) -> svlFilterSourceVideoFile
        """
        this = _cisstStereoVisionPython.new_svlFilterSourceVideoFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterSourceVideoFile
    __del__ = lambda self : None;
    def SetChannelCount(self, *args):
        """SetChannelCount(svlFilterSourceVideoFile self, unsigned int channelcount) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_SetChannelCount(self, *args)

    def DialogFilePath(self, *args):
        """
        DialogFilePath(svlFilterSourceVideoFile self, unsigned int videoch=SVL_LEFT) -> int
        DialogFilePath(svlFilterSourceVideoFile self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_DialogFilePath(self, *args)

    def SetFilePath(self, *args):
        """
        SetFilePath(svlFilterSourceVideoFile self, std::string const & filepath, unsigned int videoch=SVL_LEFT) -> int
        SetFilePath(svlFilterSourceVideoFile self, std::string const & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_SetFilePath(self, *args)

    def GetFilePath(self, *args):
        """
        GetFilePath(svlFilterSourceVideoFile self, std::string & filepath, unsigned int videoch=SVL_LEFT) -> int
        GetFilePath(svlFilterSourceVideoFile self, std::string & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetFilePath(self, *args)

    def SetPosition(self, *args):
        """
        SetPosition(svlFilterSourceVideoFile self, int const position, unsigned int videoch=SVL_LEFT) -> int
        SetPosition(svlFilterSourceVideoFile self, int const position) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_SetPosition(self, *args)

    def GetPosition(self, *args):
        """
        GetPosition(svlFilterSourceVideoFile self, unsigned int videoch=SVL_LEFT) -> int
        GetPosition(svlFilterSourceVideoFile self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetPosition(self, *args)

    def SetRange(self, *args):
        """
        SetRange(svlFilterSourceVideoFile self, int const _from, int const to, unsigned int videoch=SVL_LEFT) -> int
        SetRange(svlFilterSourceVideoFile self, int const _from, int const to) -> int
        SetRange(svlFilterSourceVideoFile self, vctInt2 const range, unsigned int videoch=SVL_LEFT) -> int
        SetRange(svlFilterSourceVideoFile self, vctInt2 const range) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_SetRange(self, *args)

    def GetRange(self, *args):
        """
        GetRange(svlFilterSourceVideoFile self, vctInt2 & range, unsigned int videoch=SVL_LEFT) -> int
        GetRange(svlFilterSourceVideoFile self, vctInt2 & range) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetRange(self, *args)

    def GetLength(self, *args):
        """
        GetLength(svlFilterSourceVideoFile self, unsigned int videoch=SVL_LEFT) -> int
        GetLength(svlFilterSourceVideoFile self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetLength(self, *args)

    def GetWidth(self, *args):
        """
        GetWidth(svlFilterSourceVideoFile self, unsigned int videoch=SVL_LEFT) -> unsigned int
        GetWidth(svlFilterSourceVideoFile self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetWidth(self, *args)

    def GetHeight(self, *args):
        """
        GetHeight(svlFilterSourceVideoFile self, unsigned int videoch=SVL_LEFT) -> unsigned int
        GetHeight(svlFilterSourceVideoFile self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetHeight(self, *args)

    def GetPositionAtTime(self, *args):
        """
        GetPositionAtTime(svlFilterSourceVideoFile self, double const time, unsigned int videoch=SVL_LEFT) -> int
        GetPositionAtTime(svlFilterSourceVideoFile self, double const time) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetPositionAtTime(self, *args)

    def GetTimeAtPosition(self, *args):
        """
        GetTimeAtPosition(svlFilterSourceVideoFile self, int const position, unsigned int videoch=SVL_LEFT) -> double
        GetTimeAtPosition(svlFilterSourceVideoFile self, int const position) -> double
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoFile_GetTimeAtPosition(self, *args)

svlFilterSourceVideoFile_swigregister = _cisstStereoVisionPython.svlFilterSourceVideoFile_swigregister
svlFilterSourceVideoFile_swigregister(svlFilterSourceVideoFile)

def svlFilterSourceVideoFile_ClassServices():
  """svlFilterSourceVideoFile_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterSourceVideoFile_ClassServices()

class svlFilterVideoFileWriter(svlFilterBase):
    """Proxy of C++ svlFilterVideoFileWriter class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterVideoFileWriter_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterVideoFileWriter_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterVideoFileWriter self) -> svlFilterVideoFileWriter"""
        this = _cisstStereoVisionPython.new_svlFilterVideoFileWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterVideoFileWriter
    __del__ = lambda self : None;
    def DialogOpenFile(self, *args):
        """
        DialogOpenFile(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> int
        DialogOpenFile(svlFilterVideoFileWriter self) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_DialogOpenFile(self, *args)

    def DialogFramerate(self, *args):
        """
        DialogFramerate(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> int
        DialogFramerate(svlFilterVideoFileWriter self) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_DialogFramerate(self, *args)

    def DialogCodec(self, *args):
        """
        DialogCodec(svlFilterVideoFileWriter self, std::string const & extension, unsigned int videoch=SVL_LEFT) -> int
        DialogCodec(svlFilterVideoFileWriter self, std::string const & extension) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_DialogCodec(self, *args)

    def SetFilePath(self, *args):
        """
        SetFilePath(svlFilterVideoFileWriter self, std::string const & filepath, unsigned int videoch=SVL_LEFT) -> int
        SetFilePath(svlFilterVideoFileWriter self, std::string const & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_SetFilePath(self, *args)

    def SetFramerate(self, *args):
        """
        SetFramerate(svlFilterVideoFileWriter self, double const framerate, unsigned int videoch=SVL_LEFT) -> int
        SetFramerate(svlFilterVideoFileWriter self, double const framerate) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_SetFramerate(self, *args)

    def SetEnableTimestampsFile(self, *args):
        """
        SetEnableTimestampsFile(svlFilterVideoFileWriter self, bool enable, unsigned int videoch=SVL_LEFT) -> int
        SetEnableTimestampsFile(svlFilterVideoFileWriter self, bool enable) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_SetEnableTimestampsFile(self, *args)

    def SetCodecParams(self, *args):
        """
        SetCodecParams(svlFilterVideoFileWriter self, svlVideoIO::Compression const * compression, unsigned int videoch=SVL_LEFT) -> int
        SetCodecParams(svlFilterVideoFileWriter self, svlVideoIO::Compression const * compression) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_SetCodecParams(self, *args)

    def ResetCodec(self, *args):
        """
        ResetCodec(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> int
        ResetCodec(svlFilterVideoFileWriter self) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_ResetCodec(self, *args)

    def SaveCodec(self, *args):
        """
        SaveCodec(svlFilterVideoFileWriter self, std::string const & filepath, unsigned int videoch=SVL_LEFT) -> int
        SaveCodec(svlFilterVideoFileWriter self, std::string const & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_SaveCodec(self, *args)

    def LoadCodec(self, *args):
        """
        LoadCodec(svlFilterVideoFileWriter self, std::string const & filepath, unsigned int videoch=SVL_LEFT) -> int
        LoadCodec(svlFilterVideoFileWriter self, std::string const & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_LoadCodec(self, *args)

    def GetFilePath(self, *args):
        """
        GetFilePath(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> std::string
        GetFilePath(svlFilterVideoFileWriter self) -> std::string
        GetFilePath(svlFilterVideoFileWriter self, std::string & filepath, unsigned int videoch=SVL_LEFT) -> int
        GetFilePath(svlFilterVideoFileWriter self, std::string & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_GetFilePath(self, *args)

    def GetFramerate(self, *args):
        """
        GetFramerate(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> double
        GetFramerate(svlFilterVideoFileWriter self) -> double
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_GetFramerate(self, *args)

    def GetEnableTimestampsFile(self, *args):
        """
        GetEnableTimestampsFile(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> bool
        GetEnableTimestampsFile(svlFilterVideoFileWriter self) -> bool
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_GetEnableTimestampsFile(self, *args)

    def GetCodecName(self, *args):
        """
        GetCodecName(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> std::string
        GetCodecName(svlFilterVideoFileWriter self) -> std::string
        GetCodecName(svlFilterVideoFileWriter self, std::string & name, unsigned int videoch=SVL_LEFT) -> int
        GetCodecName(svlFilterVideoFileWriter self, std::string & name) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_GetCodecName(self, *args)

    def GetCodecParams(self, *args):
        """
        GetCodecParams(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> svlVideoIO::Compression
        GetCodecParams(svlFilterVideoFileWriter self) -> svlVideoIO::Compression
        GetCodecParams(svlFilterVideoFileWriter self, svlVideoIO::Compression ** compression, unsigned int videoch=SVL_LEFT) -> int
        GetCodecParams(svlFilterVideoFileWriter self, svlVideoIO::Compression ** compression) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_GetCodecParams(self, *args)

    def OpenFile(self, *args):
        """
        OpenFile(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> int
        OpenFile(svlFilterVideoFileWriter self) -> int
        OpenFile(svlFilterVideoFileWriter self, std::string const & filepath, unsigned int videoch=SVL_LEFT) -> int
        OpenFile(svlFilterVideoFileWriter self, std::string const & filepath) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_OpenFile(self, *args)

    def CloseFile(self, *args):
        """
        CloseFile(svlFilterVideoFileWriter self, unsigned int videoch=SVL_LEFT) -> int
        CloseFile(svlFilterVideoFileWriter self) -> int
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_CloseFile(self, *args)

    def Record(self, *args):
        """
        Record(svlFilterVideoFileWriter self, int frames=-1)
        Record(svlFilterVideoFileWriter self)
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_Record(self, *args)

    def RecordAtTime(self, *args):
        """
        RecordAtTime(svlFilterVideoFileWriter self, int frames=-1, double time=-1.0)
        RecordAtTime(svlFilterVideoFileWriter self, int frames=-1)
        RecordAtTime(svlFilterVideoFileWriter self)
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_RecordAtTime(self, *args)

    def Pause(self):
        """Pause(svlFilterVideoFileWriter self)"""
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_Pause(self)

    def PauseAtTime(self, *args):
        """
        PauseAtTime(svlFilterVideoFileWriter self, double time=-1.0)
        PauseAtTime(svlFilterVideoFileWriter self)
        """
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_PauseAtTime(self, *args)

    def GetIsRecording(self):
        """GetIsRecording(svlFilterVideoFileWriter self) -> bool"""
        return _cisstStereoVisionPython.svlFilterVideoFileWriter_GetIsRecording(self)

svlFilterVideoFileWriter_swigregister = _cisstStereoVisionPython.svlFilterVideoFileWriter_swigregister
svlFilterVideoFileWriter_swigregister(svlFilterVideoFileWriter)

def svlFilterVideoFileWriter_ClassServices():
  """svlFilterVideoFileWriter_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterVideoFileWriter_ClassServices()

class svlFilterSourceBuffer(svlFilterSourceBase):
    """Proxy of C++ svlFilterSourceBuffer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterSourceBuffer_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterSourceBuffer_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterSourceBuffer_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterSourceBuffer self) -> svlFilterSourceBuffer"""
        this = _cisstStereoVisionPython.new_svlFilterSourceBuffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterSourceBuffer
    __del__ = lambda self : None;
    def SetBuffer(self, *args):
        """SetBuffer(svlFilterSourceBuffer self, svlBufferSample & buffer) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceBuffer_SetBuffer(self, *args)

    def SetTimeout(self, timeout=5.0):
        """
        SetTimeout(svlFilterSourceBuffer self, double const timeout=5.0)
        SetTimeout(svlFilterSourceBuffer self)
        """
        return _cisstStereoVisionPython.svlFilterSourceBuffer_SetTimeout(self, timeout)

svlFilterSourceBuffer_swigregister = _cisstStereoVisionPython.svlFilterSourceBuffer_swigregister
svlFilterSourceBuffer_swigregister(svlFilterSourceBuffer)

def svlFilterSourceBuffer_ClassServices():
  """svlFilterSourceBuffer_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterSourceBuffer_ClassServices()

class svlFilterImageChannelSwapper(svlFilterBase):
    """Proxy of C++ svlFilterImageChannelSwapper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterImageChannelSwapper_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterImageChannelSwapper_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterImageChannelSwapper_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterImageChannelSwapper self) -> svlFilterImageChannelSwapper"""
        this = _cisstStereoVisionPython.new_svlFilterImageChannelSwapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterImageChannelSwapper
    __del__ = lambda self : None;
svlFilterImageChannelSwapper_swigregister = _cisstStereoVisionPython.svlFilterImageChannelSwapper_swigregister
svlFilterImageChannelSwapper_swigregister(svlFilterImageChannelSwapper)

def svlFilterImageChannelSwapper_ClassServices():
  """svlFilterImageChannelSwapper_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterImageChannelSwapper_ClassServices()

class svlSampleImage(object):
    """Proxy of C++ svlSampleImage class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlSampleImage
    __del__ = lambda self : None;
    def GetPixelType(self):
        """GetPixelType(svlSampleImage self) -> svlPixelType"""
        return _cisstStereoVisionPython.svlSampleImage_GetPixelType(self)

    def GetAlphaChannel(self):
        """GetAlphaChannel(svlSampleImage self) -> int"""
        return _cisstStereoVisionPython.svlSampleImage_GetAlphaChannel(self)

    def GetNewInstance(self):
        """GetNewInstance(svlSampleImage self) -> svlSample *"""
        return _cisstStereoVisionPython.svlSampleImage_GetNewInstance(self)

    def GetType(self):
        """GetType(svlSampleImage self) -> svlStreamType"""
        return _cisstStereoVisionPython.svlSampleImage_GetType(self)

    def IsInitialized(self):
        """IsInitialized(svlSampleImage self) -> bool"""
        return _cisstStereoVisionPython.svlSampleImage_IsInitialized(self)

    def IplImageRef(self, videochannel=0):
        """
        IplImageRef(svlSampleImage self, unsigned int const videochannel=0) -> IplImage
        IplImageRef(svlSampleImage self) -> IplImage *
        """
        return _cisstStereoVisionPython.svlSampleImage_IplImageRef(self, videochannel)

    def CvMatRef(self, videochannel=0):
        """
        CvMatRef(svlSampleImage self, unsigned int const videochannel=0) -> cv::Mat
        CvMatRef(svlSampleImage self) -> cv::Mat
        """
        return _cisstStereoVisionPython.svlSampleImage_CvMatRef(self, videochannel)

    def GetUCharPointer(self, *args):
        """
        GetUCharPointer(svlSampleImage self) -> unsigned char
        GetUCharPointer(svlSampleImage self) -> unsigned char const
        GetUCharPointer(svlSampleImage self, unsigned int const videochannel) -> unsigned char
        GetUCharPointer(svlSampleImage self, unsigned int const videochannel) -> unsigned char const
        GetUCharPointer(svlSampleImage self, unsigned int const videochannel, unsigned int const x, unsigned int const y) -> unsigned char
        GetUCharPointer(svlSampleImage self, unsigned int const videochannel, unsigned int const x, unsigned int const y) -> unsigned char const *
        """
        return _cisstStereoVisionPython.svlSampleImage_GetUCharPointer(self, *args)

    def SetSize(self, *args):
        """
        SetSize(svlSampleImage self, svlSample const * sample) -> int
        SetSize(svlSampleImage self, svlSample const & sample) -> int
        SetSize(svlSampleImage self, unsigned int const width, unsigned int const height)
        SetSize(svlSampleImage self, unsigned int const videochannel, unsigned int const width, unsigned int const height)
        SetSize(svlSampleImage self, IplImage const * ipl_image, unsigned int const videochannel=0) -> int
        SetSize(svlSampleImage self, IplImage const * ipl_image) -> int
        SetSize(svlSampleImage self, cv::Mat const & cv_mat, unsigned int const videochannel=0) -> int
        SetSize(svlSampleImage self, cv::Mat const & cv_mat) -> int
        """
        return _cisstStereoVisionPython.svlSampleImage_SetSize(self, *args)

    def CopyOf(self, *args):
        """
        CopyOf(svlSampleImage self, svlSample const * sample) -> int
        CopyOf(svlSampleImage self, svlSample const & sample) -> int
        CopyOf(svlSampleImage self, IplImage const * ipl_image, unsigned int const videochannel=0) -> int
        CopyOf(svlSampleImage self, IplImage const * ipl_image) -> int
        CopyOf(svlSampleImage self, cv::Mat const & cv_mat, unsigned int const videochannel=0) -> int
        CopyOf(svlSampleImage self, cv::Mat const & cv_mat) -> int
        """
        return _cisstStereoVisionPython.svlSampleImage_CopyOf(self, *args)

    def GetVideoChannels(self):
        """GetVideoChannels(svlSampleImage self) -> unsigned int"""
        return _cisstStereoVisionPython.svlSampleImage_GetVideoChannels(self)

    def GetDataChannels(self):
        """GetDataChannels(svlSampleImage self) -> unsigned int"""
        return _cisstStereoVisionPython.svlSampleImage_GetDataChannels(self)

    def GetBPP(self):
        """GetBPP(svlSampleImage self) -> unsigned int"""
        return _cisstStereoVisionPython.svlSampleImage_GetBPP(self)

    def GetWidth(self, videochannel=0):
        """
        GetWidth(svlSampleImage self, unsigned int const videochannel=0) -> unsigned int
        GetWidth(svlSampleImage self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImage_GetWidth(self, videochannel)

    def GetHeight(self, videochannel=0):
        """
        GetHeight(svlSampleImage self, unsigned int const videochannel=0) -> unsigned int
        GetHeight(svlSampleImage self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImage_GetHeight(self, videochannel)

    def GetRowStride(self, videochannel=0):
        """
        GetRowStride(svlSampleImage self, unsigned int const videochannel=0) -> unsigned int
        GetRowStride(svlSampleImage self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImage_GetRowStride(self, videochannel)

    def GetDataSize(self, *args):
        """
        GetDataSize(svlSampleImage self) -> unsigned int
        GetDataSize(svlSampleImage self, unsigned int const videochannel) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImage_GetDataSize(self, *args)

    def GetSubImage(self, *args):
        """
        GetSubImage(svlSampleImage self, unsigned int const top, unsigned int const height, unsigned int const videochannel=0) -> svlSampleImage
        GetSubImage(svlSampleImage self, unsigned int const top, unsigned int const height) -> svlSampleImage
        GetSubImage(svlSampleImage self, svlProcInfo * procInfo, unsigned int const videochannel=0) -> svlSampleImage
        GetSubImage(svlSampleImage self, svlProcInfo * procInfo) -> svlSampleImage
        """
        return _cisstStereoVisionPython.svlSampleImage_GetSubImage(self, *args)

    def ImportData(self, *args):
        """
        ImportData(svlSampleImage self, unsigned char * input, unsigned int const size, int const param=0, unsigned int const videoch=SVL_LEFT) -> int
        ImportData(svlSampleImage self, unsigned char * input, unsigned int const size, int const param=0) -> int
        ImportData(svlSampleImage self, unsigned char * input, unsigned int const size) -> int
        ImportData(svlSampleImage self, unsigned short * input, unsigned int const size, int const param=0, unsigned int const videoch=SVL_LEFT) -> int
        ImportData(svlSampleImage self, unsigned short * input, unsigned int const size, int const param=0) -> int
        ImportData(svlSampleImage self, unsigned short * input, unsigned int const size) -> int
        ImportData(svlSampleImage self, unsigned int * input, unsigned int const size, int const param=0, unsigned int const videoch=SVL_LEFT) -> int
        ImportData(svlSampleImage self, unsigned int * input, unsigned int const size, int const param=0) -> int
        ImportData(svlSampleImage self, unsigned int * input, unsigned int const size) -> int
        ImportData(svlSampleImage self, float * input, unsigned int const size, int const param=0, unsigned int const videoch=SVL_LEFT) -> int
        ImportData(svlSampleImage self, float * input, unsigned int const size, int const param=0) -> int
        ImportData(svlSampleImage self, float * input, unsigned int const size) -> int
        """
        return _cisstStereoVisionPython.svlSampleImage_ImportData(self, *args)

    def ImportImage(self, *args):
        """
        ImportImage(svlSampleImage self, svlSampleImage image, int const param=0) -> int
        ImportImage(svlSampleImage self, svlSampleImage image) -> int
        ImportImage(svlSampleImage self, svlSampleImage image, int const param=0) -> int
        ImportImage(svlSampleImage self, svlSampleImage image) -> int
        ImportImage(svlSampleImage self, svlSampleImage image, unsigned int const src_channel, unsigned int const dest_channel, 
            int const param=0) -> int
        ImportImage(svlSampleImage self, svlSampleImage image, unsigned int const src_channel, unsigned int const dest_channel) -> int
        ImportImage(svlSampleImage self, svlSampleImage image, unsigned int const src_channel, unsigned int const dest_channel, 
            int const param=0) -> int
        ImportImage(svlSampleImage self, svlSampleImage image, unsigned int const src_channel, unsigned int const dest_channel) -> int
        """
        return _cisstStereoVisionPython.svlSampleImage_ImportImage(self, *args)

    def ImportMatrix(self, *args):
        """
        ImportMatrix(svlSampleImage self, svlSampleMatrix const * matrix, int const param=0, unsigned int const videoch=SVL_LEFT) -> int
        ImportMatrix(svlSampleImage self, svlSampleMatrix const * matrix, int const param=0) -> int
        ImportMatrix(svlSampleImage self, svlSampleMatrix const * matrix) -> int
        """
        return _cisstStereoVisionPython.svlSampleImage_ImportMatrix(self, *args)

    def ImportSample(self, *args):
        """
        ImportSample(svlSampleImage self, svlSample const * sample) -> int
        ImportSample(svlSampleImage self, svlSample const * sample, unsigned int const videoch) -> int
        """
        return _cisstStereoVisionPython.svlSampleImage_ImportSample(self, *args)

svlSampleImage_swigregister = _cisstStereoVisionPython.svlSampleImage_swigregister
svlSampleImage_swigregister(svlSampleImage)

class svlSampleImageRGB(svlSampleImage):
    """Proxy of C++ svlSampleImageCustom<(unsigned char,3,1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlSampleImageRGB_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlSampleImageRGB_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlSampleImageRGB_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def Services(self):
        """Services(svlSampleImageRGB self) -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlSampleImageRGB_Services(self)

    def __init__(self, *args): 
        """
        __init__(svlSampleImageCustom<(unsigned char,3,1)> self) -> svlSampleImageRGB
        __init__(svlSampleImageCustom<(unsigned char,3,1)> self, bool owndata) -> svlSampleImageRGB
        __init__(svlSampleImageCustom<(unsigned char,3,1)> self, svlSampleImageRGB other) -> svlSampleImageRGB
        """
        this = _cisstStereoVisionPython.new_svlSampleImageRGB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlSampleImageRGB
    __del__ = lambda self : None;
    def IplImageRef(self, videochannel=0):
        """
        IplImageRef(svlSampleImageRGB self, unsigned int const videochannel=0) -> IplImage
        IplImageRef(svlSampleImageRGB self) -> IplImage *
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_IplImageRef(self, videochannel)

    def CvMatRef(self, videochannel=0):
        """
        CvMatRef(svlSampleImageRGB self, unsigned int const videochannel=0) -> cv::Mat
        CvMatRef(svlSampleImageRGB self) -> cv::Mat
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_CvMatRef(self, videochannel)

    def GetUCharPointer(self, *args):
        """
        GetUCharPointer(svlSampleImageRGB self) -> unsigned char
        GetUCharPointer(svlSampleImageRGB self) -> unsigned char const
        GetUCharPointer(svlSampleImageRGB self, unsigned int const videochannel) -> unsigned char
        GetUCharPointer(svlSampleImageRGB self, unsigned int const videochannel) -> unsigned char const
        GetUCharPointer(svlSampleImageRGB self, unsigned int const videochannel, unsigned int const x, unsigned int const y) -> unsigned char
        GetUCharPointer(svlSampleImageRGB self, unsigned int const videochannel, unsigned int const x, unsigned int const y) -> unsigned char const *
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetUCharPointer(self, *args)

    def SetSize(self, *args):
        """
        SetSize(svlSampleImageRGB self, svlSample const * sample) -> int
        SetSize(svlSampleImageRGB self, svlSample const & sample) -> int
        SetSize(svlSampleImageRGB self, unsigned int const width, unsigned int const height)
        SetSize(svlSampleImageRGB self, unsigned int const videochannel, unsigned int const width, unsigned int const height)
        SetSize(svlSampleImageRGB self, IplImage const * ipl_image, unsigned int const videochannel=0) -> int
        SetSize(svlSampleImageRGB self, IplImage const * ipl_image) -> int
        SetSize(svlSampleImageRGB self, cv::Mat const & cv_mat, unsigned int const videochannel=0) -> int
        SetSize(svlSampleImageRGB self, cv::Mat const & cv_mat) -> int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_SetSize(self, *args)

    def CopyOf(self, *args):
        """
        CopyOf(svlSampleImageRGB self, svlSample const * sample) -> int
        CopyOf(svlSampleImageRGB self, svlSample const & sample) -> int
        CopyOf(svlSampleImageRGB self, IplImage const * ipl_image, unsigned int const videochannel=0) -> int
        CopyOf(svlSampleImageRGB self, IplImage const * ipl_image) -> int
        CopyOf(svlSampleImageRGB self, cv::Mat const & cv_mat, unsigned int const videochannel=0) -> int
        CopyOf(svlSampleImageRGB self, cv::Mat const & cv_mat) -> int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_CopyOf(self, *args)

    def GetWidth(self, videochannel=0):
        """
        GetWidth(svlSampleImageRGB self, unsigned int const videochannel=0) -> unsigned int
        GetWidth(svlSampleImageRGB self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetWidth(self, videochannel)

    def GetHeight(self, videochannel=0):
        """
        GetHeight(svlSampleImageRGB self, unsigned int const videochannel=0) -> unsigned int
        GetHeight(svlSampleImageRGB self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetHeight(self, videochannel)

    def GetRowStride(self, videochannel=0):
        """
        GetRowStride(svlSampleImageRGB self, unsigned int const videochannel=0) -> unsigned int
        GetRowStride(svlSampleImageRGB self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetRowStride(self, videochannel)

    def GetDataSize(self, *args):
        """
        GetDataSize(svlSampleImageRGB self) -> unsigned int
        GetDataSize(svlSampleImageRGB self, unsigned int const videochannel) -> unsigned int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetDataSize(self, *args)

    def GetSubImage(self, *args):
        """
        GetSubImage(svlSampleImageRGB self, unsigned int const top, unsigned int const height, unsigned int const videochannel=0) -> svlSampleImage
        GetSubImage(svlSampleImageRGB self, unsigned int const top, unsigned int const height) -> svlSampleImage
        GetSubImage(svlSampleImageRGB self, svlProcInfo * procInfo, unsigned int const videochannel=0) -> svlSampleImage
        GetSubImage(svlSampleImageRGB self, svlProcInfo * procInfo) -> svlSampleImage
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetSubImage(self, *args)

    def SetMatrix(self, *args):
        """
        SetMatrix(svlSampleImageRGB self, cv::Mat & matrix, unsigned int videochannel=0) -> int
        SetMatrix(svlSampleImageRGB self, cv::Mat & matrix) -> int
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_SetMatrix(self, *args)

    def GetMatrixRef(self, *args):
        """
        GetMatrixRef(svlSampleImageRGB self, unsigned int const videochannel=0) -> vctDynamicMatrixRef< unsigned char >
        GetMatrixRef(svlSampleImageRGB self) -> vctDynamicMatrixRef< unsigned char >
        GetMatrixRef(svlSampleImageRGB self, unsigned int const videochannel=0) -> vctDynamicConstMatrixRef< unsigned char >
        GetMatrixRef(svlSampleImageRGB self) -> vctDynamicConstMatrixRef< unsigned char >
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetMatrixRef(self, *args)

    def GetPointer(self, *args):
        """
        GetPointer(svlSampleImageRGB self, unsigned int const videochannel=0) -> unsigned char
        GetPointer(svlSampleImageRGB self) -> unsigned char
        GetPointer(svlSampleImageRGB self, unsigned int const videochannel=0) -> unsigned char const
        GetPointer(svlSampleImageRGB self) -> unsigned char const
        GetPointer(svlSampleImageRGB self, unsigned int const videochannel, unsigned int const x, unsigned int const y) -> unsigned char
        GetPointer(svlSampleImageRGB self, unsigned int const videochannel, unsigned int const x, unsigned int const y) -> unsigned char const *
        """
        return _cisstStereoVisionPython.svlSampleImageRGB_GetPointer(self, *args)

svlSampleImageRGB_swigregister = _cisstStereoVisionPython.svlSampleImageRGB_swigregister
svlSampleImageRGB_swigregister(svlSampleImageRGB)

def svlSampleImageRGB_ClassServices():
  """svlSampleImageRGB_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlSampleImageRGB_ClassServices()

class Internals(object):
    """Proxy of C++ svlImageProcessing::Internals class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(svlImageProcessing::Internals self) -> Internals"""
        this = _cisstStereoVisionPython.new_Internals()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_Internals
    __del__ = lambda self : None;
    def Get(self):
        """Get(Internals self) -> svlImageProcessingInternals"""
        return _cisstStereoVisionPython.Internals_Get(self)

    def Set(self, *args):
        """Set(Internals self, svlImageProcessingInternals ib)"""
        return _cisstStereoVisionPython.Internals_Set(self, *args)

    def Release(self):
        """Release(Internals self)"""
        return _cisstStereoVisionPython.Internals_Release(self)

Internals_swigregister = _cisstStereoVisionPython.Internals_swigregister
Internals_swigregister(Internals)

DI_None = _cisstStereoVisionPython.DI_None
DI_Blending = _cisstStereoVisionPython.DI_Blending
DI_Discarding = _cisstStereoVisionPython.DI_Discarding
DI_AdaptiveBlending = _cisstStereoVisionPython.DI_AdaptiveBlending
DI_AdaptiveDiscarding = _cisstStereoVisionPython.DI_AdaptiveDiscarding

def Convolution(*args):
  """
    Convolution(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        vctDynamicVector< double > kernel_horiz, vctDynamicVector< double > kernel_vert, 
        bool absres=False) -> int
    Convolution(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        vctDynamicVector< double > kernel_horiz, vctDynamicVector< double > kernel_vert) -> int
    Convolution(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        vctDynamicMatrix< double > kernel, bool absres=False) -> int
    Convolution(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        vctDynamicMatrix< double > kernel) -> int
    """
  return _cisstStereoVisionPython.Convolution(*args)

def UnsharpMask(*args):
  """
    UnsharpMask(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        int radius, double amount, int threshold=0) -> int
    UnsharpMask(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        int radius, double amount) -> int
    """
  return _cisstStereoVisionPython.UnsharpMask(*args)

def Crop(*args):
  """
    Crop(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        int left, int top) -> int
    """
  return _cisstStereoVisionPython.Crop(*args)

def Resize(*args):
  """
    Resize(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        bool interpolation) -> int
    Resize(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        bool interpolation, vctDynamicVector< unsigned char > & internals) -> int
    """
  return _cisstStereoVisionPython.Resize(*args)

def Deinterlace(*args):
  """Deinterlace(svlSampleImage image, unsigned int videoch, svlImageProcessing::DI_Algorithm algorithm) -> int"""
  return _cisstStereoVisionPython.Deinterlace(*args)

def DisparityMapToSurface(*args):
  """
    DisparityMapToSurface(svlSampleMatrixFloat * disparity_map, svlSampleImage3DMap * mesh_3d, svlCameraGeometry & camera_geometry, 
        svlRect & roi) -> int
    """
  return _cisstStereoVisionPython.DisparityMapToSurface(*args)

def Rectify(*args):
  """
    Rectify(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        std::string const & table_filename, bool interpolation) -> int
    Rectify(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        std::string const & table_filename, bool interpolation, 
        Internals internals) -> int
    """
  return _cisstStereoVisionPython.Rectify(*args)

def RectifyPython(*args):
  """
    RectifyPython(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        bool interpolation, Internals internals) -> int
    """
  return _cisstStereoVisionPython.RectifyPython(*args)

def SetExposure(*args):
  """
    SetExposure(svlSampleImage image, unsigned int videoch, double brightness, double contrast, double gamma) -> int
    SetExposure(svlSampleImage image, unsigned int videoch, double brightness, double contrast, double gamma, 
        Internals internals) -> int
    """
  return _cisstStereoVisionPython.SetExposure(*args)

def Dilate(*args):
  """
    Dilate(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        unsigned int radius) -> int
    """
  return _cisstStereoVisionPython.Dilate(*args)

def Erode(*args):
  """
    Erode(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch, 
        unsigned int radius) -> int
    """
  return _cisstStereoVisionPython.Erode(*args)

def Blend(*args):
  """
    Blend(svlSampleImage src1_img, unsigned int src1_videoch, svlSampleImage src2_img, unsigned int src2_videoch, 
        svlSampleImage mask_img, unsigned int mask_videoch, 
        svlSampleImage dst_img, unsigned int dst_videoch) -> int
    """
  return _cisstStereoVisionPython.Blend(*args)

def SwapColorChannels(*args):
  """SwapColorChannels(svlSampleImage src_img, unsigned int src_videoch, svlSampleImage dst_img, unsigned int dst_videoch) -> int"""
  return _cisstStereoVisionPython.SwapColorChannels(*args)

def LabelBlobs(*args):
  """
    LabelBlobs(svlSampleImageMono8 const * image, svlSampleImageMono32 * labels, Internals internals) -> unsigned int
    LabelBlobs(svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo * labels, unsigned int const videoch, 
        Internals internals) -> unsigned int
    """
  return _cisstStereoVisionPython.LabelBlobs(*args)

def GetBlobsFromLabels(*args):
  """
    GetBlobsFromLabels(svlSampleImageMono8 const * image, svlSampleImageMono32 const * labels, svlSampleBlobs * blobs, 
        Internals internals, unsigned int min_area=0, unsigned int max_area=0, 
        double min_compactness=0.0, double max_compactness=0.0) -> int
    GetBlobsFromLabels(svlSampleImageMono8 const * image, svlSampleImageMono32 const * labels, svlSampleBlobs * blobs, 
        Internals internals, unsigned int min_area=0, unsigned int max_area=0, 
        double min_compactness=0.0) -> int
    GetBlobsFromLabels(svlSampleImageMono8 const * image, svlSampleImageMono32 const * labels, svlSampleBlobs * blobs, 
        Internals internals, unsigned int min_area=0, unsigned int max_area=0) -> int
    GetBlobsFromLabels(svlSampleImageMono8 const * image, svlSampleImageMono32 const * labels, svlSampleBlobs * blobs, 
        Internals internals, unsigned int min_area=0) -> int
    GetBlobsFromLabels(svlSampleImageMono8 const * image, svlSampleImageMono32 const * labels, svlSampleBlobs * blobs, 
        Internals internals) -> int
    GetBlobsFromLabels(svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo const * labels, 
        svlSampleBlobs * blobs, unsigned int const videoch, Internals internals, 
        unsigned int min_area=0, unsigned int max_area=0, double min_compactness=0.0, 
        double max_compactness=0.0) -> int
    GetBlobsFromLabels(svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo const * labels, 
        svlSampleBlobs * blobs, unsigned int const videoch, Internals internals, 
        unsigned int min_area=0, unsigned int max_area=0, double min_compactness=0.0) -> int
    GetBlobsFromLabels(svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo const * labels, 
        svlSampleBlobs * blobs, unsigned int const videoch, Internals internals, 
        unsigned int min_area=0, unsigned int max_area=0) -> int
    GetBlobsFromLabels(svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo const * labels, 
        svlSampleBlobs * blobs, unsigned int const videoch, Internals internals, 
        unsigned int min_area=0) -> int
    GetBlobsFromLabels(svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo const * labels, 
        svlSampleBlobs * blobs, unsigned int const videoch, Internals internals) -> int
    """
  return _cisstStereoVisionPython.GetBlobsFromLabels(*args)
class svlImageProcessingInternals(object):
    """Proxy of C++ svlImageProcessingInternals class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlImageProcessingInternals
    __del__ = lambda self : None;
svlImageProcessingInternals_swigregister = _cisstStereoVisionPython.svlImageProcessingInternals_swigregister
svlImageProcessingInternals_swigregister(svlImageProcessingInternals)


def dgeev_(*args):
  """
    dgeev_(char * JOBVL, char * JOBVR, CISSTNETLIB_INTEGER * N, CISSTNETLIB_DOUBLE * A, CISSTNETLIB_INTEGER * LDA, 
        CISSTNETLIB_DOUBLE * WR, CISSTNETLIB_DOUBLE * WI, CISSTNETLIB_DOUBLE * VL, 
        CISSTNETLIB_INTEGER * LDVL, CISSTNETLIB_DOUBLE * VR, 
        CISSTNETLIB_INTEGER * LDVR, CISSTNETLIB_DOUBLE * WORK, CISSTNETLIB_INTEGER * LWORK, 
        CISSTNETLIB_INTEGER * INFO)
    """
  return _cisstStereoVisionPython.dgeev_(*args)

def ConvolutionRGB(*args):
  """
    ConvolutionRGB(unsigned char * input, unsigned char * output, int const width, int const height, 
        vctDynamicVector< int > & kernel, bool horizontal, bool absres)
    ConvolutionRGB(unsigned char * input, unsigned char * output, int const width, int const height, 
        vctDynamicMatrix< int > & kernel, bool absres)
    """
  return _cisstStereoVisionPython.ConvolutionRGB(*args)

def ConvolutionRGBA(*args):
  """
    ConvolutionRGBA(unsigned char * input, unsigned char * output, int const width, int const height, 
        vctDynamicVector< int > & kernel, bool horizontal, bool absres)
    ConvolutionRGBA(unsigned char * input, unsigned char * output, int const width, int const height, 
        vctDynamicMatrix< int > & kernel, bool absres)
    """
  return _cisstStereoVisionPython.ConvolutionRGBA(*args)

def ConvolutionMono8(*args):
  """
    ConvolutionMono8(unsigned char * input, unsigned char * output, int const width, int const height, 
        vctDynamicVector< int > & kernel, bool horizontal, bool absres)
    ConvolutionMono8(unsigned char * input, unsigned char * output, int const width, int const height, 
        vctDynamicMatrix< int > & kernel, bool absres)
    """
  return _cisstStereoVisionPython.ConvolutionMono8(*args)

def ConvolutionMono16(*args):
  """
    ConvolutionMono16(unsigned short * input, unsigned short * output, int const width, int const height, 
        vctDynamicVector< int > & kernel, bool horizontal, bool absres)
    ConvolutionMono16(unsigned short * input, unsigned short * output, int const width, int const height, 
        vctDynamicMatrix< int > & kernel, bool absres)
    """
  return _cisstStereoVisionPython.ConvolutionMono16(*args)

def ConvolutionMono32(*args):
  """
    ConvolutionMono32(unsigned int * input, unsigned int * output, int const width, int const height, vctDynamicVector< int > & kernel, 
        bool horizontal, bool absres)
    ConvolutionMono32(unsigned int * input, unsigned int * output, int const width, int const height, vctDynamicMatrix< int > & kernel, 
        bool absres)
    """
  return _cisstStereoVisionPython.ConvolutionMono32(*args)

def UnsharpMaskBlurRGB(*args):
  """
    UnsharpMaskBlurRGB(unsigned char const * img_in, unsigned char * img_out, int const width, int const height, 
        int radius)
    """
  return _cisstStereoVisionPython.UnsharpMaskBlurRGB(*args)

def UnsharpMaskSharpenRGB(*args):
  """
    UnsharpMaskSharpenRGB(unsigned char const * img_in, unsigned char const * img_mask, unsigned char * img_out, 
        int const width, int const height, int const amount, int const threshold)
    """
  return _cisstStereoVisionPython.UnsharpMaskSharpenRGB(*args)

def ResampleMono8(*args):
  """
    ResampleMono8(unsigned char * src, unsigned int const srcwidth, unsigned int const srcheight, unsigned char * dst, 
        unsigned int const dstwidth, unsigned int const dstheight)
    """
  return _cisstStereoVisionPython.ResampleMono8(*args)

def ResampleAndInterpolateHMono8(*args):
  """
    ResampleAndInterpolateHMono8(unsigned char * src, unsigned int const srcwidth, unsigned char * dst, unsigned int const dstwidth, 
        unsigned int const height)
    """
  return _cisstStereoVisionPython.ResampleAndInterpolateHMono8(*args)

def ResampleAndInterpolateVMono8(*args):
  """
    ResampleAndInterpolateVMono8(unsigned char * src, unsigned int const srcheight, unsigned char * dst, unsigned int const dstheight, 
        unsigned int const width)
    """
  return _cisstStereoVisionPython.ResampleAndInterpolateVMono8(*args)

def ResampleRGB24(*args):
  """
    ResampleRGB24(unsigned char * src, unsigned int const srcwidth, unsigned int const srcheight, unsigned char * dst, 
        unsigned int const dstwidth, unsigned int const dstheight)
    """
  return _cisstStereoVisionPython.ResampleRGB24(*args)

def ResampleAndInterpolateHRGB24(*args):
  """
    ResampleAndInterpolateHRGB24(unsigned char * src, unsigned int const srcwidth, unsigned char * dst, unsigned int const dstwidth, 
        unsigned int const height)
    """
  return _cisstStereoVisionPython.ResampleAndInterpolateHRGB24(*args)

def ResampleAndInterpolateVRGB24(*args):
  """
    ResampleAndInterpolateVRGB24(unsigned char * src, unsigned int const srcheight, unsigned char * dst, unsigned int const dstheight, 
        unsigned int const width)
    """
  return _cisstStereoVisionPython.ResampleAndInterpolateVRGB24(*args)

def DeinterlaceBlending(*args):
  """DeinterlaceBlending(unsigned char * buffer, unsigned int const width, unsigned int const height)"""
  return _cisstStereoVisionPython.DeinterlaceBlending(*args)

def DeinterlaceDiscarding(*args):
  """DeinterlaceDiscarding(unsigned char * buffer, unsigned int const width, unsigned int const height)"""
  return _cisstStereoVisionPython.DeinterlaceDiscarding(*args)

def DeinterlaceAdaptiveBlending(*args):
  """DeinterlaceAdaptiveBlending(unsigned char * buffer, unsigned int const width, unsigned int const height)"""
  return _cisstStereoVisionPython.DeinterlaceAdaptiveBlending(*args)

def DeinterlaceAdaptiveDiscarding(*args):
  """DeinterlaceAdaptiveDiscarding(unsigned char * buffer, unsigned int const width, unsigned int const height)"""
  return _cisstStereoVisionPython.DeinterlaceAdaptiveDiscarding(*args)
class RectificationInternals(svlImageProcessingInternals):
    """Proxy of C++ svlImageProcessingHelper::RectificationInternals class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(svlImageProcessingHelper::RectificationInternals self) -> RectificationInternals"""
        this = _cisstStereoVisionPython.new_RectificationInternals()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_RectificationInternals
    __del__ = lambda self : None;
    def Generate(self, *args):
        """
        Generate(RectificationInternals self, unsigned int width, unsigned int height, svlSampleCameraGeometry const & geometry, 
            unsigned int cam_id=SVL_LEFT) -> bool
        Generate(RectificationInternals self, unsigned int width, unsigned int height, svlSampleCameraGeometry const & geometry) -> bool
        """
        return _cisstStereoVisionPython.RectificationInternals_Generate(self, *args)

    def Load(self, *args):
        """
        Load(RectificationInternals self, std::string const & filepath, int exponentlen=3) -> bool
        Load(RectificationInternals self, std::string const & filepath) -> bool
        """
        return _cisstStereoVisionPython.RectificationInternals_Load(self, *args)

    def SetFromCameraCalibrationPython(self, *args):
        """
        SetFromCameraCalibrationPython(RectificationInternals self, unsigned int height, unsigned int width, vct3x3 R, vct2 f, vct2 c, vctFixedSizeVector< double,7 > k, 
            double alpha, unsigned int videoch=0) -> bool
        """
        return _cisstStereoVisionPython.RectificationInternals_SetFromCameraCalibrationPython(self, *args)

    def SetFromCameraCalibration(self, *args):
        """
        SetFromCameraCalibration(RectificationInternals self, unsigned int height, unsigned int width, vct3x3 R, vct2 f, vct2 c, vctFixedSizeVector< double,7 > k, 
            double alpha) -> bool
        """
        return _cisstStereoVisionPython.RectificationInternals_SetFromCameraCalibration(self, *args)

    def TransposeLUTArray2(self, *args):
        """TransposeLUTArray2(RectificationInternals self, unsigned int * index, unsigned int size, unsigned int width, unsigned int height)"""
        return _cisstStereoVisionPython.RectificationInternals_TransposeLUTArray2(self, *args)

    Width = _swig_property(_cisstStereoVisionPython.RectificationInternals_Width_get, _cisstStereoVisionPython.RectificationInternals_Width_set)
    Height = _swig_property(_cisstStereoVisionPython.RectificationInternals_Height_get, _cisstStereoVisionPython.RectificationInternals_Height_set)
    idxDest = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxDest_get, _cisstStereoVisionPython.RectificationInternals_idxDest_set)
    idxDestSize = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxDestSize_get, _cisstStereoVisionPython.RectificationInternals_idxDestSize_set)
    idxSrc1 = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc1_get, _cisstStereoVisionPython.RectificationInternals_idxSrc1_set)
    idxSrc1Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc1Size_get, _cisstStereoVisionPython.RectificationInternals_idxSrc1Size_set)
    idxSrc2 = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc2_get, _cisstStereoVisionPython.RectificationInternals_idxSrc2_set)
    idxSrc2Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc2Size_get, _cisstStereoVisionPython.RectificationInternals_idxSrc2Size_set)
    idxSrc3 = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc3_get, _cisstStereoVisionPython.RectificationInternals_idxSrc3_set)
    idxSrc3Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc3Size_get, _cisstStereoVisionPython.RectificationInternals_idxSrc3Size_set)
    idxSrc4 = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc4_get, _cisstStereoVisionPython.RectificationInternals_idxSrc4_set)
    idxSrc4Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_idxSrc4Size_get, _cisstStereoVisionPython.RectificationInternals_idxSrc4Size_set)
    blendSrc1 = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc1_get, _cisstStereoVisionPython.RectificationInternals_blendSrc1_set)
    blendSrc1Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc1Size_get, _cisstStereoVisionPython.RectificationInternals_blendSrc1Size_set)
    blendSrc2 = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc2_get, _cisstStereoVisionPython.RectificationInternals_blendSrc2_set)
    blendSrc2Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc2Size_get, _cisstStereoVisionPython.RectificationInternals_blendSrc2Size_set)
    blendSrc3 = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc3_get, _cisstStereoVisionPython.RectificationInternals_blendSrc3_set)
    blendSrc3Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc3Size_get, _cisstStereoVisionPython.RectificationInternals_blendSrc3Size_set)
    blendSrc4 = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc4_get, _cisstStereoVisionPython.RectificationInternals_blendSrc4_set)
    blendSrc4Size = _swig_property(_cisstStereoVisionPython.RectificationInternals_blendSrc4Size_get, _cisstStereoVisionPython.RectificationInternals_blendSrc4Size_set)
RectificationInternals_swigregister = _cisstStereoVisionPython.RectificationInternals_swigregister
RectificationInternals_swigregister(RectificationInternals)

class ExposureInternals(svlImageProcessingInternals):
    """Proxy of C++ svlImageProcessingHelper::ExposureInternals class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(svlImageProcessingHelper::ExposureInternals self) -> ExposureInternals"""
        this = _cisstStereoVisionPython.new_ExposureInternals()
        try: self.this.append(this)
        except: self.this = this
    def SetBrightness(self, *args):
        """SetBrightness(ExposureInternals self, double brightness)"""
        return _cisstStereoVisionPython.ExposureInternals_SetBrightness(self, *args)

    def GetBrightness(self):
        """GetBrightness(ExposureInternals self) -> double"""
        return _cisstStereoVisionPython.ExposureInternals_GetBrightness(self)

    def SetContrast(self, *args):
        """SetContrast(ExposureInternals self, double contrast)"""
        return _cisstStereoVisionPython.ExposureInternals_SetContrast(self, *args)

    def GetContrast(self):
        """GetContrast(ExposureInternals self) -> double"""
        return _cisstStereoVisionPython.ExposureInternals_GetContrast(self)

    def SetGamma(self, *args):
        """SetGamma(ExposureInternals self, double gamma)"""
        return _cisstStereoVisionPython.ExposureInternals_SetGamma(self, *args)

    def GetGamma(self):
        """GetGamma(ExposureInternals self) -> double"""
        return _cisstStereoVisionPython.ExposureInternals_GetGamma(self)

    def CalculateCurve(self):
        """CalculateCurve(ExposureInternals self)"""
        return _cisstStereoVisionPython.ExposureInternals_CalculateCurve(self)

    Curve = _swig_property(_cisstStereoVisionPython.ExposureInternals_Curve_get, _cisstStereoVisionPython.ExposureInternals_Curve_set)
    __swig_destroy__ = _cisstStereoVisionPython.delete_ExposureInternals
    __del__ = lambda self : None;
ExposureInternals_swigregister = _cisstStereoVisionPython.ExposureInternals_swigregister
ExposureInternals_swigregister(ExposureInternals)

class BlobDetectorInternals(svlImageProcessingInternals):
    """Proxy of C++ svlImageProcessingHelper::BlobDetectorInternals class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(svlImageProcessingHelper::BlobDetectorInternals self) -> BlobDetectorInternals"""
        this = _cisstStereoVisionPython.new_BlobDetectorInternals()
        try: self.this.append(this)
        except: self.this = this
    def CalculateLabels(self, *args):
        """
        CalculateLabels(BlobDetectorInternals self, svlSampleImageMono8 const * image, svlSampleImageMono32 * labels) -> unsigned int
        CalculateLabels(BlobDetectorInternals self, svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo * labels, unsigned int const videoch) -> unsigned int
        """
        return _cisstStereoVisionPython.BlobDetectorInternals_CalculateLabels(self, *args)

    def GetBlobs(self, *args):
        """
        GetBlobs(BlobDetectorInternals self, svlSampleImageMono8 const * image, svlSampleImageMono32 const * labels, svlSampleBlobs * blobs, 
            unsigned int min_area, unsigned int max_area, double min_compactness, 
            double max_compactness) -> bool
        GetBlobs(BlobDetectorInternals self, svlSampleImageMono8Stereo const * image, svlSampleImageMono32Stereo const * labels, 
            svlSampleBlobs * blobs, unsigned int const videoch, unsigned int min_area, 
            unsigned int max_area, double min_compactness, double max_compactness) -> bool
        """
        return _cisstStereoVisionPython.BlobDetectorInternals_GetBlobs(self, *args)

    __swig_destroy__ = _cisstStereoVisionPython.delete_BlobDetectorInternals
    __del__ = lambda self : None;
BlobDetectorInternals_swigregister = _cisstStereoVisionPython.BlobDetectorInternals_swigregister
BlobDetectorInternals_swigregister(BlobDetectorInternals)

class EllipseFitterInternals(svlImageProcessingInternals):
    """Proxy of C++ svlImageProcessingHelper::EllipseFitterInternals class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(svlImageProcessingHelper::EllipseFitterInternals self) -> EllipseFitterInternals"""
        this = _cisstStereoVisionPython.new_EllipseFitterInternals()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_EllipseFitterInternals
    __del__ = lambda self : None;
EllipseFitterInternals_swigregister = _cisstStereoVisionPython.EllipseFitterInternals_swigregister
EllipseFitterInternals_swigregister(EllipseFitterInternals)

class svlVideoCodecCVI(object):
    """Proxy of C++ svlVideoCodecCVI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlVideoCodecCVI_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlVideoCodecCVI_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def Services(self):
        """Services(svlVideoCodecCVI self) -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_Services(self)

    def __init__(self): 
        """__init__(svlVideoCodecCVI self) -> svlVideoCodecCVI"""
        this = _cisstStereoVisionPython.new_svlVideoCodecCVI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlVideoCodecCVI
    __del__ = lambda self : None;
    def Open(self, *args):
        """Open(svlVideoCodecCVI self, std::string const & filename, unsigned int & width, unsigned int & height, double & framerate) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_Open(self, *args)

    def Create(self, *args):
        """
        Create(svlVideoCodecCVI self, std::string const & filename, unsigned int const width, unsigned int const height, 
            double const framerate) -> int
        """
        return _cisstStereoVisionPython.svlVideoCodecCVI_Create(self, *args)

    def Close(self):
        """Close(svlVideoCodecCVI self) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_Close(self)

    def GetBegPos(self):
        """GetBegPos(svlVideoCodecCVI self) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetBegPos(self)

    def GetEndPos(self):
        """GetEndPos(svlVideoCodecCVI self) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetEndPos(self)

    def GetPos(self):
        """GetPos(svlVideoCodecCVI self) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetPos(self)

    def SetPos(self, *args):
        """SetPos(svlVideoCodecCVI self, int const pos) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetPos(self, *args)

    def GetBegTime(self):
        """GetBegTime(svlVideoCodecCVI self) -> double"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetBegTime(self)

    def GetEndTime(self):
        """GetEndTime(svlVideoCodecCVI self) -> double"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetEndTime(self)

    def GetTimeAtPos(self, *args):
        """GetTimeAtPos(svlVideoCodecCVI self, int const pos) -> double"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetTimeAtPos(self, *args)

    def GetPosAtTime(self, *args):
        """GetPosAtTime(svlVideoCodecCVI self, double const time) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetPosAtTime(self, *args)

    def GetCompression(self):
        """GetCompression(svlVideoCodecCVI self) -> svlVideoIO::Compression *"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetCompression(self)

    def SetCompression(self, *args):
        """SetCompression(svlVideoCodecCVI self, svlVideoIO::Compression const * compression) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetCompression(self, *args)

    def DialogCompression(self):
        """DialogCompression(svlVideoCodecCVI self) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_DialogCompression(self)

    def GetTimestamp(self):
        """GetTimestamp(svlVideoCodecCVI self) -> double"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetTimestamp(self)

    def SetTimestamp(self, *args):
        """SetTimestamp(svlVideoCodecCVI self, double const timestamp) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetTimestamp(self, *args)

    def Read(self, *args):
        """
        Read(svlVideoCodecCVI self, svlProcInfo * procInfo, svlSampleImage image, unsigned int const videoch, bool const noresize=False) -> int
        Read(svlVideoCodecCVI self, svlProcInfo * procInfo, svlSampleImage image, unsigned int const videoch) -> int
        """
        return _cisstStereoVisionPython.svlVideoCodecCVI_Read(self, *args)

    def Write(self, *args):
        """Write(svlVideoCodecCVI self, svlProcInfo * procInfo, svlSampleImage image, unsigned int const videoch) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_Write(self, *args)

    def SetExtension(self, *args):
        """SetExtension(svlVideoCodecCVI self, std::string const & extension)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetExtension(self, *args)

    def SetEncoderID(self, *args):
        """SetEncoderID(svlVideoCodecCVI self, int const & encoder_id)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetEncoderID(self, *args)

    def SetCompressionLevel(self, *args):
        """SetCompressionLevel(svlVideoCodecCVI self, int const & compr_level)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetCompressionLevel(self, *args)

    def SetQualityBased(self, *args):
        """SetQualityBased(svlVideoCodecCVI self, bool const & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetQualityBased(self, *args)

    def SetTargetQuantizer(self, *args):
        """SetTargetQuantizer(svlVideoCodecCVI self, double const & target_quant)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetTargetQuantizer(self, *args)

    def SetDatarate(self, *args):
        """SetDatarate(svlVideoCodecCVI self, int const & datarate)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetDatarate(self, *args)

    def SetKeyFrameEvery(self, *args):
        """SetKeyFrameEvery(svlVideoCodecCVI self, int const & key_every)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_SetKeyFrameEvery(self, *args)

    def IsCompressionLevelEnabled(self, *args):
        """IsCompressionLevelEnabled(svlVideoCodecCVI self, bool & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_IsCompressionLevelEnabled(self, *args)

    def IsEncoderListEnabled(self, *args):
        """IsEncoderListEnabled(svlVideoCodecCVI self, bool & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_IsEncoderListEnabled(self, *args)

    def IsTargetQuantizerEnabled(self, *args):
        """IsTargetQuantizerEnabled(svlVideoCodecCVI self, bool & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_IsTargetQuantizerEnabled(self, *args)

    def IsDatarateEnabled(self, *args):
        """IsDatarateEnabled(svlVideoCodecCVI self, bool & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_IsDatarateEnabled(self, *args)

    def IsKeyFrameEveryEnabled(self, *args):
        """IsKeyFrameEveryEnabled(svlVideoCodecCVI self, bool & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_IsKeyFrameEveryEnabled(self, *args)

    def GetCompressionLevel(self, *args):
        """GetCompressionLevel(svlVideoCodecCVI self, int & compr_level)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetCompressionLevel(self, *args)

    def GetEncoderList(self, *args):
        """GetEncoderList(svlVideoCodecCVI self, std::string & encoder_list)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetEncoderList(self, *args)

    def GetEncoderID(self, *args):
        """GetEncoderID(svlVideoCodecCVI self, int & encoder_id)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetEncoderID(self, *args)

    def GetQualityBased(self, *args):
        """GetQualityBased(svlVideoCodecCVI self, bool & enabled)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetQualityBased(self, *args)

    def GetTargetQuantizer(self, *args):
        """GetTargetQuantizer(svlVideoCodecCVI self, double & target_quant)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetTargetQuantizer(self, *args)

    def GetDatarate(self, *args):
        """GetDatarate(svlVideoCodecCVI self, int & datarate)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetDatarate(self, *args)

    def GetKeyFrameEvery(self, *args):
        """GetKeyFrameEvery(svlVideoCodecCVI self, int & key_every)"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_GetKeyFrameEvery(self, *args)

    def ReadPython(self, *args):
        """ReadPython(svlVideoCodecCVI self, svlSampleImage image, unsigned int const videoch, bool const noresize) -> int"""
        return _cisstStereoVisionPython.svlVideoCodecCVI_ReadPython(self, *args)

svlVideoCodecCVI_swigregister = _cisstStereoVisionPython.svlVideoCodecCVI_swigregister
svlVideoCodecCVI_swigregister(svlVideoCodecCVI)

def svlVideoCodecCVI_ClassServices():
  """svlVideoCodecCVI_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlVideoCodecCVI_ClassServices()

class svlFilterImageWindow(svlFilterBase):
    """Proxy of C++ svlFilterImageWindow class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterImageWindow_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterImageWindow_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterImageWindow_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterImageWindow self) -> svlFilterImageWindow"""
        this = _cisstStereoVisionPython.new_svlFilterImageWindow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterImageWindow
    __del__ = lambda self : None;
    def SetPosition(self, *args):
        """
        SetPosition(svlFilterImageWindow self, int const x, int const y, unsigned int const videoch=SVL_LEFT) -> int
        SetPosition(svlFilterImageWindow self, int const x, int const y) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageWindow_SetPosition(self, *args)

    def GetPosition(self, *args):
        """
        GetPosition(svlFilterImageWindow self, int & x, int & y, unsigned int videoch=SVL_LEFT) -> int
        GetPosition(svlFilterImageWindow self, int & x, int & y) -> int
        """
        return _cisstStereoVisionPython.svlFilterImageWindow_GetPosition(self, *args)

    def SetEventHandler(self, *args):
        """SetEventHandler(svlFilterImageWindow self, svlWindowEventHandlerBase * handler)"""
        return _cisstStereoVisionPython.svlFilterImageWindow_SetEventHandler(self, *args)

    def SetFullScreen(self, *args):
        """SetFullScreen(svlFilterImageWindow self, bool const & fullscreen)"""
        return _cisstStereoVisionPython.svlFilterImageWindow_SetFullScreen(self, *args)

    def SetTitle(self, *args):
        """SetTitle(svlFilterImageWindow self, std::string const & title)"""
        return _cisstStereoVisionPython.svlFilterImageWindow_SetTitle(self, *args)

    def GetIsVisible(self, *args):
        """GetIsVisible(svlFilterImageWindow self, bool & show)"""
        return _cisstStereoVisionPython.svlFilterImageWindow_GetIsVisible(self, *args)

    def GetFullScreen(self, *args):
        """GetFullScreen(svlFilterImageWindow self, bool & fullscreen)"""
        return _cisstStereoVisionPython.svlFilterImageWindow_GetFullScreen(self, *args)

    def GetTitle(self, *args):
        """GetTitle(svlFilterImageWindow self, std::string & title)"""
        return _cisstStereoVisionPython.svlFilterImageWindow_GetTitle(self, *args)

    def Show(self, *args):
        """
        Show(svlFilterImageWindow self, unsigned int videoch=SVL_LEFT)
        Show(svlFilterImageWindow self)
        """
        return _cisstStereoVisionPython.svlFilterImageWindow_Show(self, *args)

    def Hide(self, *args):
        """
        Hide(svlFilterImageWindow self, unsigned int videoch=SVL_LEFT)
        Hide(svlFilterImageWindow self)
        """
        return _cisstStereoVisionPython.svlFilterImageWindow_Hide(self, *args)

svlFilterImageWindow_swigregister = _cisstStereoVisionPython.svlFilterImageWindow_swigregister
svlFilterImageWindow_swigregister(svlFilterImageWindow)

def svlFilterImageWindow_ClassServices():
  """svlFilterImageWindow_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterImageWindow_ClassServices()

class svlFilterImageCameraCalibrationOpenCV(svlFilterBase):
    """Proxy of C++ svlFilterImageCameraCalibrationOpenCV class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(svlFilterImageCameraCalibrationOpenCV self) -> svlFilterImageCameraCalibrationOpenCV"""
        this = _cisstStereoVisionPython.new_svlFilterImageCameraCalibrationOpenCV()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterImageCameraCalibrationOpenCV
    __del__ = lambda self : None;
    def ProcessImages(self, *args):
        """
        ProcessImages(svlFilterImageCameraCalibrationOpenCV self, std::string imageDirectory, std::string imagePrefix, std::string imageType, int startIndex, 
            int stopIndex, bool loadOrigins=False) -> bool
        ProcessImages(svlFilterImageCameraCalibrationOpenCV self, std::string imageDirectory, std::string imagePrefix, std::string imageType, int startIndex, 
            int stopIndex) -> bool
        """
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_ProcessImages(self, *args)

    def ProcessImage(self, *args):
        """
        ProcessImage(svlFilterImageCameraCalibrationOpenCV self, std::string imageDirectory, std::string imagePrefix, std::string imageType, int index, 
            vctDynamicVector< vctInt2 > originIndicators=vctDynamicVector< vctInt2 >()) -> bool
        ProcessImage(svlFilterImageCameraCalibrationOpenCV self, std::string imageDirectory, std::string imagePrefix, std::string imageType, int index) -> bool
        """
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_ProcessImage(self, *args)

    def Reset(self):
        """Reset(svlFilterImageCameraCalibrationOpenCV self)"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_Reset(self)

    def RunCameraCalibration(self, *args):
        """RunCameraCalibration(svlFilterImageCameraCalibrationOpenCV self, bool runHandEye) -> bool"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_RunCameraCalibration(self, *args)

    def SetBoardSize(self, *args):
        """SetBoardSize(svlFilterImageCameraCalibrationOpenCV self, int width, int height)"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_SetBoardSize(self, *args)

    def SetSquareSize(self, *args):
        """SetSquareSize(svlFilterImageCameraCalibrationOpenCV self, float size)"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_SetSquareSize(self, *args)

    def GetImages(self):
        """GetImages(svlFilterImageCameraCalibrationOpenCV self) -> std::vector< svlSampleImageRGB,std::allocator< svlSampleImageRGB > >"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_GetImages(self)

    def GetCameraGeometry(self, *args):
        """
        GetCameraGeometry(svlFilterImageCameraCalibrationOpenCV self, int index=-1) -> svlSampleCameraGeometry
        GetCameraGeometry(svlFilterImageCameraCalibrationOpenCV self) -> svlSampleCameraGeometry *
        """
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_GetCameraGeometry(self, *args)

    def SetCameraGeometry(self, *args):
        """SetCameraGeometry(svlFilterImageCameraCalibrationOpenCV self, vct2 f, vct2 c, double alpha, vctFixedSizeVector< double,7 > k)"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_SetCameraGeometry(self, *args)

    def PrintCalibrationParameters(self):
        """PrintCalibrationParameters(svlFilterImageCameraCalibrationOpenCV self)"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_PrintCalibrationParameters(self)

    def WriteToFileCalibrationParameters(self, *args):
        """WriteToFileCalibrationParameters(svlFilterImageCameraCalibrationOpenCV self, std::string directory)"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_WriteToFileCalibrationParameters(self, *args)

    def GetCameraCalibrationReprojectionError(self):
        """GetCameraCalibrationReprojectionError(svlFilterImageCameraCalibrationOpenCV self) -> double"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_GetCameraCalibrationReprojectionError(self)

    def GetHandEyeCalibrationError(self):
        """GetHandEyeCalibrationError(svlFilterImageCameraCalibrationOpenCV self) -> double"""
        return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_GetHandEyeCalibrationError(self)

svlFilterImageCameraCalibrationOpenCV_swigregister = _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_swigregister
svlFilterImageCameraCalibrationOpenCV_swigregister(svlFilterImageCameraCalibrationOpenCV)

def svlFilterImageCameraCalibrationOpenCV_ClassServices():
  """svlFilterImageCameraCalibrationOpenCV_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterImageCameraCalibrationOpenCV_ClassServices()

class svlFilterSourceVideoCapture(svlFilterSourceBase):
    """Proxy of C++ svlFilterSourceVideoCapture class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterSourceVideoCapture_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterSourceVideoCapture_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_ClassServices()

    ClassServices = staticmethod(ClassServices)
    propShutter = _cisstStereoVisionPython.svlFilterSourceVideoCapture_propShutter
    propGain = _cisstStereoVisionPython.svlFilterSourceVideoCapture_propGain
    propWhiteBalance = _cisstStereoVisionPython.svlFilterSourceVideoCapture_propWhiteBalance
    propBrightness = _cisstStereoVisionPython.svlFilterSourceVideoCapture_propBrightness
    propGamma = _cisstStereoVisionPython.svlFilterSourceVideoCapture_propGamma
    propSaturation = _cisstStereoVisionPython.svlFilterSourceVideoCapture_propSaturation
    def __init__(self, *args): 
        """
        __init__(svlFilterSourceVideoCapture self) -> svlFilterSourceVideoCapture
        __init__(svlFilterSourceVideoCapture self, unsigned int channelcount) -> svlFilterSourceVideoCapture
        """
        this = _cisstStereoVisionPython.new_svlFilterSourceVideoCapture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterSourceVideoCapture
    __del__ = lambda self : None;
    def EnumerateDevices(self):
        """EnumerateDevices(svlFilterSourceVideoCapture self) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_EnumerateDevices(self)

    def SetChannelCount(self, *args):
        """SetChannelCount(svlFilterSourceVideoCapture self, unsigned int channelcount) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SetChannelCount(self, *args)

    def DialogSetup(self, *args):
        """
        DialogSetup(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> int
        DialogSetup(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_DialogSetup(self, *args)

    def DialogDevice(self):
        """DialogDevice(svlFilterSourceVideoCapture self) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_DialogDevice(self)

    def DialogInput(self, *args):
        """DialogInput(svlFilterSourceVideoCapture self, unsigned int deviceid) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_DialogInput(self, *args)

    def DialogFormat(self, *args):
        """
        DialogFormat(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> int
        DialogFormat(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_DialogFormat(self, *args)

    def DialogTrigger(self, *args):
        """
        DialogTrigger(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> int
        DialogTrigger(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_DialogTrigger(self, *args)

    def DialogImageProperties(self, *args):
        """
        DialogImageProperties(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> int
        DialogImageProperties(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_DialogImageProperties(self, *args)

    def GetDeviceList(self, *args):
        """GetDeviceList(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::DeviceInfo ** deviceinfolist) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetDeviceList(self, *args)

    def ReleaseDeviceList(self, *args):
        """ReleaseDeviceList(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::DeviceInfo * deviceinfolist)"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_ReleaseDeviceList(self, *args)

    def PrintDeviceList(self, update=False):
        """
        PrintDeviceList(svlFilterSourceVideoCapture self, bool update=False) -> int
        PrintDeviceList(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_PrintDeviceList(self, update)

    def PrintInputList(self, *args):
        """
        PrintInputList(svlFilterSourceVideoCapture self, int deviceid, bool update=False) -> int
        PrintInputList(svlFilterSourceVideoCapture self, int deviceid) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_PrintInputList(self, *args)

    def SetDevice(self, *args):
        """
        SetDevice(svlFilterSourceVideoCapture self, int deviceid, int inputid=0, unsigned int videoch=SVL_LEFT) -> int
        SetDevice(svlFilterSourceVideoCapture self, int deviceid, int inputid=0) -> int
        SetDevice(svlFilterSourceVideoCapture self, int deviceid) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SetDevice(self, *args)

    def GetDevice(self, *args):
        """
        GetDevice(svlFilterSourceVideoCapture self, int & deviceid, int & inputid, unsigned int videoch=SVL_LEFT) -> int
        GetDevice(svlFilterSourceVideoCapture self, int & deviceid, int & inputid) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetDevice(self, *args)

    def GetFormatList(self, *args):
        """
        GetFormatList(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat ** formatlist, unsigned int videoch=SVL_LEFT) -> int
        GetFormatList(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat ** formatlist) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetFormatList(self, *args)

    def ReleaseFormatList(self, *args):
        """ReleaseFormatList(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat * formatlist)"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_ReleaseFormatList(self, *args)

    def PrintFormatList(self, *args):
        """
        PrintFormatList(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> int
        PrintFormatList(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_PrintFormatList(self, *args)

    def SelectFormat(self, *args):
        """
        SelectFormat(svlFilterSourceVideoCapture self, unsigned int formatid, unsigned int videoch=SVL_LEFT) -> int
        SelectFormat(svlFilterSourceVideoCapture self, unsigned int formatid) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SelectFormat(self, *args)

    def SetFormat(self, *args):
        """
        SetFormat(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat const & format, unsigned int videoch=SVL_LEFT) -> int
        SetFormat(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat const & format) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SetFormat(self, *args)

    def GetFormat(self, *args):
        """
        GetFormat(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat & format, unsigned int videoch=SVL_LEFT) -> int
        GetFormat(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageFormat & format) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetFormat(self, *args)

    def SetTrigger(self, *args):
        """
        SetTrigger(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ExternalTrigger const & trigger, unsigned int videoch=SVL_LEFT) -> int
        SetTrigger(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ExternalTrigger const & trigger) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SetTrigger(self, *args)

    def GetTrigger(self, *args):
        """
        GetTrigger(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ExternalTrigger & trigger, unsigned int videoch=SVL_LEFT) -> int
        GetTrigger(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ExternalTrigger & trigger) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetTrigger(self, *args)

    def SetImageProperties(self, *args):
        """
        SetImageProperties(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageProperties const & properties, unsigned int videoch=SVL_LEFT) -> int
        SetImageProperties(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageProperties const & properties) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SetImageProperties(self, *args)

    def GetImageProperties(self, *args):
        """
        GetImageProperties(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageProperties & properties, unsigned int videoch=SVL_LEFT) -> int
        GetImageProperties(svlFilterSourceVideoCapture self, svlFilterSourceVideoCapture::ImageProperties & properties) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetImageProperties(self, *args)

    def GetPixelTypeName(*args):
        """GetPixelTypeName(svlFilterSourceVideoCapture::PixelType pixeltype) -> std::string"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetPixelTypeName(*args)

    GetPixelTypeName = staticmethod(GetPixelTypeName)
    def GetPatternTypeName(*args):
        """GetPatternTypeName(svlFilterSourceVideoCapture::PatternType patterntype) -> std::string"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetPatternTypeName(*args)

    GetPatternTypeName = staticmethod(GetPatternTypeName)
    def GetWidth(self, *args):
        """
        GetWidth(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> unsigned int
        GetWidth(svlFilterSourceVideoCapture self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetWidth(self, *args)

    def GetHeight(self, *args):
        """
        GetHeight(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> unsigned int
        GetHeight(svlFilterSourceVideoCapture self) -> unsigned int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetHeight(self, *args)

    def SaveSettings(self, *args):
        """SaveSettings(svlFilterSourceVideoCapture self, char const * filepath) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SaveSettings(self, *args)

    def LoadSettings(self, *args):
        """LoadSettings(svlFilterSourceVideoCapture self, char const * filepath) -> int"""
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_LoadSettings(self, *args)

    def SetDefaultSettings(self, *args):
        """
        SetDefaultSettings(svlFilterSourceVideoCapture self, unsigned int videoch=SVL_LEFT) -> int
        SetDefaultSettings(svlFilterSourceVideoCapture self) -> int
        """
        return _cisstStereoVisionPython.svlFilterSourceVideoCapture_SetDefaultSettings(self, *args)

svlFilterSourceVideoCapture_swigregister = _cisstStereoVisionPython.svlFilterSourceVideoCapture_swigregister
svlFilterSourceVideoCapture_swigregister(svlFilterSourceVideoCapture)

def svlFilterSourceVideoCapture_ClassServices():
  """svlFilterSourceVideoCapture_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterSourceVideoCapture_ClassServices()

def svlFilterSourceVideoCapture_GetPixelTypeName(*args):
  """svlFilterSourceVideoCapture_GetPixelTypeName(svlFilterSourceVideoCapture::PixelType pixeltype) -> std::string"""
  return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetPixelTypeName(*args)

def svlFilterSourceVideoCapture_GetPatternTypeName(*args):
  """svlFilterSourceVideoCapture_GetPatternTypeName(svlFilterSourceVideoCapture::PatternType patterntype) -> std::string"""
  return _cisstStereoVisionPython.svlFilterSourceVideoCapture_GetPatternTypeName(*args)

class svlVidCapSrcBase(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ svlVidCapSrcBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlVidCapSrcBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlVidCapSrcBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlVidCapSrcBase
    __del__ = lambda self : None;
    def GetPlatformType(self):
        """GetPlatformType(svlVidCapSrcBase self) -> svlFilterSourceVideoCapture::PlatformType"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetPlatformType(self)

    def SetStreamCount(self, *args):
        """SetStreamCount(svlVidCapSrcBase self, unsigned int numofstreams) -> int"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_SetStreamCount(self, *args)

    def GetDeviceList(self, *args):
        """GetDeviceList(svlVidCapSrcBase self, svlFilterSourceVideoCapture::DeviceInfo ** deviceinfo) -> int"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetDeviceList(self, *args)

    def Open(self):
        """Open(svlVidCapSrcBase self) -> int"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_Open(self)

    def Close(self):
        """Close(svlVidCapSrcBase self)"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_Close(self)

    def Start(self):
        """Start(svlVidCapSrcBase self) -> int"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_Start(self)

    def GetLatestFrame(self, *args):
        """
        GetLatestFrame(svlVidCapSrcBase self, bool waitfornew, unsigned int videoch=0) -> svlImageRGB
        GetLatestFrame(svlVidCapSrcBase self, bool waitfornew) -> svlImageRGB *
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetLatestFrame(self, *args)

    def Stop(self):
        """Stop(svlVidCapSrcBase self) -> int"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_Stop(self)

    def IsRunning(self):
        """IsRunning(svlVidCapSrcBase self) -> bool"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_IsRunning(self)

    def SetDevice(self, *args):
        """
        SetDevice(svlVidCapSrcBase self, int devid, int inid, unsigned int videoch=0) -> int
        SetDevice(svlVidCapSrcBase self, int devid, int inid) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_SetDevice(self, *args)

    def GetWidth(self, videoch=0):
        """
        GetWidth(svlVidCapSrcBase self, unsigned int videoch=0) -> int
        GetWidth(svlVidCapSrcBase self) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetWidth(self, videoch)

    def GetHeight(self, videoch=0):
        """
        GetHeight(svlVidCapSrcBase self, unsigned int videoch=0) -> int
        GetHeight(svlVidCapSrcBase self) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetHeight(self, videoch)

    def GetFormatList(self, *args):
        """GetFormatList(svlVidCapSrcBase self, unsigned int deviceid, svlFilterSourceVideoCapture::ImageFormat ** formatlist) -> int"""
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetFormatList(self, *args)

    def SetFormat(self, *args):
        """
        SetFormat(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageFormat & format, unsigned int videoch=0) -> int
        SetFormat(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageFormat & format) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_SetFormat(self, *args)

    def GetFormat(self, *args):
        """
        GetFormat(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageFormat & format, unsigned int videoch=0) -> int
        GetFormat(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageFormat & format) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetFormat(self, *args)

    def SetImageProperties(self, *args):
        """
        SetImageProperties(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageProperties & properties, unsigned int videoch=0) -> int
        SetImageProperties(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageProperties & properties) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_SetImageProperties(self, *args)

    def GetImageProperties(self, *args):
        """
        GetImageProperties(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageProperties & properties, unsigned int videoch=0) -> int
        GetImageProperties(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ImageProperties & properties) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetImageProperties(self, *args)

    def SetTrigger(self, *args):
        """
        SetTrigger(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ExternalTrigger & trigger, unsigned int videoch=0) -> int
        SetTrigger(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ExternalTrigger & trigger) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_SetTrigger(self, *args)

    def GetTrigger(self, *args):
        """
        GetTrigger(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ExternalTrigger & trigger, unsigned int videoch=0) -> int
        GetTrigger(svlVidCapSrcBase self, svlFilterSourceVideoCapture::ExternalTrigger & trigger) -> int
        """
        return _cisstStereoVisionPython.svlVidCapSrcBase_GetTrigger(self, *args)

svlVidCapSrcBase_swigregister = _cisstStereoVisionPython.svlVidCapSrcBase_swigregister
svlVidCapSrcBase_swigregister(svlVidCapSrcBase)

def svlVidCapSrcBase_ClassServices():
  """svlVidCapSrcBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlVidCapSrcBase_ClassServices()

class svlVidCapSrcDialogThread(object):
    """Proxy of C++ svlVidCapSrcDialogThread class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(svlVidCapSrcDialogThread self, unsigned int videoch) -> svlVidCapSrcDialogThread"""
        this = _cisstStereoVisionPython.new_svlVidCapSrcDialogThread(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlVidCapSrcDialogThread
    __del__ = lambda self : None;
    def Proc(self, *args):
        """Proc(svlVidCapSrcDialogThread self, svlFilterSourceVideoCapture baseref) -> void *"""
        return _cisstStereoVisionPython.svlVidCapSrcDialogThread_Proc(self, *args)

    def WaitForInit(self):
        """WaitForInit(svlVidCapSrcDialogThread self) -> bool"""
        return _cisstStereoVisionPython.svlVidCapSrcDialogThread_WaitForInit(self)

    def Kill(self):
        """Kill(svlVidCapSrcDialogThread self)"""
        return _cisstStereoVisionPython.svlVidCapSrcDialogThread_Kill(self)

svlVidCapSrcDialogThread_swigregister = _cisstStereoVisionPython.svlVidCapSrcDialogThread_swigregister
svlVidCapSrcDialogThread_swigregister(svlVidCapSrcDialogThread)

class svlFilterOutput(object):
    """Proxy of C++ svlFilterOutput class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstStereoVisionPython.svlFilterOutput_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstStereoVisionPython.svlFilterOutput_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterOutput_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def Services(self):
        """Services(svlFilterOutput self) -> cmnClassServicesBase"""
        return _cisstStereoVisionPython.svlFilterOutput_Services(self)

    def __init__(self, *args): 
        """__init__(svlFilterOutput self, svlFilterBase owner, bool trunk, std::string const & name) -> svlFilterOutput"""
        this = _cisstStereoVisionPython.new_svlFilterOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstStereoVisionPython.delete_svlFilterOutput
    __del__ = lambda self : None;
    def IsTrunk(self):
        """IsTrunk(svlFilterOutput self) -> bool"""
        return _cisstStereoVisionPython.svlFilterOutput_IsTrunk(self)

    def GetType(self):
        """GetType(svlFilterOutput self) -> svlStreamType"""
        return _cisstStereoVisionPython.svlFilterOutput_GetType(self)

    def GetFilter(self):
        """GetFilter(svlFilterOutput self) -> svlFilterBase"""
        return _cisstStereoVisionPython.svlFilterOutput_GetFilter(self)

    def GetConnectedFilter(self):
        """GetConnectedFilter(svlFilterOutput self) -> svlFilterBase"""
        return _cisstStereoVisionPython.svlFilterOutput_GetConnectedFilter(self)

    def SetType(self, *args):
        """SetType(svlFilterOutput self, svlStreamType type) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_SetType(self, *args)

    def IsConnected(self):
        """IsConnected(svlFilterOutput self) -> bool"""
        return _cisstStereoVisionPython.svlFilterOutput_IsConnected(self)

    def GetConnection(self):
        """GetConnection(svlFilterOutput self) -> svlFilterInput *"""
        return _cisstStereoVisionPython.svlFilterOutput_GetConnection(self)

    def GetDroppedSampleCount(self):
        """GetDroppedSampleCount(svlFilterOutput self) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_GetDroppedSampleCount(self)

    def GetBufferUsage(self):
        """GetBufferUsage(svlFilterOutput self) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_GetBufferUsage(self)

    def GetBufferUsageRatio(self):
        """GetBufferUsageRatio(svlFilterOutput self) -> double"""
        return _cisstStereoVisionPython.svlFilterOutput_GetBufferUsageRatio(self)

    def SetThreadCount(self, *args):
        """SetThreadCount(svlFilterOutput self, unsigned int threadcount) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_SetThreadCount(self, *args)

    def SetBufferSize(self, *args):
        """SetBufferSize(svlFilterOutput self, unsigned int buffersize) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_SetBufferSize(self, *args)

    def SetBlock(self, *args):
        """SetBlock(svlFilterOutput self, bool block) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_SetBlock(self, *args)

    def ConnectInternal(self, *args):
        """ConnectInternal(svlFilterOutput self, svlFilterInput * input) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_ConnectInternal(self, *args)

    def Connect(self, *args):
        """Connect(svlFilterOutput self, svlFilterInput * input) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_Connect(self, *args)

    def Disconnect(self):
        """Disconnect(svlFilterOutput self) -> int"""
        return _cisstStereoVisionPython.svlFilterOutput_Disconnect(self)

    def SetupSample(self, *args):
        """SetupSample(svlFilterOutput self, svlSample * sample)"""
        return _cisstStereoVisionPython.svlFilterOutput_SetupSample(self, *args)

    def PushSample(self, *args):
        """PushSample(svlFilterOutput self, svlSample const * sample)"""
        return _cisstStereoVisionPython.svlFilterOutput_PushSample(self, *args)

    def GetTimestamp(self):
        """GetTimestamp(svlFilterOutput self) -> double"""
        return _cisstStereoVisionPython.svlFilterOutput_GetTimestamp(self)

svlFilterOutput_swigregister = _cisstStereoVisionPython.svlFilterOutput_swigregister
svlFilterOutput_swigregister(svlFilterOutput)

def svlFilterOutput_ClassServices():
  """svlFilterOutput_ClassServices() -> cmnClassServicesBase"""
  return _cisstStereoVisionPython.svlFilterOutput_ClassServices()



