# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstMultiTaskPython', [dirname(__file__)])
        except ImportError:
            import _cisstMultiTaskPython
            return _cisstMultiTaskPython
        if fp is not None:
            try:
                _mod = imp.load_module('_cisstMultiTaskPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cisstMultiTaskPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstMultiTaskPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cisstMultiTaskPython.SwigPyIterator_value(self)
    def incr(self, n=1): return _cisstMultiTaskPython.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cisstMultiTaskPython.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cisstMultiTaskPython.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cisstMultiTaskPython.SwigPyIterator_equal(self, *args)
    def copy(self): return _cisstMultiTaskPython.SwigPyIterator_copy(self)
    def next(self): return _cisstMultiTaskPython.SwigPyIterator_next(self)
    def __next__(self): return _cisstMultiTaskPython.SwigPyIterator___next__(self)
    def previous(self): return _cisstMultiTaskPython.SwigPyIterator_previous(self)
    def advance(self, *args): return _cisstMultiTaskPython.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cisstMultiTaskPython.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cisstMultiTaskPython.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cisstMultiTaskPython.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cisstMultiTaskPython.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cisstMultiTaskPython.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cisstMultiTaskPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cisstMultiTaskPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstMultiTaskPython.ios_base_erase_event
    imbue_event = _cisstMultiTaskPython.ios_base_imbue_event
    copyfmt_event = _cisstMultiTaskPython.ios_base_copyfmt_event
    def register_callback(self, *args): return _cisstMultiTaskPython.ios_base_register_callback(self, *args)
    def flags(self, *args): return _cisstMultiTaskPython.ios_base_flags(self, *args)
    def setf(self, *args): return _cisstMultiTaskPython.ios_base_setf(self, *args)
    def unsetf(self, *args): return _cisstMultiTaskPython.ios_base_unsetf(self, *args)
    def precision(self, *args): return _cisstMultiTaskPython.ios_base_precision(self, *args)
    def width(self, *args): return _cisstMultiTaskPython.ios_base_width(self, *args)
    sync_with_stdio = staticmethod(_cisstMultiTaskPython.ios_base_sync_with_stdio)
    def imbue(self, *args): return _cisstMultiTaskPython.ios_base_imbue(self, *args)
    def getloc(self): return _cisstMultiTaskPython.ios_base_getloc(self)
    xalloc = staticmethod(_cisstMultiTaskPython.ios_base_xalloc)
    def iword(self, *args): return _cisstMultiTaskPython.ios_base_iword(self, *args)
    def pword(self, *args): return _cisstMultiTaskPython.ios_base_pword(self, *args)
    __swig_destroy__ = _cisstMultiTaskPython.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _cisstMultiTaskPython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _cisstMultiTaskPython.cvar
ios_base.boolalpha = _cisstMultiTaskPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstMultiTaskPython.cvar.ios_base_dec
ios_base.fixed = _cisstMultiTaskPython.cvar.ios_base_fixed
ios_base.hex = _cisstMultiTaskPython.cvar.ios_base_hex
ios_base.internal = _cisstMultiTaskPython.cvar.ios_base_internal
ios_base.left = _cisstMultiTaskPython.cvar.ios_base_left
ios_base.oct = _cisstMultiTaskPython.cvar.ios_base_oct
ios_base.right = _cisstMultiTaskPython.cvar.ios_base_right
ios_base.scientific = _cisstMultiTaskPython.cvar.ios_base_scientific
ios_base.showbase = _cisstMultiTaskPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstMultiTaskPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstMultiTaskPython.cvar.ios_base_showpos
ios_base.skipws = _cisstMultiTaskPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstMultiTaskPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstMultiTaskPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstMultiTaskPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstMultiTaskPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstMultiTaskPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstMultiTaskPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstMultiTaskPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstMultiTaskPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstMultiTaskPython.cvar.ios_base_goodbit
ios_base.app = _cisstMultiTaskPython.cvar.ios_base_app
ios_base.ate = _cisstMultiTaskPython.cvar.ios_base_ate
ios_base.binary = _cisstMultiTaskPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstMultiTaskPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstMultiTaskPython.cvar.ios_base_out
ios_base.trunc = _cisstMultiTaskPython.cvar.ios_base_trunc
ios_base.beg = _cisstMultiTaskPython.cvar.ios_base_beg
ios_base.cur = _cisstMultiTaskPython.cvar.ios_base_cur
ios_base.end = _cisstMultiTaskPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _cisstMultiTaskPython.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _cisstMultiTaskPython.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _cisstMultiTaskPython.ios_base_xalloc()
ios_base_xalloc = _cisstMultiTaskPython.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def rdstate(self): return _cisstMultiTaskPython.ios_rdstate(self)
    def clear(self, *args): return _cisstMultiTaskPython.ios_clear(self, *args)
    def setstate(self, *args): return _cisstMultiTaskPython.ios_setstate(self, *args)
    def good(self): return _cisstMultiTaskPython.ios_good(self)
    def eof(self): return _cisstMultiTaskPython.ios_eof(self)
    def fail(self): return _cisstMultiTaskPython.ios_fail(self)
    def bad(self): return _cisstMultiTaskPython.ios_bad(self)
    def exceptions(self, *args): return _cisstMultiTaskPython.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _cisstMultiTaskPython.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _cisstMultiTaskPython.ios_tie(self, *args)
    def rdbuf(self, *args): return _cisstMultiTaskPython.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _cisstMultiTaskPython.ios_copyfmt(self, *args)
    def fill(self, *args): return _cisstMultiTaskPython.ios_fill(self, *args)
    def imbue(self, *args): return _cisstMultiTaskPython.ios_imbue(self, *args)
    def narrow(self, *args): return _cisstMultiTaskPython.ios_narrow(self, *args)
    def widen(self, *args): return _cisstMultiTaskPython.ios_widen(self, *args)
ios_swigregister = _cisstMultiTaskPython.ios_swigregister
ios_swigregister(ios)

class streambuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_streambuf
    __del__ = lambda self : None;
    def pubimbue(self, *args): return _cisstMultiTaskPython.streambuf_pubimbue(self, *args)
    def getloc(self): return _cisstMultiTaskPython.streambuf_getloc(self)
    def pubsetbuf(self, *args): return _cisstMultiTaskPython.streambuf_pubsetbuf(self, *args)
    def pubseekoff(self, *args): return _cisstMultiTaskPython.streambuf_pubseekoff(self, *args)
    def pubseekpos(self, *args): return _cisstMultiTaskPython.streambuf_pubseekpos(self, *args)
    def pubsync(self): return _cisstMultiTaskPython.streambuf_pubsync(self)
    def in_avail(self): return _cisstMultiTaskPython.streambuf_in_avail(self)
    def snextc(self): return _cisstMultiTaskPython.streambuf_snextc(self)
    def sbumpc(self): return _cisstMultiTaskPython.streambuf_sbumpc(self)
    def sgetc(self): return _cisstMultiTaskPython.streambuf_sgetc(self)
    def sgetn(self, *args): return _cisstMultiTaskPython.streambuf_sgetn(self, *args)
    def sputbackc(self, *args): return _cisstMultiTaskPython.streambuf_sputbackc(self, *args)
    def sungetc(self): return _cisstMultiTaskPython.streambuf_sungetc(self)
    def sputc(self, *args): return _cisstMultiTaskPython.streambuf_sputc(self, *args)
    def sputn(self, *args): return _cisstMultiTaskPython.streambuf_sputn(self, *args)
streambuf_swigregister = _cisstMultiTaskPython.streambuf_swigregister
streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstMultiTaskPython.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _cisstMultiTaskPython.ostream___lshift__(self, *args)
    def put(self, *args): return _cisstMultiTaskPython.ostream_put(self, *args)
    def write(self, *args): return _cisstMultiTaskPython.ostream_write(self, *args)
    def flush(self): return _cisstMultiTaskPython.ostream_flush(self)
    def tellp(self): return _cisstMultiTaskPython.ostream_tellp(self)
    def seekp(self, *args): return _cisstMultiTaskPython.ostream_seekp(self, *args)
ostream_swigregister = _cisstMultiTaskPython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstMultiTaskPython.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _cisstMultiTaskPython.istream___rshift__(self, *args)
    def gcount(self): return _cisstMultiTaskPython.istream_gcount(self)
    def get(self, *args): return _cisstMultiTaskPython.istream_get(self, *args)
    def getline(self, *args): return _cisstMultiTaskPython.istream_getline(self, *args)
    def ignore(self, *args): return _cisstMultiTaskPython.istream_ignore(self, *args)
    def peek(self): return _cisstMultiTaskPython.istream_peek(self)
    def read(self, *args): return _cisstMultiTaskPython.istream_read(self, *args)
    def readsome(self, *args): return _cisstMultiTaskPython.istream_readsome(self, *args)
    def putback(self, *args): return _cisstMultiTaskPython.istream_putback(self, *args)
    def unget(self): return _cisstMultiTaskPython.istream_unget(self)
    def sync(self): return _cisstMultiTaskPython.istream_sync(self)
    def tellg(self): return _cisstMultiTaskPython.istream_tellg(self)
    def seekg(self, *args): return _cisstMultiTaskPython.istream_seekg(self, *args)
istream_swigregister = _cisstMultiTaskPython.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstMultiTaskPython.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _cisstMultiTaskPython.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _cisstMultiTaskPython.endl_cb_ptr

def endl(*args):
  return _cisstMultiTaskPython.endl(*args)
endl = _cisstMultiTaskPython.endl
ends_cb_ptr = _cisstMultiTaskPython.ends_cb_ptr

def ends(*args):
  return _cisstMultiTaskPython.ends(*args)
ends = _cisstMultiTaskPython.ends
flush_cb_ptr = _cisstMultiTaskPython.flush_cb_ptr

def flush(*args):
  return _cisstMultiTaskPython.flush(*args)
flush = _cisstMultiTaskPython.flush
import cisstCommonPython
import cisstVectorPython
import cisstOSAbstractionPython
import time

class mtsStringVector(object):
    """Proxy of C++ std::vector<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsStringVector self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsStringVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsStringVector self) -> bool"""
        return _cisstMultiTaskPython.mtsStringVector___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsStringVector self) -> bool"""
        return _cisstMultiTaskPython.mtsStringVector___bool__(self)

    def __len__(self):
        """__len__(mtsStringVector self) -> std::vector< std::string >::size_type"""
        return _cisstMultiTaskPython.mtsStringVector___len__(self)

    def pop(self):
        """pop(mtsStringVector self) -> std::vector< std::string >::value_type"""
        return _cisstMultiTaskPython.mtsStringVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsStringVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            mtsStringVector v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsStringVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _cisstMultiTaskPython.mtsStringVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsStringVector self, std::vector< std::string >::difference_type i)
        __delitem__(mtsStringVector self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsStringVector self, PySliceObject * slice) -> mtsStringVector
        __getitem__(mtsStringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsStringVector self, PySliceObject * slice, mtsStringVector v)
        __setitem__(mtsStringVector self, PySliceObject * slice)
        __setitem__(mtsStringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsStringVector___setitem__(self, *args)

    def append(self, *args):
        """append(mtsStringVector self, std::vector< std::string >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsStringVector_append(self, *args)

    def empty(self):
        """empty(mtsStringVector self) -> bool"""
        return _cisstMultiTaskPython.mtsStringVector_empty(self)

    def size(self):
        """size(mtsStringVector self) -> std::vector< std::string >::size_type"""
        return _cisstMultiTaskPython.mtsStringVector_size(self)

    def clear(self):
        """clear(mtsStringVector self)"""
        return _cisstMultiTaskPython.mtsStringVector_clear(self)

    def swap(self, *args):
        """swap(mtsStringVector self, mtsStringVector v)"""
        return _cisstMultiTaskPython.mtsStringVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsStringVector self) -> std::vector< std::string >::allocator_type"""
        return _cisstMultiTaskPython.mtsStringVector_get_allocator(self)

    def begin(self):
        """begin(mtsStringVector self) -> std::vector< std::string >::iterator"""
        return _cisstMultiTaskPython.mtsStringVector_begin(self)

    def end(self):
        """end(mtsStringVector self) -> std::vector< std::string >::iterator"""
        return _cisstMultiTaskPython.mtsStringVector_end(self)

    def rbegin(self):
        """rbegin(mtsStringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsStringVector_rbegin(self)

    def rend(self):
        """rend(mtsStringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsStringVector_rend(self)

    def pop_back(self):
        """pop_back(mtsStringVector self)"""
        return _cisstMultiTaskPython.mtsStringVector_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsStringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(mtsStringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _cisstMultiTaskPython.mtsStringVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> mtsStringVector
        __init__(std::vector<(std::string)> self, mtsStringVector arg2) -> mtsStringVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> mtsStringVector
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> mtsStringVector
        """
        this = _cisstMultiTaskPython.new_mtsStringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsStringVector self, std::vector< std::string >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsStringVector_push_back(self, *args)

    def front(self):
        """front(mtsStringVector self) -> std::vector< std::string >::value_type const &"""
        return _cisstMultiTaskPython.mtsStringVector_front(self)

    def back(self):
        """back(mtsStringVector self) -> std::vector< std::string >::value_type const &"""
        return _cisstMultiTaskPython.mtsStringVector_back(self)

    def assign(self, *args):
        """assign(mtsStringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsStringVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsStringVector self, std::vector< std::string >::size_type new_size)
        resize(mtsStringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsStringVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsStringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(mtsStringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsStringVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsStringVector self, std::vector< std::string >::size_type n)"""
        return _cisstMultiTaskPython.mtsStringVector_reserve(self, *args)

    def capacity(self):
        """capacity(mtsStringVector self) -> std::vector< std::string >::size_type"""
        return _cisstMultiTaskPython.mtsStringVector_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStringVector
    __del__ = lambda self : None;
mtsStringVector_swigregister = _cisstMultiTaskPython.mtsStringVector_swigregister
mtsStringVector_swigregister(mtsStringVector)

class mtsDoubleVector(object):
    """Proxy of C++ std::vector<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsDoubleVector self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsDoubleVector self) -> bool"""
        return _cisstMultiTaskPython.mtsDoubleVector___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsDoubleVector self) -> bool"""
        return _cisstMultiTaskPython.mtsDoubleVector___bool__(self)

    def __len__(self):
        """__len__(mtsDoubleVector self) -> std::vector< double >::size_type"""
        return _cisstMultiTaskPython.mtsDoubleVector___len__(self)

    def pop(self):
        """pop(mtsDoubleVector self) -> std::vector< double >::value_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> mtsDoubleVector"""
        return _cisstMultiTaskPython.mtsDoubleVector___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            mtsDoubleVector v=std::vector< double,std::allocator< double > >())
        __setslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsDoubleVector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _cisstMultiTaskPython.mtsDoubleVector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsDoubleVector self, std::vector< double >::difference_type i)
        __delitem__(mtsDoubleVector self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsDoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsDoubleVector self, PySliceObject * slice) -> mtsDoubleVector
        __getitem__(mtsDoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _cisstMultiTaskPython.mtsDoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsDoubleVector self, PySliceObject * slice, mtsDoubleVector v)
        __setitem__(mtsDoubleVector self, PySliceObject * slice)
        __setitem__(mtsDoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsDoubleVector___setitem__(self, *args)

    def append(self, *args):
        """append(mtsDoubleVector self, std::vector< double >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsDoubleVector_append(self, *args)

    def empty(self):
        """empty(mtsDoubleVector self) -> bool"""
        return _cisstMultiTaskPython.mtsDoubleVector_empty(self)

    def size(self):
        """size(mtsDoubleVector self) -> std::vector< double >::size_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_size(self)

    def clear(self):
        """clear(mtsDoubleVector self)"""
        return _cisstMultiTaskPython.mtsDoubleVector_clear(self)

    def swap(self, *args):
        """swap(mtsDoubleVector self, mtsDoubleVector v)"""
        return _cisstMultiTaskPython.mtsDoubleVector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsDoubleVector self) -> std::vector< double >::allocator_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_get_allocator(self)

    def begin(self):
        """begin(mtsDoubleVector self) -> std::vector< double >::iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_begin(self)

    def end(self):
        """end(mtsDoubleVector self) -> std::vector< double >::iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_end(self)

    def rbegin(self):
        """rbegin(mtsDoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_rbegin(self)

    def rend(self):
        """rend(mtsDoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDoubleVector_rend(self)

    def pop_back(self):
        """pop_back(mtsDoubleVector self)"""
        return _cisstMultiTaskPython.mtsDoubleVector_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsDoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(mtsDoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _cisstMultiTaskPython.mtsDoubleVector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> mtsDoubleVector
        __init__(std::vector<(double)> self, mtsDoubleVector arg2) -> mtsDoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> mtsDoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> mtsDoubleVector
        """
        this = _cisstMultiTaskPython.new_mtsDoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsDoubleVector self, std::vector< double >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsDoubleVector_push_back(self, *args)

    def front(self):
        """front(mtsDoubleVector self) -> std::vector< double >::value_type const &"""
        return _cisstMultiTaskPython.mtsDoubleVector_front(self)

    def back(self):
        """back(mtsDoubleVector self) -> std::vector< double >::value_type const &"""
        return _cisstMultiTaskPython.mtsDoubleVector_back(self)

    def assign(self, *args):
        """assign(mtsDoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _cisstMultiTaskPython.mtsDoubleVector_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsDoubleVector self, std::vector< double >::size_type new_size)
        resize(mtsDoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsDoubleVector_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsDoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(mtsDoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _cisstMultiTaskPython.mtsDoubleVector_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsDoubleVector self, std::vector< double >::size_type n)"""
        return _cisstMultiTaskPython.mtsDoubleVector_reserve(self, *args)

    def capacity(self):
        """capacity(mtsDoubleVector self) -> std::vector< double >::size_type"""
        return _cisstMultiTaskPython.mtsDoubleVector_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleVector
    __del__ = lambda self : None;
mtsDoubleVector_swigregister = _cisstMultiTaskPython.mtsDoubleVector_swigregister
mtsDoubleVector_swigregister(mtsDoubleVector)

MTS_COMPONENT_POLICY = _cisstMultiTaskPython.MTS_COMPONENT_POLICY
MTS_COMMANDS_SHOULD_NOT_BE_QUEUED = _cisstMultiTaskPython.MTS_COMMANDS_SHOULD_NOT_BE_QUEUED
MTS_COMMANDS_SHOULD_BE_QUEUED = _cisstMultiTaskPython.MTS_COMMANDS_SHOULD_BE_QUEUED
MTS_INTERFACE_COMMAND_POLICY = _cisstMultiTaskPython.MTS_INTERFACE_COMMAND_POLICY
MTS_COMMAND_QUEUED = _cisstMultiTaskPython.MTS_COMMAND_QUEUED
MTS_COMMAND_NOT_QUEUED = _cisstMultiTaskPython.MTS_COMMAND_NOT_QUEUED
MTS_INTERFACE_EVENT_POLICY = _cisstMultiTaskPython.MTS_INTERFACE_EVENT_POLICY
MTS_EVENT_QUEUED = _cisstMultiTaskPython.MTS_EVENT_QUEUED
MTS_EVENT_NOT_QUEUED = _cisstMultiTaskPython.MTS_EVENT_NOT_QUEUED
MTS_OPTIONAL = _cisstMultiTaskPython.MTS_OPTIONAL
MTS_REQUIRED = _cisstMultiTaskPython.MTS_REQUIRED
MTS_BLOCKING = _cisstMultiTaskPython.MTS_BLOCKING
MTS_NOT_BLOCKING = _cisstMultiTaskPython.MTS_NOT_BLOCKING
class mtsExecutionResult(object):
    """Proxy of C++ mtsExecutionResult class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsExecutionResult
    __del__ = lambda self : None;
    UNDEFINED = _cisstMultiTaskPython.mtsExecutionResult_UNDEFINED
    COMMAND_SUCCEEDED = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_SUCCEEDED
    COMMAND_QUEUED = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_QUEUED
    FUNCTION_NOT_BOUND = _cisstMultiTaskPython.mtsExecutionResult_FUNCTION_NOT_BOUND
    COMMAND_HAS_NO_MAILBOX = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_HAS_NO_MAILBOX
    COMMAND_DISABLED = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_DISABLED
    INTERFACE_COMMAND_MAILBOX_FULL = _cisstMultiTaskPython.mtsExecutionResult_INTERFACE_COMMAND_MAILBOX_FULL
    COMMAND_ARGUMENT_QUEUE_FULL = _cisstMultiTaskPython.mtsExecutionResult_COMMAND_ARGUMENT_QUEUE_FULL
    INVALID_INPUT_TYPE = _cisstMultiTaskPython.mtsExecutionResult_INVALID_INPUT_TYPE
    METHOD_OR_FUNCTION_FAILED = _cisstMultiTaskPython.mtsExecutionResult_METHOD_OR_FUNCTION_FAILED
    NETWORK_ERROR = _cisstMultiTaskPython.mtsExecutionResult_NETWORK_ERROR
    INVALID_COMMAND_ID = _cisstMultiTaskPython.mtsExecutionResult_INVALID_COMMAND_ID
    ARGUMENT_DYNAMIC_CREATION_FAILED = _cisstMultiTaskPython.mtsExecutionResult_ARGUMENT_DYNAMIC_CREATION_FAILED
    SERIALIZATION_ERROR = _cisstMultiTaskPython.mtsExecutionResult_SERIALIZATION_ERROR
    DESERIALIZATION_ERROR = _cisstMultiTaskPython.mtsExecutionResult_DESERIALIZATION_ERROR
    NO_FINISHED_EVENT = _cisstMultiTaskPython.mtsExecutionResult_NO_FINISHED_EVENT
    def EnumToString(*args):
        """EnumToString(mtsExecutionResult::Enum const & value) -> std::string"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumToString(*args)

    EnumToString = staticmethod(EnumToString)
    def EnumFromString(*args):
        """EnumFromString(std::string const & value) -> mtsExecutionResult::Enum"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumFromString(*args)

    EnumFromString = staticmethod(EnumFromString)
    def EnumVectorInt():
        """EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorInt()

    EnumVectorInt = staticmethod(EnumVectorInt)
    def EnumVectorString():
        """EnumVectorString() -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorString()

    EnumVectorString = staticmethod(EnumVectorString)
    def GetValue(self, *args):
        """GetValue(mtsExecutionResult self, mtsExecutionResult::Enum & placeHolder)"""
        return _cisstMultiTaskPython.mtsExecutionResult_GetValue(self, *args)

    def SetValue(self, *args):
        """SetValue(mtsExecutionResult self, mtsExecutionResult::Enum const & newValue)"""
        return _cisstMultiTaskPython.mtsExecutionResult_SetValue(self, *args)

    def Value(self, *args):
        """
        Value(mtsExecutionResult self) -> mtsExecutionResult::Enum const
        Value(mtsExecutionResult self) -> mtsExecutionResult::Enum &
        """
        return _cisstMultiTaskPython.mtsExecutionResult_Value(self, *args)

    def __eq__(self, *args):
        """__eq__(mtsExecutionResult self, mtsExecutionResult state) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(mtsExecutionResult self, mtsExecutionResult state) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult___ne__(self, *args)

    def GetResult(self):
        """GetResult(mtsExecutionResult self) -> mtsExecutionResult::Enum"""
        return _cisstMultiTaskPython.mtsExecutionResult_GetResult(self)

    def IsOK(self):
        """IsOK(mtsExecutionResult self) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult_IsOK(self)

    def __nonzero__(self):
        return _cisstMultiTaskPython.mtsExecutionResult___nonzero__(self)
    __bool__ = __nonzero__


    def __init__(self, *args): 
        """
        __init__(mtsExecutionResult self) -> mtsExecutionResult
        __init__(mtsExecutionResult self, mtsExecutionResult other) -> mtsExecutionResult
        __init__(mtsExecutionResult self, mtsExecutionResult::Enum const & newValue) -> mtsExecutionResult
        """
        this = _cisstMultiTaskPython.new_mtsExecutionResult(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsExecutionResult self, mtsExecutionResult source)"""
        return _cisstMultiTaskPython.mtsExecutionResult_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsExecutionResult self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsExecutionResult self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsExecutionResult_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsExecutionResult self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsExecutionResult self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsExecutionResult self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsExecutionResult self, char const delimiter=',') -> std::string
        SerializeDescription(mtsExecutionResult self) -> std::string
        """
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsExecutionResult self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsExecutionResult self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsExecutionResult_DeSerializeText(self, *args)

    def __str__(self, *args):
        """
        __str__(mtsExecutionResult self, mtsExecutionResult::Enum const & value) -> std::string const
        __str__(mtsExecutionResult self) -> std::string
        """
        return _cisstMultiTaskPython.mtsExecutionResult___str__(self, *args)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsExecutionResult self) -> bool"""
        return _cisstMultiTaskPython.mtsExecutionResult_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsExecutionResult self) -> size_t"""
        return _cisstMultiTaskPython.mtsExecutionResult_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsExecutionResult self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsExecutionResult_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsExecutionResult self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsExecutionResult self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsExecutionResult_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsExecutionResult self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsExecutionResult_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsExecutionResult self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsExecutionResult_DeSerializeTextJSON(self, *args)

mtsExecutionResult_swigregister = _cisstMultiTaskPython.mtsExecutionResult_swigregister
mtsExecutionResult_swigregister(mtsExecutionResult)
InvalidConnectionID = cvar.InvalidConnectionID

def mtsExecutionResult_EnumToString(*args):
  """mtsExecutionResult_EnumToString(mtsExecutionResult::Enum const & value) -> std::string"""
  return _cisstMultiTaskPython.mtsExecutionResult_EnumToString(*args)

def mtsExecutionResult_EnumFromString(*args):
  """mtsExecutionResult_EnumFromString(std::string const & value) -> mtsExecutionResult::Enum"""
  return _cisstMultiTaskPython.mtsExecutionResult_EnumFromString(*args)

def mtsExecutionResult_EnumVectorInt():
  """mtsExecutionResult_EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
  return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorInt()

def mtsExecutionResult_EnumVectorString():
  """mtsExecutionResult_EnumVectorString() -> mtsStringVector"""
  return _cisstMultiTaskPython.mtsExecutionResult_EnumVectorString()


def cmnDataHumanReadable_mtsExecutionResult_Enum(*args):
  """cmnDataHumanReadable_mtsExecutionResult_Enum(mtsExecutionResult::Enum const & data) -> std::string"""
  return _cisstMultiTaskPython.cmnDataHumanReadable_mtsExecutionResult_Enum(*args)
class mtsGenericObject(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ mtsGenericObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetTimestamp(self, *args):
        """SetTimestamp(mtsGenericObject self, double const & newValue)"""
        return _cisstMultiTaskPython.mtsGenericObject_SetTimestamp(self, *args)

    def Timestamp(self, *args):
        """
        Timestamp(mtsGenericObject self) -> double const
        Timestamp(mtsGenericObject self) -> double &
        """
        return _cisstMultiTaskPython.mtsGenericObject_Timestamp(self, *args)

    def GetTimestamp(self, *args):
        """
        GetTimestamp(mtsGenericObject self, double & placeHolder)
        GetTimestamp(mtsGenericObject self) -> double const &
        """
        return _cisstMultiTaskPython.mtsGenericObject_GetTimestamp(self, *args)

    def SetAutomaticTimestamp(self, *args):
        """SetAutomaticTimestamp(mtsGenericObject self, bool const & newValue)"""
        return _cisstMultiTaskPython.mtsGenericObject_SetAutomaticTimestamp(self, *args)

    def AutomaticTimestamp(self, *args):
        """
        AutomaticTimestamp(mtsGenericObject self) -> bool const
        AutomaticTimestamp(mtsGenericObject self) -> bool &
        """
        return _cisstMultiTaskPython.mtsGenericObject_AutomaticTimestamp(self, *args)

    def GetAutomaticTimestamp(self, *args):
        """
        GetAutomaticTimestamp(mtsGenericObject self, bool & placeHolder)
        GetAutomaticTimestamp(mtsGenericObject self) -> bool const &
        """
        return _cisstMultiTaskPython.mtsGenericObject_GetAutomaticTimestamp(self, *args)

    def SetValid(self, *args):
        """SetValid(mtsGenericObject self, bool const & newValue)"""
        return _cisstMultiTaskPython.mtsGenericObject_SetValid(self, *args)

    def Valid(self, *args):
        """
        Valid(mtsGenericObject self) -> bool const
        Valid(mtsGenericObject self) -> bool &
        """
        return _cisstMultiTaskPython.mtsGenericObject_Valid(self, *args)

    def GetValid(self, *args):
        """
        GetValid(mtsGenericObject self, bool & placeHolder)
        GetValid(mtsGenericObject self) -> bool const &
        """
        return _cisstMultiTaskPython.mtsGenericObject_GetValid(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsGenericObject
    __del__ = lambda self : None;
    def SetTimestampIfAutomatic(self, *args):
        """SetTimestampIfAutomatic(mtsGenericObject self, double timestamp) -> bool"""
        return _cisstMultiTaskPython.mtsGenericObject_SetTimestampIfAutomatic(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsGenericObject self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsGenericObject self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsGenericObject_ScalarDescription(self, *args)

mtsGenericObject_swigregister = _cisstMultiTaskPython.mtsGenericObject_swigregister
mtsGenericObject_swigregister(mtsGenericObject)

class mtsCommandBase(object):
    """Proxy of C++ mtsCommandBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandBase
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsCommandBase self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandBase___str__(self)

    def NumberOfArguments(self):
        """NumberOfArguments(mtsCommandBase self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandBase_NumberOfArguments(self)

    def Returns(self):
        """Returns(mtsCommandBase self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandBase_Returns(self)

    def Enable(self):
        """Enable(mtsCommandBase self)"""
        return _cisstMultiTaskPython.mtsCommandBase_Enable(self)

    def Disable(self):
        """Disable(mtsCommandBase self)"""
        return _cisstMultiTaskPython.mtsCommandBase_Disable(self)

    def IsEnabled(self):
        """IsEnabled(mtsCommandBase self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandBase_IsEnabled(self)

    def IsDisabled(self):
        """IsDisabled(mtsCommandBase self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandBase_IsDisabled(self)

    def GetName(self):
        """GetName(mtsCommandBase self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsCommandBase_GetName(self)

mtsCommandBase_swigregister = _cisstMultiTaskPython.mtsCommandBase_swigregister
mtsCommandBase_swigregister(mtsCommandBase)

class mtsCommandVoid(mtsCommandBase):
    """Proxy of C++ mtsCommandVoid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsCommandVoid self) -> mtsCommandVoid
        __init__(mtsCommandVoid self, mtsCallableVoidBase * callable, std::string const & name) -> mtsCommandVoid
        """
        this = _cisstMultiTaskPython.new_mtsCommandVoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoid
    __del__ = lambda self : None;
    def Execute(self, *args):
        """
        Execute(mtsCommandVoid self, mtsBlockingType MARKED_AS_UNUSEDblocking) -> mtsExecutionResult
        Execute(mtsCommandVoid self, mtsBlockingType blocking, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandVoid_Execute(self, *args)

    def GetCallable(self):
        """GetCallable(mtsCommandVoid self) -> mtsCallableVoidBase *"""
        return _cisstMultiTaskPython.mtsCommandVoid_GetCallable(self)

    def __call__(self):
        return self.Execute(MTS_NOT_BLOCKING).GetResult()

mtsCommandVoid_swigregister = _cisstMultiTaskPython.mtsCommandVoid_swigregister
mtsCommandVoid_swigregister(mtsCommandVoid)

class mtsCommandVoidReturn(mtsCommandBase):
    """Proxy of C++ mtsCommandVoidReturn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsCommandVoidReturn self) -> mtsCommandVoidReturn
        __init__(mtsCommandVoidReturn self, std::string const & name) -> mtsCommandVoidReturn
        __init__(mtsCommandVoidReturn self, mtsCallableVoidReturnBase * callable, std::string const & name, mtsGenericObject resultPrototype) -> mtsCommandVoidReturn
        """
        this = _cisstMultiTaskPython.new_mtsCommandVoidReturn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoidReturn
    __del__ = lambda self : None;
    def Execute(self, *args):
        """
        Execute(mtsCommandVoidReturn self, mtsGenericObject result) -> mtsExecutionResult
        Execute(mtsCommandVoidReturn self, mtsGenericObject result, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandVoidReturn_Execute(self, *args)

    def GetCallable(self):
        """GetCallable(mtsCommandVoidReturn self) -> mtsCallableVoidReturnBase *"""
        return _cisstMultiTaskPython.mtsCommandVoidReturn_GetCallable(self)

    def GetResultPrototype(self):
        """GetResultPrototype(mtsCommandVoidReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandVoidReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmpObject = self.GetResultPrototype().Services().Create()
            self.ArgumentType = tmpObject.__class__
        except Exception, e:
            print 'VoidReturn command ', self.GetName(), ': ', e


    def __call__(self):
        # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetResultPrototype())
        except Exception:
            argument = self.GetResultPrototype()
        # Probably should check return value below
        self.Execute(argument)
        # If argument has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument

mtsCommandVoidReturn_swigregister = _cisstMultiTaskPython.mtsCommandVoidReturn_swigregister
mtsCommandVoidReturn_swigregister(mtsCommandVoidReturn)

class mtsCommandRead(mtsCommandBase):
    """Proxy of C++ mtsCommandRead class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsCommandRead self) -> mtsCommandRead
        __init__(mtsCommandRead self, std::string const & name) -> mtsCommandRead
        __init__(mtsCommandRead self, mtsCallableReadBase * callable, std::string const & name, mtsGenericObject argumentPrototype) -> mtsCommandRead
        """
        this = _cisstMultiTaskPython.new_mtsCommandRead(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandRead
    __del__ = lambda self : None;
    def Execute(self, *args):
        """
        Execute(mtsCommandRead self, mtsGenericObject argument) -> mtsExecutionResult
        Execute(mtsCommandRead self, mtsGenericObject argument, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandRead_Execute(self, *args)

    def GetCallable(self):
        """GetCallable(mtsCommandRead self) -> mtsCallableReadBase *"""
        return _cisstMultiTaskPython.mtsCommandRead_GetCallable(self)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsCommandRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandRead_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        """GetResultPrototype(mtsCommandRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandRead_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmpObject = self.GetArgumentPrototype().Services().Create()
            self.ArgumentType = tmpObject.__class__
        except Exception, e:
            print 'Read command ', self.GetName(), ': ', e
        except AttributeError, e:
            print 'Read command ', self.GetName(), ': ', e


    def __call__(self):
        # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetArgumentPrototype())
        except Exception:
            argument = self.GetArgumentPrototype()
        # Probably should check return value below
        self.Execute(argument)
        # If argument has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument

mtsCommandRead_swigregister = _cisstMultiTaskPython.mtsCommandRead_swigregister
mtsCommandRead_swigregister(mtsCommandRead)

class mtsCommandWriteBase(mtsCommandBase):
    """Proxy of C++ mtsCommandWriteBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteBase
    __del__ = lambda self : None;
    def Execute(self, *args):
        """
        Execute(mtsCommandWriteBase self, mtsGenericObject argument, mtsBlockingType blocking) -> mtsExecutionResult
        Execute(mtsCommandWriteBase self, mtsGenericObject argument, mtsBlockingType blocking, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandWriteBase_Execute(self, *args)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsCommandWriteBase self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandWriteBase_GetArgumentPrototype(self)

    def GetArgumentClassServices(self):
        """GetArgumentClassServices(mtsCommandWriteBase self) -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsCommandWriteBase_GetArgumentClassServices(self)

    def UpdateFromC(self):
        try:
            tmpObject = self.GetArgumentClassServices().Create()
            self.ArgumentType = tmpObject.__class__
        except Exception, e:
            print 'Write command ', self.GetName(), ': ', e

    def __call__(self, argument):
        if isinstance(argument, self.ArgumentType):
            return self.Execute(argument, MTS_NOT_BLOCKING).GetResult()
        else:
            realArgument = self.ArgumentType(argument)
            return self.Execute(realArgument, MTS_NOT_BLOCKING).GetResult()

mtsCommandWriteBase_swigregister = _cisstMultiTaskPython.mtsCommandWriteBase_swigregister
mtsCommandWriteBase_swigregister(mtsCommandWriteBase)

class mtsCommandWriteReturn(mtsCommandBase):
    """Proxy of C++ mtsCommandWriteReturn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsCommandWriteReturn self) -> mtsCommandWriteReturn
        __init__(mtsCommandWriteReturn self, std::string const & name) -> mtsCommandWriteReturn
        __init__(mtsCommandWriteReturn self, mtsCallableWriteReturnBase * callable, std::string const & name, mtsGenericObject argumentPrototype, 
            mtsGenericObject resultPrototype) -> mtsCommandWriteReturn
        """
        this = _cisstMultiTaskPython.new_mtsCommandWriteReturn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteReturn
    __del__ = lambda self : None;
    def Execute(self, *args):
        """
        Execute(mtsCommandWriteReturn self, mtsGenericObject argument, mtsGenericObject result) -> mtsExecutionResult
        Execute(mtsCommandWriteReturn self, mtsGenericObject argument, mtsGenericObject result, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandWriteReturn_Execute(self, *args)

    def GetCallable(self):
        """GetCallable(mtsCommandWriteReturn self) -> mtsCallableWriteReturnBase *"""
        return _cisstMultiTaskPython.mtsCommandWriteReturn_GetCallable(self)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsCommandWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandWriteReturn_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        """GetResultPrototype(mtsCommandWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandWriteReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmp1Object = self.GetArgumentPrototype().Services().Create()
            self.ArgumentType = tmp1Object.__class__
            tmp2Object = self.GetResultPrototype().Services().Create()
            self.ResultType = tmp2Object.__class__
        except Exception, e:
            print 'WriteReturn command ', self.GetName(), ': ', e

    def __call__(self, argument):
        result = self.ResultType(self.GetResultPrototype())
        # Probably should check return value of self.Execute
        if isinstance(argument, self.ArgumentType):
            self.Execute(argument, result)
        else:
            realArgument = self.ArgumentType(argument1)
            self.Execute(realArgument, result)
        # If result has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(result,"GetDataCopy"):
            return result.GetDataCopy()
        else:
            return result

mtsCommandWriteReturn_swigregister = _cisstMultiTaskPython.mtsCommandWriteReturn_swigregister
mtsCommandWriteReturn_swigregister(mtsCommandWriteReturn)

class mtsCommandQualifiedRead(mtsCommandBase):
    """Proxy of C++ mtsCommandQualifiedRead class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsCommandQualifiedRead self) -> mtsCommandQualifiedRead
        __init__(mtsCommandQualifiedRead self, std::string const & name) -> mtsCommandQualifiedRead
        __init__(mtsCommandQualifiedRead self, mtsCallableQualifiedReadBase * callable, std::string const & name, mtsGenericObject argument1Prototype, 
            mtsGenericObject argument2Prototype) -> mtsCommandQualifiedRead
        """
        this = _cisstMultiTaskPython.new_mtsCommandQualifiedRead(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandQualifiedRead
    __del__ = lambda self : None;
    def Execute(self, *args):
        """
        Execute(mtsCommandQualifiedRead self, mtsGenericObject argument1, mtsGenericObject argument2) -> mtsExecutionResult
        Execute(mtsCommandQualifiedRead self, mtsGenericObject argument1, mtsGenericObject argument2, mtsCommandWriteBase MARKED_AS_UNUSEDfinishedEventHandler) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_Execute(self, *args)

    def GetCallable(self):
        """GetCallable(mtsCommandQualifiedRead self) -> mtsCallableQualifiedReadBase *"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetCallable(self)

    def GetArgument1Prototype(self):
        """GetArgument1Prototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetArgument1Prototype(self)

    def GetArgument2Prototype(self):
        """GetArgument2Prototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetArgument2Prototype(self)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        """GetResultPrototype(mtsCommandQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsCommandQualifiedRead_GetResultPrototype(self)

    def UpdateFromC(self):
        try:
            tmp1Object = self.GetArgument1Prototype().Services().Create()
            self.Argument1Type = tmp1Object.__class__
            tmp2Object = self.GetArgument2Prototype().Services().Create()
            self.Argument2Type = tmp2Object.__class__
        except Exception, e:
            print 'Qualified read command ', self.GetName(), ': ', e

    def __call__(self, argument1):
        argument2 = self.Argument2Type(self.GetArgument2Prototype())
        # Probably should check return value of self.Execute
        if isinstance(argument1, self.Argument1Type):
            self.Execute(argument1, argument2)
        else:
            realArgument1 = self.Argument1Type(argument1)
            self.Execute(realArgument1, argument2)
        # If argument2 has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument2,"GetDataCopy"):
            return argument2.GetDataCopy()
        else:
            return argument2

mtsCommandQualifiedRead_swigregister = _cisstMultiTaskPython.mtsCommandQualifiedRead_swigregister
mtsCommandQualifiedRead_swigregister(mtsCommandQualifiedRead)

class mtsEventReceiverBase(object):
    """Proxy of C++ mtsEventReceiverBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventReceiverBase
    __del__ = lambda self : None;
    def SetName(self, *args):
        """SetName(mtsEventReceiverBase self, std::string const & name)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_SetName(self, *args)

    def GetName(self):
        """GetName(mtsEventReceiverBase self) -> std::string"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_GetName(self)

    def SetRequired(self, *args):
        """SetRequired(mtsEventReceiverBase self, std::string const & name, mtsInterfaceRequired req)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_SetRequired(self, *args)

    def SetThreadSignal(self, *args):
        """SetThreadSignal(mtsEventReceiverBase self, osaThreadSignal * signal)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_SetThreadSignal(self, *args)

    def Wait(self):
        """Wait(mtsEventReceiverBase self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_Wait(self)

    def WaitWithTimeout(self, *args):
        """WaitWithTimeout(mtsEventReceiverBase self, double timeoutInSec) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_WaitWithTimeout(self, *args)

    def Detach(self):
        """Detach(mtsEventReceiverBase self)"""
        return _cisstMultiTaskPython.mtsEventReceiverBase_Detach(self)

mtsEventReceiverBase_swigregister = _cisstMultiTaskPython.mtsEventReceiverBase_swigregister
mtsEventReceiverBase_swigregister(mtsEventReceiverBase)

class mtsEventReceiverVoid(mtsEventReceiverBase):
    """Proxy of C++ mtsEventReceiverVoid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(mtsEventReceiverVoid self) -> mtsEventReceiverVoid"""
        this = _cisstMultiTaskPython.new_mtsEventReceiverVoid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventReceiverVoid
    __del__ = lambda self : None;
    def GetCommand(self):
        """GetCommand(mtsEventReceiverVoid self) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_GetCommand(self)

    def SetHandlerCommand(self, *args):
        """SetHandlerCommand(mtsEventReceiverVoid self, mtsCommandVoid commandHandler)"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_SetHandlerCommand(self, *args)

    def SetHandler(self, *args):
        """
        SetHandler(mtsEventReceiverVoid self, void (*)(void) function, mtsEventQueueingPolicy queueingPolicy=MTS_INTERFACE_EVENT_POLICY) -> mtsCommandVoid
        SetHandler(mtsEventReceiverVoid self, void (*)(void) function) -> mtsCommandVoid
        """
        return _cisstMultiTaskPython.mtsEventReceiverVoid_SetHandler(self, *args)

    def RemoveHandler(self):
        """RemoveHandler(mtsEventReceiverVoid self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverVoid_RemoveHandler(self)

mtsEventReceiverVoid_swigregister = _cisstMultiTaskPython.mtsEventReceiverVoid_swigregister
mtsEventReceiverVoid_swigregister(mtsEventReceiverVoid)

class mtsEventReceiverWrite(mtsEventReceiverBase):
    """Proxy of C++ mtsEventReceiverWrite class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(mtsEventReceiverWrite self) -> mtsEventReceiverWrite"""
        this = _cisstMultiTaskPython.new_mtsEventReceiverWrite()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventReceiverWrite
    __del__ = lambda self : None;
    def GetCommand(self):
        """GetCommand(mtsEventReceiverWrite self) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsEventReceiverWrite_GetCommand(self)

    def SetHandlerCommand(self, *args):
        """SetHandlerCommand(mtsEventReceiverWrite self, mtsCommandWriteBase commandHandler)"""
        return _cisstMultiTaskPython.mtsEventReceiverWrite_SetHandlerCommand(self, *args)

    def Wait(self, *args):
        """
        Wait(mtsEventReceiverWrite self) -> bool
        Wait(mtsEventReceiverWrite self, mtsGenericObject obj) -> bool
        """
        return _cisstMultiTaskPython.mtsEventReceiverWrite_Wait(self, *args)

    def WaitWithTimeout(self, *args):
        """
        WaitWithTimeout(mtsEventReceiverWrite self, double timeoutInSec) -> bool
        WaitWithTimeout(mtsEventReceiverWrite self, double timeoutInSec, mtsGenericObject obj) -> bool
        """
        return _cisstMultiTaskPython.mtsEventReceiverWrite_WaitWithTimeout(self, *args)

    def RemoveHandler(self):
        """RemoveHandler(mtsEventReceiverWrite self) -> bool"""
        return _cisstMultiTaskPython.mtsEventReceiverWrite_RemoveHandler(self)

mtsEventReceiverWrite_swigregister = _cisstMultiTaskPython.mtsEventReceiverWrite_swigregister
mtsEventReceiverWrite_swigregister(mtsEventReceiverWrite)

class mtsFunctionBase(object):
    """Proxy of C++ mtsFunctionBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Detach(self):
        """Detach(mtsFunctionBase self) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionBase_Detach(self)

    def IsValid(self):
        """IsValid(mtsFunctionBase self) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionBase_IsValid(self)

    def InitCompletionCommand(self, *args):
        """InitCompletionCommand(mtsFunctionBase self, std::string const & name)"""
        return _cisstMultiTaskPython.mtsFunctionBase_InitCompletionCommand(self, *args)

    def SetThreadSignal(self, *args):
        """SetThreadSignal(mtsFunctionBase self, osaThreadSignal * threadSignal)"""
        return _cisstMultiTaskPython.mtsFunctionBase_SetThreadSignal(self, *args)

    def ThreadSignalWait(self):
        """ThreadSignalWait(mtsFunctionBase self)"""
        return _cisstMultiTaskPython.mtsFunctionBase_ThreadSignalWait(self)

    def WaitForResult(self, *args):
        """
        WaitForResult(mtsFunctionBase self, mtsGenericObject arg) -> mtsExecutionResult
        WaitForResult(mtsFunctionBase self) -> mtsExecutionResult
        """
        return _cisstMultiTaskPython.mtsFunctionBase_WaitForResult(self, *args)

mtsFunctionBase_swigregister = _cisstMultiTaskPython.mtsFunctionBase_swigregister
mtsFunctionBase_swigregister(mtsFunctionBase)

class mtsFunctionVoid(mtsFunctionBase):
    """Proxy of C++ mtsFunctionVoid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, isProxy=False): 
        """
        __init__(mtsFunctionVoid self, bool const isProxy=False) -> mtsFunctionVoid
        __init__(mtsFunctionVoid self) -> mtsFunctionVoid
        """
        this = _cisstMultiTaskPython.new_mtsFunctionVoid(isProxy)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionVoid
    __del__ = lambda self : None;
    def Bind(self, *args):
        """Bind(mtsFunctionVoid self, mtsCommandVoid command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionVoid_Bind(self, *args)

    def __call__(self):
        """__call__(mtsFunctionVoid self) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoid___call__(self)

    def Execute(self):
        """Execute(mtsFunctionVoid self) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoid_Execute(self)

    def ExecuteBlocking(self):
        """ExecuteBlocking(mtsFunctionVoid self) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoid_ExecuteBlocking(self)

    def GetCommand(self):
        """GetCommand(mtsFunctionVoid self) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsFunctionVoid_GetCommand(self)

    def __call__(self):
        return self.Execute().GetResult()

mtsFunctionVoid_swigregister = _cisstMultiTaskPython.mtsFunctionVoid_swigregister
mtsFunctionVoid_swigregister(mtsFunctionVoid)

class mtsFunctionVoidReturn(mtsFunctionBase):
    """Proxy of C++ mtsFunctionVoidReturn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, isProxy=False): 
        """
        __init__(mtsFunctionVoidReturn self, bool const isProxy=False) -> mtsFunctionVoidReturn
        __init__(mtsFunctionVoidReturn self) -> mtsFunctionVoidReturn
        """
        this = _cisstMultiTaskPython.new_mtsFunctionVoidReturn(isProxy)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionVoidReturn
    __del__ = lambda self : None;
    def Bind(self, *args):
        """Bind(mtsFunctionVoidReturn self, mtsCommandVoidReturn command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_Bind(self, *args)

    def __call__(self, *args):
        """__call__(mtsFunctionVoidReturn self, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn___call__(self, *args)

    def ExecuteGeneric(self, *args):
        """ExecuteGeneric(mtsFunctionVoidReturn self, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_ExecuteGeneric(self, *args)

    def GetCommand(self):
        """GetCommand(mtsFunctionVoidReturn self) -> mtsCommandVoidReturn"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_GetCommand(self)

    def GetResultPrototype(self):
        """GetResultPrototype(mtsFunctionVoidReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionVoidReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmpObject = self.GetResultPrototype().Services().Create()
                self.ArgumentType = tmpObject.__class__
            except Exception, e:
                print 'VoidReturn function ', self.GetCommand().GetName(), ': ', e
        else:
            print 'VoidReturn function not valid'


    def __call__(self):
        # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetResultPrototype())
        except Exception:
            argument = self.GetResultPrototype()
        # Probably should check return value below
        self.ExecuteGeneric(argument)
        # If argument has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument

mtsFunctionVoidReturn_swigregister = _cisstMultiTaskPython.mtsFunctionVoidReturn_swigregister
mtsFunctionVoidReturn_swigregister(mtsFunctionVoidReturn)

class mtsFunctionRead(mtsFunctionBase):
    """Proxy of C++ mtsFunctionRead class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(mtsFunctionRead self) -> mtsFunctionRead"""
        this = _cisstMultiTaskPython.new_mtsFunctionRead()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionRead
    __del__ = lambda self : None;
    def Bind(self, *args):
        """Bind(mtsFunctionRead self, mtsCommandRead command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionRead_Bind(self, *args)

    def __call__(self, *args):
        """__call__(mtsFunctionRead self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionRead___call__(self, *args)

    def ExecuteGeneric(self, *args):
        """ExecuteGeneric(mtsFunctionRead self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionRead_ExecuteGeneric(self, *args)

    def GetCommand(self):
        """GetCommand(mtsFunctionRead self) -> mtsCommandRead"""
        return _cisstMultiTaskPython.mtsFunctionRead_GetCommand(self)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsFunctionRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionRead_GetArgumentPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmpObject = self.GetArgumentPrototype().Services().Create()
                self.ArgumentType = tmpObject.__class__
            except Exception, e:
                print 'Read function ', self.GetCommand().GetName(), ': ', e
        else:
            print 'Read function not valid'


    def __call__(self):
        # PK: figure out if the first statement (after try) is still needed
        try:
            argument = self.ArgumentType(self.GetArgumentPrototype())
        except Exception:
            argument = self.GetArgumentPrototype()
        # Probably should check return value below
        self.ExecuteGeneric(argument)
        # If argument has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument,"GetDataCopy"):
            return argument.GetDataCopy()
        else:
            return argument

mtsFunctionRead_swigregister = _cisstMultiTaskPython.mtsFunctionRead_swigregister
mtsFunctionRead_swigregister(mtsFunctionRead)

class mtsFunctionWrite(mtsFunctionBase):
    """Proxy of C++ mtsFunctionWrite class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, isProxy=False): 
        """
        __init__(mtsFunctionWrite self, bool const isProxy=False) -> mtsFunctionWrite
        __init__(mtsFunctionWrite self) -> mtsFunctionWrite
        """
        this = _cisstMultiTaskPython.new_mtsFunctionWrite(isProxy)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionWrite
    __del__ = lambda self : None;
    def Bind(self, *args):
        """Bind(mtsFunctionWrite self, mtsCommandWriteBase command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionWrite_Bind(self, *args)

    def __call__(self, *args):
        """__call__(mtsFunctionWrite self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWrite___call__(self, *args)

    def ExecuteGeneric(self, *args):
        """ExecuteGeneric(mtsFunctionWrite self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWrite_ExecuteGeneric(self, *args)

    def ExecuteBlockingGeneric(self, *args):
        """ExecuteBlockingGeneric(mtsFunctionWrite self, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWrite_ExecuteBlockingGeneric(self, *args)

    def GetCommand(self):
        """GetCommand(mtsFunctionWrite self) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsFunctionWrite_GetCommand(self)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsFunctionWrite self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionWrite_GetArgumentPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmpObject = self.GetArgumentPrototype().Services().Create()
                self.ArgumentType = tmpObject.__class__
            except Exception, e:
                print 'Write function ', self.GetCommand().GetName(), ': ', e
        else:
            print 'Write function not valid'

    def __call__(self, argument):
        if isinstance(argument, self.ArgumentType):
            return self.ExecuteGeneric(argument).GetResult()
        else:
            realArgument = self.ArgumentType(argument)
            return self.ExecuteGeneric(realArgument).GetResult()

mtsFunctionWrite_swigregister = _cisstMultiTaskPython.mtsFunctionWrite_swigregister
mtsFunctionWrite_swigregister(mtsFunctionWrite)

class mtsFunctionWriteReturn(mtsFunctionBase):
    """Proxy of C++ mtsFunctionWriteReturn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, isProxy=False): 
        """
        __init__(mtsFunctionWriteReturn self, bool const isProxy=False) -> mtsFunctionWriteReturn
        __init__(mtsFunctionWriteReturn self) -> mtsFunctionWriteReturn
        """
        this = _cisstMultiTaskPython.new_mtsFunctionWriteReturn(isProxy)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionWriteReturn
    __del__ = lambda self : None;
    def Bind(self, *args):
        """Bind(mtsFunctionWriteReturn self, mtsCommandWriteReturn command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_Bind(self, *args)

    def __call__(self, *args):
        """__call__(mtsFunctionWriteReturn self, mtsGenericObject argument, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn___call__(self, *args)

    def ExecuteGeneric(self, *args):
        """ExecuteGeneric(mtsFunctionWriteReturn self, mtsGenericObject argument, mtsGenericObject result) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_ExecuteGeneric(self, *args)

    def GetCommand(self):
        """GetCommand(mtsFunctionWriteReturn self) -> mtsCommandWriteReturn"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_GetCommand(self)

    def GetArgumentPrototype(self):
        """GetArgumentPrototype(mtsFunctionWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_GetArgumentPrototype(self)

    def GetResultPrototype(self):
        """GetResultPrototype(mtsFunctionWriteReturn self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionWriteReturn_GetResultPrototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmp1Object = self.GetArgumentPrototype().Services().Create()
                self.ArgumentType = tmp1Object.__class__
                tmp2Object = self.GetResultPrototype().Services().Create()
                self.ResultType = tmp2Object.__class__
            except Exception, e:
                print 'WriteReturn function ', self.GetCommand().GetName(), ': ', e
        else:
            print 'WriteReturn function not valid'

    def __call__(self, argument):
        result = self.ResultType(self.GetResultPrototype())
        # Probably should check return value of self.Execute
        if isinstance(argument, self.ArgumentType):
            self.ExecuteGeneric(argument, result)
        else:
            realArgument = self.ArgumentType(argument1)
            self.ExecuteGeneric(realArgument, result)
        # If result has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(result,"GetDataCopy"):
            return result.GetDataCopy()
        else:
            return result

mtsFunctionWriteReturn_swigregister = _cisstMultiTaskPython.mtsFunctionWriteReturn_swigregister
mtsFunctionWriteReturn_swigregister(mtsFunctionWriteReturn)

class mtsFunctionQualifiedRead(mtsFunctionBase):
    """Proxy of C++ mtsFunctionQualifiedRead class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(mtsFunctionQualifiedRead self) -> mtsFunctionQualifiedRead"""
        this = _cisstMultiTaskPython.new_mtsFunctionQualifiedRead()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFunctionQualifiedRead
    __del__ = lambda self : None;
    def Bind(self, *args):
        """Bind(mtsFunctionQualifiedRead self, mtsCommandQualifiedRead command) -> bool"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_Bind(self, *args)

    def __call__(self, *args):
        """__call__(mtsFunctionQualifiedRead self, mtsGenericObject qualifier, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead___call__(self, *args)

    def ExecuteGeneric(self, *args):
        """ExecuteGeneric(mtsFunctionQualifiedRead self, mtsGenericObject qualifier, mtsGenericObject argument) -> mtsExecutionResult"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_ExecuteGeneric(self, *args)

    def GetCommand(self):
        """GetCommand(mtsFunctionQualifiedRead self) -> mtsCommandQualifiedRead"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_GetCommand(self)

    def GetArgument1Prototype(self):
        """GetArgument1Prototype(mtsFunctionQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_GetArgument1Prototype(self)

    def GetArgument2Prototype(self):
        """GetArgument2Prototype(mtsFunctionQualifiedRead self) -> mtsGenericObject"""
        return _cisstMultiTaskPython.mtsFunctionQualifiedRead_GetArgument2Prototype(self)

    def UpdateFromC(self):
        if self.IsValid():
            try:
                tmp1Object = self.GetArgument1Prototype().Services().Create()
                self.Argument1Type = tmp1Object.__class__
                tmp2Object = self.GetArgument2Prototype().Services().Create()
                self.Argument2Type = tmp2Object.__class__
            except Exception, e:
                print 'Qualified read function ', self.GetCommand().GetName(), ': ', e
        else:
            print 'QualifiedRead function not valid'

    def __call__(self, argument1):
        argument2 = self.Argument2Type(self.GetArgument2Prototype())
        # Probably should check return value of self.Execute
        if isinstance(argument1, self.Argument1Type):
            self.ExecuteGeneric(argument1, argument2)
        else:
            realArgument1 = self.Argument1Type(argument1)
            self.ExecuteGeneric(realArgument1, argument2)
        # If argument2 has a GetDataCopy method, we assume it is derived from
        # mtsGenericObjectProxy (%extend is used to add this method).
        if hasattr(argument2,"GetDataCopy"):
            return argument2.GetDataCopy()
        else:
            return argument2

mtsFunctionQualifiedRead_swigregister = _cisstMultiTaskPython.mtsFunctionQualifiedRead_swigregister
mtsFunctionQualifiedRead_swigregister(mtsFunctionQualifiedRead)

class mtsComponent(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ mtsComponent class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponent_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponent_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponent_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """__init__(mtsComponent self, std::string const & deviceName) -> mtsComponent"""
        this = _cisstMultiTaskPython.new_mtsComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponent
    __del__ = lambda self : None;
    def GetName(self, *args):
        """
        GetName(mtsComponent self) -> std::string const
        GetName(mtsComponent self, std::string & placeHolder)
        """
        return _cisstMultiTaskPython.mtsComponent_GetName(self, *args)

    def SetName(self, *args):
        """SetName(mtsComponent self, std::string const & componentName)"""
        return _cisstMultiTaskPython.mtsComponent_SetName(self, *args)

    def Configure(self, filename=""):
        """
        Configure(mtsComponent self, std::string const & filename="")
        Configure(mtsComponent self)
        """
        return _cisstMultiTaskPython.mtsComponent_Configure(self, filename)

    def Create(self):
        """Create(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Create(self)

    def CreateAndWait(self, *args):
        """CreateAndWait(mtsComponent self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_CreateAndWait(self, *args)

    def Start(self):
        """Start(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Start(self)

    def StartAndWait(self, *args):
        """StartAndWait(mtsComponent self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_StartAndWait(self, *args)

    def Suspend(self):
        """Suspend(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Suspend(self)

    def Kill(self):
        """Kill(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Kill(self)

    def KillAndWait(self, *args):
        """KillAndWait(mtsComponent self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_KillAndWait(self, *args)

    def Startup(self):
        """Startup(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Startup(self)

    def Cleanup(self):
        """Cleanup(mtsComponent self)"""
        return _cisstMultiTaskPython.mtsComponent_Cleanup(self)

    def AddInterfaceProvided(self, *args):
        """
        AddInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY) -> mtsInterfaceProvided
        AddInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName) -> mtsInterfaceProvided
        """
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceProvided(self, *args)

    def AddInterfaceProvidedWithoutSystemEvents(self, *args):
        """
        AddInterfaceProvidedWithoutSystemEvents(mtsComponent self, std::string const & interfaceProvidedName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY, 
            bool isProxy=False) -> mtsInterfaceProvided
        AddInterfaceProvidedWithoutSystemEvents(mtsComponent self, std::string const & interfaceProvidedName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY) -> mtsInterfaceProvided
        AddInterfaceProvidedWithoutSystemEvents(mtsComponent self, std::string const & interfaceProvidedName) -> mtsInterfaceProvided
        """
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceProvidedWithoutSystemEvents(self, *args)

    def AddInterfaceOutput(self, *args):
        """AddInterfaceOutput(mtsComponent self, std::string const & interfaceOutputName) -> mtsInterfaceOutput *"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceOutput(self, *args)

    def GetNamesOfInterfacesProvidedOrOutput(self):
        """GetNamesOfInterfacesProvidedOrOutput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesProvidedOrOutput(self)

    def GetNamesOfInterfacesProvided(self):
        """GetNamesOfInterfacesProvided(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesProvided(self)

    def GetNamesOfInterfacesOutput(self):
        """GetNamesOfInterfacesOutput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesOutput(self)

    def InterfaceExists(self, *args):
        """
        InterfaceExists(mtsComponent self, std::string const & interfaceName, cmnLogLevel lod=0x04) -> bool
        InterfaceExists(mtsComponent self, std::string const & interfaceName) -> bool
        """
        return _cisstMultiTaskPython.mtsComponent_InterfaceExists(self, *args)

    def InterfaceProvidedOrOutputExists(self, *args):
        """
        InterfaceProvidedOrOutputExists(mtsComponent self, std::string const & interfaceName, cmnLogLevel lod=0x04) -> bool
        InterfaceProvidedOrOutputExists(mtsComponent self, std::string const & interfaceName) -> bool
        """
        return _cisstMultiTaskPython.mtsComponent_InterfaceProvidedOrOutputExists(self, *args)

    def InterfaceRequiredOrInputExists(self, *args):
        """
        InterfaceRequiredOrInputExists(mtsComponent self, std::string const & interfaceName, cmnLogLevel lod=0x04) -> bool
        InterfaceRequiredOrInputExists(mtsComponent self, std::string const & interfaceName) -> bool
        """
        return _cisstMultiTaskPython.mtsComponent_InterfaceRequiredOrInputExists(self, *args)

    def GetInterfaceProvided(self, *args):
        """GetInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceProvided(self, *args)

    def GetInterfaceOutput(self, *args):
        """GetInterfaceOutput(mtsComponent self, std::string const & interfaceOutputName) -> mtsInterfaceOutput *"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceOutput(self, *args)

    def GetNumberOfInterfacesProvided(self):
        """GetNumberOfInterfacesProvided(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesProvided(self)

    def GetNumberOfInterfacesOutput(self):
        """GetNumberOfInterfacesOutput(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesOutput(self)

    def RemoveInterfaceProvided(self, *args):
        """
        RemoveInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName, bool const skipDisconnect=False) -> bool
        RemoveInterfaceProvided(mtsComponent self, std::string const & interfaceProvidedName) -> bool
        """
        return _cisstMultiTaskPython.mtsComponent_RemoveInterfaceProvided(self, *args)

    def AddInterfaceRequired(self, *args):
        """
        AddInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName, mtsRequiredType isRequired=MTS_REQUIRED) -> mtsInterfaceRequired
        AddInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName) -> mtsInterfaceRequired
        """
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceRequired(self, *args)

    def AddInterfaceRequiredWithoutSystemEventHandlers(self, *args):
        """
        AddInterfaceRequiredWithoutSystemEventHandlers(mtsComponent self, std::string const & interfaceRequiredName, mtsRequiredType isRequired=MTS_REQUIRED) -> mtsInterfaceRequired
        AddInterfaceRequiredWithoutSystemEventHandlers(mtsComponent self, std::string const & interfaceRequiredName) -> mtsInterfaceRequired
        """
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceRequiredWithoutSystemEventHandlers(self, *args)

    def AddInterfaceInput(self, *args):
        """AddInterfaceInput(mtsComponent self, std::string const & interfaceInputName) -> mtsInterfaceInput *"""
        return _cisstMultiTaskPython.mtsComponent_AddInterfaceInput(self, *args)

    def GetNamesOfInterfacesRequiredOrInput(self):
        """GetNamesOfInterfacesRequiredOrInput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesRequiredOrInput(self)

    def GetNamesOfInterfacesRequired(self):
        """GetNamesOfInterfacesRequired(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesRequired(self)

    def GetNamesOfInterfacesInput(self):
        """GetNamesOfInterfacesInput(mtsComponent self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponent_GetNamesOfInterfacesInput(self)

    def GetInterfaceProvidedFor(self, *args):
        """GetInterfaceProvidedFor(mtsComponent self, std::string const & interfaceRequiredName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceProvidedFor(self, *args)

    def GetInterfaceRequired(self, *args):
        """GetInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName) -> mtsInterfaceRequired"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceRequired(self, *args)

    def GetInterfaceInput(self, *args):
        """GetInterfaceInput(mtsComponent self, std::string const & interfaceInputName) -> mtsInterfaceInput *"""
        return _cisstMultiTaskPython.mtsComponent_GetInterfaceInput(self, *args)

    def GetNumberOfInterfacesRequired(self):
        """GetNumberOfInterfacesRequired(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesRequired(self)

    def GetNumberOfInterfacesInput(self):
        """GetNumberOfInterfacesInput(mtsComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponent_GetNumberOfInterfacesInput(self)

    def RemoveInterfaceRequired(self, *args):
        """
        RemoveInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName, bool const skipDisconnect=False) -> bool
        RemoveInterfaceRequired(mtsComponent self, std::string const & interfaceRequiredName) -> bool
        """
        return _cisstMultiTaskPython.mtsComponent_RemoveInterfaceRequired(self, *args)

    def GetManagerComponentServices(self, *args):
        """
        GetManagerComponentServices(mtsComponent self) -> mtsManagerComponentServices
        GetManagerComponentServices(mtsComponent self) -> mtsManagerComponentServices
        """
        return _cisstMultiTaskPython.mtsComponent_GetManagerComponentServices(self, *args)

    def GetStateTable(self, *args):
        """GetStateTable(mtsComponent self, std::string const & stateTableName) -> mtsStateTable *"""
        return _cisstMultiTaskPython.mtsComponent_GetStateTable(self, *args)

    def AddStateTable(self, *args):
        """
        AddStateTable(mtsComponent self, mtsStateTable * existingStateTable, bool addInterfaceProvided=True) -> bool
        AddStateTable(mtsComponent self, mtsStateTable * existingStateTable) -> bool
        """
        return _cisstMultiTaskPython.mtsComponent_AddStateTable(self, *args)

    def UseSeparateLogFileDefault(self, forwardToLogger=True):
        """
        UseSeparateLogFileDefault(mtsComponent self, bool forwardToLogger=True)
        UseSeparateLogFileDefault(mtsComponent self)
        """
        return _cisstMultiTaskPython.mtsComponent_UseSeparateLogFileDefault(self, forwardToLogger)

    def UseSeparateLogFileDefaultWithDate(self, forwardToLogger=True):
        """
        UseSeparateLogFileDefaultWithDate(mtsComponent self, bool forwardToLogger=True)
        UseSeparateLogFileDefaultWithDate(mtsComponent self)
        """
        return _cisstMultiTaskPython.mtsComponent_UseSeparateLogFileDefaultWithDate(self, forwardToLogger)

    def UseSeparateLogFile(self, *args):
        """
        UseSeparateLogFile(mtsComponent self, std::string const & filename, bool forwardToLogger=True)
        UseSeparateLogFile(mtsComponent self, std::string const & filename)
        """
        return _cisstMultiTaskPython.mtsComponent_UseSeparateLogFile(self, *args)

    def IsRunning(self):
        """IsRunning(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsRunning(self)

    def Running(self):
        """Running(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_Running(self)

    def IsStarted(self):
        """IsStarted(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsStarted(self)

    def IsTerminated(self):
        """IsTerminated(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsTerminated(self)

    def IsEndTask(self):
        """IsEndTask(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_IsEndTask(self)

    def GetState(self, *args):
        """
        GetState(mtsComponent self) -> mtsComponentState
        GetState(mtsComponent self, mtsComponentState state)
        """
        return _cisstMultiTaskPython.mtsComponent_GetState(self, *args)

    def SetReplayMode(self):
        """SetReplayMode(mtsComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_SetReplayMode(self)

    def SetReplayData(self, *args):
        """SetReplayData(mtsComponent self, std::string const & stateTableName, std::string const & fileName) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_SetReplayData(self, *args)

    def SetReplayTime(self, *args):
        """SetReplayTime(mtsComponent self, double const time) -> bool"""
        return _cisstMultiTaskPython.mtsComponent_SetReplayTime(self, *args)

    def UpdateFromC(self):
        interfaces = mtsComponent.GetNamesOfInterfacesProvided(self)
        for interface in interfaces:
            interfaceNoSpace = interface.replace(' ', '')
            interfaceFrontEnd = mtsComponent.GetInterfaceProvided(self, interface)
            self.__dict__[interfaceNoSpace] = mtsInterfaceProvided.GetEndUserInterface(interfaceFrontEnd, 'Python')
            self.__dict__[interfaceNoSpace].UpdateFromC()
        interfaces = mtsComponent.GetNamesOfInterfacesRequired(self)
        for interface in interfaces:
            interfaceNoSpace = interface.replace(' ', '')
            self.__dict__[interfaceNoSpace] = mtsComponent.GetInterfaceRequired(self, interface)
            # Only call UpdateFromC if required interface is connected to a provided interface
            if self.__dict__[interfaceNoSpace].GetConnectedInterface():
                self.__dict__[interfaceNoSpace].UpdateFromC()

    def AddInterfaceRequiredFromProvided(self, interfaceProvided):
        if not isinstance(interfaceProvided, mtsInterfaceProvidedDescription):
            print 'Parameter must be of type mtsInterfaceProvidedDescription'
            return
        interfaceProvidedNoSpace = interfaceProvided.InterfaceName.replace(' ', '')
        interfaceRequired = self.AddInterfaceRequired('RequiredFor'+interfaceProvidedNoSpace, MTS_OPTIONAL)
        if not interfaceRequired:
            return
        self.__dict__[interfaceRequired.GetName()] = interfaceRequired
        for command in interfaceProvided.CommandsVoid:
            func = mtsFunctionVoid()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
        #for command in interfaceProvided.CommandsVoidReturn:
        #    func = mtsFunctionVoidReturn()
        #    interfaceRequired.AddFunction(command.Name, func)
        #    func.thisown = 0
        for command in interfaceProvided.CommandsWrite:
            func = mtsFunctionWrite()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
        #for command in interfaceProvided.CommandsWriteReturn:
        #    func = mtsFunctionWriteReturn()
        #    interfaceRequired.AddFunction(command.Name, func)
        #    func.thisown = 0
        for command in interfaceProvided.CommandsQualifiedRead:
            func = mtsFunctionQualifiedRead()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
        for command in interfaceProvided.CommandsRead:
            func = mtsFunctionRead()
            interfaceRequired.AddFunction(command.Name, func)
            func.thisown = 0
        return interfaceRequired

    # otherComponentInterface should be a tuple ('process', 'component', 'interfaceProvided')
    # or ('component', 'interfaceProvided')
    def AddInterfaceRequiredAndConnect(self, otherComponentInterface, connectionAttempts = 1):
        try:
            localProcessName = mtsManagerLocal_GetInstance().GetProcessName()
            num = len(otherComponentInterface)
            if 2 <= num <= 3:
                interfaceName = otherComponentInterface[num-1]
                componentName = otherComponentInterface[num-2]
                if num == 3:
                    processName = otherComponentInterface[num-3]
                else:
                    processName = localProcessName
                # Now do the work here
                manager = self.GetManagerComponentServices()
                if not manager:
                    print 'Could not get manager component services'
                    return
                interfaceDescription = manager.GetInterfaceProvidedDescription(processName, componentName, interfaceName)
                if not interfaceDescription.InterfaceName:
                    print 'No provided interface (empty string)'
                    return
                interfaceRequired = self.AddInterfaceRequiredFromProvided(interfaceDescription)
                attempt = 0
                while (attempt < connectionAttempts):
                    attempt = attempt + 1
                    print 'Trying to connect:', interfaceRequired.GetName(), ' - attempt # ', attempt
                    manager.Connect(localProcessName, self.GetName(), interfaceRequired.GetName(), processName, componentName, interfaceName)
                    # PK TEMP: need time.sleep until blocking commands supported over network
                    time.sleep(2.0)
                    interfaceRequired.UpdateFromC()
                    if interfaceRequired.GetConnectedInterface():
                       print 'Required interface ', interfaceRequired.GetName(), ' connected.'
                       return interfaceRequired
                print 'Unable to add required interface for ', interfaceName
            else:
                print 'Parameter error: must specify (process, component, interface) or (component, interface)'
        except TypeError, e:
            print 'Parameter error: must specify (process, component, interface) or (component, interface)'

mtsComponent_swigregister = _cisstMultiTaskPython.mtsComponent_swigregister
mtsComponent_swigregister(mtsComponent)

def mtsComponent_ClassServices():
  """mtsComponent_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponent_ClassServices()


def mtsObjectName(*args):
  """
    mtsObjectName(void const * MARKED_AS_UNUSEDobject) -> std::string
    mtsObjectName(mtsGenericObject object) -> std::string
    mtsObjectName(mtsComponent object) -> std::string
    """
  return _cisstMultiTaskPython.mtsObjectName(*args)
class mtsComponentConstructorNameAndInt(mtsGenericObject):
    """Proxy of C++ mtsComponentConstructorNameAndArg<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Name = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Name_set)
    Arg = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_Arg_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentConstructorNameAndArg<(int)> self) -> mtsComponentConstructorNameAndInt
        __init__(mtsComponentConstructorNameAndArg<(int)> self, std::string const & name, int const & arg) -> mtsComponentConstructorNameAndInt
        """
        this = _cisstMultiTaskPython.new_mtsComponentConstructorNameAndInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndInt
    __del__ = lambda self : None;
mtsComponentConstructorNameAndInt_swigregister = _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_swigregister
mtsComponentConstructorNameAndInt_swigregister(mtsComponentConstructorNameAndInt)

def mtsComponentConstructorNameAndInt_ClassServices():
  """mtsComponentConstructorNameAndInt_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentConstructorNameAndInt_ClassServices()

class mtsComponentConstructorNameAndUInt(mtsGenericObject):
    """Proxy of C++ mtsComponentConstructorNameAndArg<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Name = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Name_set)
    Arg = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_Arg_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentConstructorNameAndArg<(unsigned int)> self) -> mtsComponentConstructorNameAndUInt
        __init__(mtsComponentConstructorNameAndArg<(unsigned int)> self, std::string const & name, unsigned int const & arg) -> mtsComponentConstructorNameAndUInt
        """
        this = _cisstMultiTaskPython.new_mtsComponentConstructorNameAndUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndUInt
    __del__ = lambda self : None;
mtsComponentConstructorNameAndUInt_swigregister = _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_swigregister
mtsComponentConstructorNameAndUInt_swigregister(mtsComponentConstructorNameAndUInt)

def mtsComponentConstructorNameAndUInt_ClassServices():
  """mtsComponentConstructorNameAndUInt_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentConstructorNameAndUInt_ClassServices()

class mtsComponentConstructorNameAndLong(mtsGenericObject):
    """Proxy of C++ mtsComponentConstructorNameAndArg<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Name = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Name_set)
    Arg = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_Arg_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentConstructorNameAndArg<(long)> self) -> mtsComponentConstructorNameAndLong
        __init__(mtsComponentConstructorNameAndArg<(long)> self, std::string const & name, long const & arg) -> mtsComponentConstructorNameAndLong
        """
        this = _cisstMultiTaskPython.new_mtsComponentConstructorNameAndLong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndLong
    __del__ = lambda self : None;
mtsComponentConstructorNameAndLong_swigregister = _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_swigregister
mtsComponentConstructorNameAndLong_swigregister(mtsComponentConstructorNameAndLong)

def mtsComponentConstructorNameAndLong_ClassServices():
  """mtsComponentConstructorNameAndLong_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentConstructorNameAndLong_ClassServices()

class mtsComponentConstructorNameAndULong(mtsGenericObject):
    """Proxy of C++ mtsComponentConstructorNameAndArg<(unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Name = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Name_set)
    Arg = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_Arg_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentConstructorNameAndArg<(unsigned long)> self) -> mtsComponentConstructorNameAndULong
        __init__(mtsComponentConstructorNameAndArg<(unsigned long)> self, std::string const & name, unsigned long const & arg) -> mtsComponentConstructorNameAndULong
        """
        this = _cisstMultiTaskPython.new_mtsComponentConstructorNameAndULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndULong
    __del__ = lambda self : None;
mtsComponentConstructorNameAndULong_swigregister = _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_swigregister
mtsComponentConstructorNameAndULong_swigregister(mtsComponentConstructorNameAndULong)

def mtsComponentConstructorNameAndULong_ClassServices():
  """mtsComponentConstructorNameAndULong_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentConstructorNameAndULong_ClassServices()

class mtsComponentConstructorNameAndDouble(mtsGenericObject):
    """Proxy of C++ mtsComponentConstructorNameAndArg<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Name = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Name_set)
    Arg = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_Arg_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentConstructorNameAndArg<(double)> self) -> mtsComponentConstructorNameAndDouble
        __init__(mtsComponentConstructorNameAndArg<(double)> self, std::string const & name, double const & arg) -> mtsComponentConstructorNameAndDouble
        """
        this = _cisstMultiTaskPython.new_mtsComponentConstructorNameAndDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndDouble
    __del__ = lambda self : None;
mtsComponentConstructorNameAndDouble_swigregister = _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_swigregister
mtsComponentConstructorNameAndDouble_swigregister(mtsComponentConstructorNameAndDouble)

def mtsComponentConstructorNameAndDouble_ClassServices():
  """mtsComponentConstructorNameAndDouble_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentConstructorNameAndDouble_ClassServices()

class mtsComponentConstructorNameAndString(mtsGenericObject):
    """Proxy of C++ mtsComponentConstructorNameAndArg<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentConstructorNameAndString_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentConstructorNameAndString_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentConstructorNameAndString_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Name = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndString_Name_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndString_Name_set)
    Arg = _swig_property(_cisstMultiTaskPython.mtsComponentConstructorNameAndString_Arg_get, _cisstMultiTaskPython.mtsComponentConstructorNameAndString_Arg_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentConstructorNameAndArg<(std::string)> self) -> mtsComponentConstructorNameAndString
        __init__(mtsComponentConstructorNameAndArg<(std::string)> self, std::string const & name, std::string const & arg) -> mtsComponentConstructorNameAndString
        """
        this = _cisstMultiTaskPython.new_mtsComponentConstructorNameAndString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentConstructorNameAndString
    __del__ = lambda self : None;
mtsComponentConstructorNameAndString_swigregister = _cisstMultiTaskPython.mtsComponentConstructorNameAndString_swigregister
mtsComponentConstructorNameAndString_swigregister(mtsComponentConstructorNameAndString)

def mtsComponentConstructorNameAndString_ClassServices():
  """mtsComponentConstructorNameAndString_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentConstructorNameAndString_ClassServices()

class mtsComponentWithManagement(mtsComponent):
    """Proxy of C++ mtsComponentWithManagement class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(mtsComponentWithManagement self, std::string const & name) -> mtsComponentWithManagement"""
        this = _cisstMultiTaskPython.new_mtsComponentWithManagement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentWithManagement
    __del__ = lambda self : None;
mtsComponentWithManagement_swigregister = _cisstMultiTaskPython.mtsComponentWithManagement_swigregister
mtsComponentWithManagement_swigregister(mtsComponentWithManagement)

class mtsInterface(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ mtsInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterface
    __del__ = lambda self : None;
    def GetName(self):
        """GetName(mtsInterface self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsInterface_GetName(self)

    def GetFullName(self):
        """GetFullName(mtsInterface self) -> std::string const"""
        return _cisstMultiTaskPython.mtsInterface_GetFullName(self)

    def GetComponent(self):
        """GetComponent(mtsInterface self) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsInterface_GetComponent(self)

    def GetComponentName(self):
        """GetComponentName(mtsInterface self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsInterface_GetComponentName(self)

mtsInterface_swigregister = _cisstMultiTaskPython.mtsInterface_swigregister
mtsInterface_swigregister(mtsInterface)

class mtsInterfaceProvided(mtsInterface):
    """Proxy of C++ mtsInterfaceProvided class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceProvided_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceProvided_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_ClassServices()

    ClassServices = staticmethod(ClassServices)
    DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE = _cisstMultiTaskPython.mtsInterfaceProvided_DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE
    def __init__(self, *args): 
        """
        __init__(mtsInterfaceProvided self, std::string const & name, mtsComponent component, mtsInterfaceQueueingPolicy queueingPolicy, 
            mtsCallableVoidBase * postCommandQueuedCallable=None, bool isProxy=False) -> mtsInterfaceProvided
        __init__(mtsInterfaceProvided self, std::string const & name, mtsComponent component, mtsInterfaceQueueingPolicy queueingPolicy, 
            mtsCallableVoidBase * postCommandQueuedCallable=None) -> mtsInterfaceProvided
        __init__(mtsInterfaceProvided self, std::string const & name, mtsComponent component, mtsInterfaceQueueingPolicy queueingPolicy) -> mtsInterfaceProvided
        """
        this = _cisstMultiTaskPython.new_mtsInterfaceProvided(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvided
    __del__ = lambda self : None;
    def Cleanup(self):
        """Cleanup(mtsInterfaceProvided self)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_Cleanup(self)

    def SetMailBoxSize(self, *args):
        """SetMailBoxSize(mtsInterfaceProvided self, size_t desiredSize)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SetMailBoxSize(self, *args)

    def GetMailBoxSize(self):
        """GetMailBoxSize(mtsInterfaceProvided self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetMailBoxSize(self)

    def SetArgumentQueuesSize(self, *args):
        """SetArgumentQueuesSize(mtsInterfaceProvided self, size_t desiredSize)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SetArgumentQueuesSize(self, *args)

    def GetArgumentQueuesSize(self):
        """GetArgumentQueuesSize(mtsInterfaceProvided self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetArgumentQueuesSize(self)

    def SetMailBoxAndArgumentQueuesSize(self, *args):
        """SetMailBoxAndArgumentQueuesSize(mtsInterfaceProvided self, size_t desiredSize)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_SetMailBoxAndArgumentQueuesSize(self, *args)

    def GetNamesOfCommands(self):
        """GetNamesOfCommands(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommands(self)

    def GetNamesOfCommandsVoid(self):
        """GetNamesOfCommandsVoid(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsVoid(self)

    def GetNamesOfCommandsVoidReturn(self):
        """GetNamesOfCommandsVoidReturn(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsVoidReturn(self)

    def GetNamesOfCommandsWrite(self):
        """GetNamesOfCommandsWrite(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsWrite(self)

    def GetNamesOfCommandsWriteReturn(self):
        """GetNamesOfCommandsWriteReturn(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsWriteReturn(self)

    def GetNamesOfCommandsRead(self):
        """GetNamesOfCommandsRead(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsRead(self)

    def GetNamesOfCommandsQualifiedRead(self):
        """GetNamesOfCommandsQualifiedRead(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfCommandsQualifiedRead(self)

    def GetNamesOfEventsVoid(self):
        """GetNamesOfEventsVoid(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfEventsVoid(self)

    def GetNamesOfEventsWrite(self):
        """GetNamesOfEventsWrite(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNamesOfEventsWrite(self)

    def IsSystemEventVoid(*args):
        """IsSystemEventVoid(std::string const & name) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_IsSystemEventVoid(*args)

    IsSystemEventVoid = staticmethod(IsSystemEventVoid)
    def GetCommandVoid(self, *args):
        """GetCommandVoid(mtsInterfaceProvided self, std::string const & commandName) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandVoid(self, *args)

    def GetCommandVoidReturn(self, *args):
        """GetCommandVoidReturn(mtsInterfaceProvided self, std::string const & commandName) -> mtsCommandVoidReturn"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandVoidReturn(self, *args)

    def GetCommandWrite(self, *args):
        """GetCommandWrite(mtsInterfaceProvided self, std::string const & commandName) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandWrite(self, *args)

    def GetCommandWriteReturn(self, *args):
        """GetCommandWriteReturn(mtsInterfaceProvided self, std::string const & commandName) -> mtsCommandWriteReturn"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandWriteReturn(self, *args)

    def GetCommandRead(self, *args):
        """GetCommandRead(mtsInterfaceProvided self, std::string const & commandName) -> mtsCommandRead"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandRead(self, *args)

    def GetCommandQualifiedRead(self, *args):
        """GetCommandQualifiedRead(mtsInterfaceProvided self, std::string const & commandName) -> mtsCommandQualifiedRead"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetCommandQualifiedRead(self, *args)

    def GetEventVoid(self, *args):
        """GetEventVoid(mtsInterfaceProvided self, std::string const & eventName) -> mtsMulticastCommandVoid *"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetEventVoid(self, *args)

    def GetEventWrite(self, *args):
        """GetEventWrite(mtsInterfaceProvided self, std::string const & eventName) -> mtsMulticastCommandWriteBase *"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetEventWrite(self, *args)

    def AddEventWriteGeneric(self, *args):
        """
        AddEventWriteGeneric(mtsInterfaceProvided self, std::string const & eventName, mtsGenericObject argumentPrototype) -> mtsCommandWriteBase
        AddEventWriteGeneric(mtsInterfaceProvided self, mtsFunctionWrite eventTrigger, std::string const & eventName, mtsGenericObject argumentPrototype) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddEventWriteGeneric(self, *args)

    def AddObserver(self, *args):
        """
        AddObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandVoid handler) -> bool
        AddObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandWriteBase handler) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddObserver(self, *args)

    def AddObserverList(self, *args):
        """AddObserverList(mtsInterfaceProvided self, mtsEventHandlerList const & argin, mtsEventHandlerList & argout)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_AddObserverList(self, *args)

    def RemoveObserver(self, *args):
        """
        RemoveObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandVoid handler) -> bool
        RemoveObserver(mtsInterfaceProvided self, std::string const & eventName, mtsCommandWriteBase handler) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceProvided_RemoveObserver(self, *args)

    def RemoveObserverList(self, *args):
        """RemoveObserverList(mtsInterfaceProvided self, mtsEventHandlerList const & argin, mtsEventHandlerList & argout)"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_RemoveObserverList(self, *args)

    def GetOriginalInterface(self):
        """GetOriginalInterface(mtsInterfaceProvided self) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetOriginalInterface(self)

    def FindEndUserInterfaceByName(self, *args):
        """FindEndUserInterfaceByName(mtsInterfaceProvided self, std::string const & userName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_FindEndUserInterfaceByName(self, *args)

    def GetListOfUserNames(self):
        """GetListOfUserNames(mtsInterfaceProvided self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetListOfUserNames(self)

    def GetNumberOfEndUsers(self):
        """GetNumberOfEndUsers(mtsInterfaceProvided self) -> int"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetNumberOfEndUsers(self)

    def ProcessMailBoxes(self):
        """ProcessMailBoxes(mtsInterfaceProvided self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_ProcessMailBoxes(self)

    def GetEndUserInterface(self, *args):
        """GetEndUserInterface(mtsInterfaceProvided self, std::string const & userName) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceProvided_GetEndUserInterface(self, *args)

    def UpdateFromC(self):
        commands = mtsInterfaceProvided.GetNamesOfCommandsVoid(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandVoid(self, command)
        commands = mtsInterfaceProvided.GetNamesOfCommandsVoidReturn(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandVoidReturn(self, command)
        commands = mtsInterfaceProvided.GetNamesOfCommandsWrite(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandWrite(self, command)
            self.__dict__[command].UpdateFromC()
        commands = mtsInterfaceProvided.GetNamesOfCommandsWriteReturn(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandWriteReturn(self, command)
            self.__dict__[command].UpdateFromC()
        commands = mtsInterfaceProvided.GetNamesOfCommandsQualifiedRead(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandQualifiedRead(self, command)
            self.__dict__[command].UpdateFromC()
        commands = mtsInterfaceProvided.GetNamesOfCommandsRead(self)
        for command in commands:
            self.__dict__[command] = mtsInterfaceProvided.GetCommandRead(self, command)
            self.__dict__[command].UpdateFromC()

mtsInterfaceProvided_swigregister = _cisstMultiTaskPython.mtsInterfaceProvided_swigregister
mtsInterfaceProvided_swigregister(mtsInterfaceProvided)

def mtsInterfaceProvided_ClassServices():
  """mtsInterfaceProvided_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInterfaceProvided_ClassServices()

def mtsInterfaceProvided_IsSystemEventVoid(*args):
  """mtsInterfaceProvided_IsSystemEventVoid(std::string const & name) -> bool"""
  return _cisstMultiTaskPython.mtsInterfaceProvided_IsSystemEventVoid(*args)

class mtsInterfaceRequired(mtsInterface):
    """Proxy of C++ mtsInterfaceRequired class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceRequired_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceRequired_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_ClassServices()

    ClassServices = staticmethod(ClassServices)
    DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE = _cisstMultiTaskPython.mtsInterfaceRequired_DEFAULT_MAIL_BOX_AND_ARGUMENT_QUEUES_SIZE
    def __init__(self, *args): 
        """
        __init__(mtsInterfaceRequired self, std::string const & interfaceName, mtsComponent component, mtsMailBox * mailBox, 
            mtsRequiredType required=MTS_REQUIRED) -> mtsInterfaceRequired
        __init__(mtsInterfaceRequired self, std::string const & interfaceName, mtsComponent component, mtsMailBox * mailBox) -> mtsInterfaceRequired
        """
        this = _cisstMultiTaskPython.new_mtsInterfaceRequired(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequired
    __del__ = lambda self : None;
    def GetConnectedInterface(self):
        """GetConnectedInterface(mtsInterfaceRequired self) -> mtsInterfaceProvided"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetConnectedInterface(self)

    def SetMailBoxSize(self, *args):
        """SetMailBoxSize(mtsInterfaceRequired self, size_t desiredSize) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_SetMailBoxSize(self, *args)

    def SetArgumentQueuesSize(self, *args):
        """SetArgumentQueuesSize(mtsInterfaceRequired self, size_t desiredSize) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_SetArgumentQueuesSize(self, *args)

    def SetMailBoxAndArgumentQueuesSize(self, *args):
        """SetMailBoxAndArgumentQueuesSize(mtsInterfaceRequired self, size_t desiredSize) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_SetMailBoxAndArgumentQueuesSize(self, *args)

    def GetNamesOfFunctions(self):
        """GetNamesOfFunctions(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctions(self)

    def GetNamesOfFunctionsVoid(self):
        """GetNamesOfFunctionsVoid(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsVoid(self)

    def GetNamesOfFunctionsVoidReturn(self):
        """GetNamesOfFunctionsVoidReturn(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsVoidReturn(self)

    def GetNamesOfFunctionsWrite(self):
        """GetNamesOfFunctionsWrite(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsWrite(self)

    def GetNamesOfFunctionsWriteReturn(self):
        """GetNamesOfFunctionsWriteReturn(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsWriteReturn(self)

    def GetNamesOfFunctionsRead(self):
        """GetNamesOfFunctionsRead(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsRead(self)

    def GetNamesOfFunctionsQualifiedRead(self):
        """GetNamesOfFunctionsQualifiedRead(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfFunctionsQualifiedRead(self)

    def GetFunctionVoid(self, *args):
        """GetFunctionVoid(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionVoid"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionVoid(self, *args)

    def GetFunctionVoidReturn(self, *args):
        """GetFunctionVoidReturn(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionVoidReturn"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionVoidReturn(self, *args)

    def GetFunctionWrite(self, *args):
        """GetFunctionWrite(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionWrite"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionWrite(self, *args)

    def GetFunctionWriteReturn(self, *args):
        """GetFunctionWriteReturn(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionWriteReturn"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionWriteReturn(self, *args)

    def GetFunctionRead(self, *args):
        """GetFunctionRead(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionRead"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionRead(self, *args)

    def GetFunctionQualifiedRead(self, *args):
        """GetFunctionQualifiedRead(mtsInterfaceRequired self, std::string const & functionName) -> mtsFunctionQualifiedRead"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetFunctionQualifiedRead(self, *args)

    def GetNamesOfEventHandlersVoid(self):
        """GetNamesOfEventHandlersVoid(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfEventHandlersVoid(self)

    def GetNamesOfEventHandlersWrite(self):
        """GetNamesOfEventHandlersWrite(mtsInterfaceRequired self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetNamesOfEventHandlersWrite(self)

    def GetEventHandlerVoid(self, *args):
        """GetEventHandlerVoid(mtsInterfaceRequired self, std::string const & eventName) -> mtsCommandVoid"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetEventHandlerVoid(self, *args)

    def GetEventHandlerWrite(self, *args):
        """GetEventHandlerWrite(mtsInterfaceRequired self, std::string const & eventName) -> mtsCommandWriteBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_GetEventHandlerWrite(self, *args)

    def ConnectTo(self, *args):
        """ConnectTo(mtsInterfaceRequired self, mtsInterfaceProvided interfaceProvided) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_ConnectTo(self, *args)

    def IsRequired(self):
        """IsRequired(mtsInterfaceRequired self) -> mtsRequiredType"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_IsRequired(self)

    def AddSystemEventHandlers(self):
        """AddSystemEventHandlers(mtsInterfaceRequired self) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddSystemEventHandlers(self)

    def DisableAllEvents(self):
        """DisableAllEvents(mtsInterfaceRequired self)"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_DisableAllEvents(self)

    def EnableAllEvents(self):
        """EnableAllEvents(mtsInterfaceRequired self)"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_EnableAllEvents(self)

    def ProcessMailBoxes(self):
        """ProcessMailBoxes(mtsInterfaceRequired self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_ProcessMailBoxes(self)

    def AddFunction(self, *args):
        """
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionVoid function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionVoid function) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionVoidReturn function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionVoidReturn function) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionWrite function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionWrite function) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionWriteReturn function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionWriteReturn function) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionRead function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionRead function) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionQualifiedRead function, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddFunction(mtsInterfaceRequired self, std::string const & functionName, mtsFunctionQualifiedRead function) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddFunction(self, *args)

    def AddEventReceiver(self, *args):
        """
        AddEventReceiver(mtsInterfaceRequired self, std::string const & eventName, mtsEventReceiverVoid receiver, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddEventReceiver(mtsInterfaceRequired self, std::string const & eventName, mtsEventReceiverVoid receiver) -> bool
        AddEventReceiver(mtsInterfaceRequired self, std::string const & eventName, mtsEventReceiverWrite receiver, mtsRequiredType required=MTS_REQUIRED) -> bool
        AddEventReceiver(mtsInterfaceRequired self, std::string const & eventName, mtsEventReceiverWrite receiver) -> bool
        """
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddEventReceiver(self, *args)

    def AddEventHandlerVoid(self, *args):
        """
        AddEventHandlerVoid(mtsInterfaceRequired self, mtsCallableVoidBase * callable, std::string const & eventName, mtsEventQueueingPolicy queueingPolicy=MTS_INTERFACE_EVENT_POLICY) -> mtsCommandVoid
        AddEventHandlerVoid(mtsInterfaceRequired self, mtsCallableVoidBase * callable, std::string const & eventName) -> mtsCommandVoid
        AddEventHandlerVoid(mtsInterfaceRequired self, void (*)(void) function, std::string const & eventName, mtsEventQueueingPolicy queueingPolicy=MTS_INTERFACE_EVENT_POLICY) -> mtsCommandVoid
        AddEventHandlerVoid(mtsInterfaceRequired self, void (*)(void) function, std::string const & eventName) -> mtsCommandVoid
        """
        return _cisstMultiTaskPython.mtsInterfaceRequired_AddEventHandlerVoid(self, *args)

    def RemoveEventHandlerVoid(self, *args):
        """RemoveEventHandlerVoid(mtsInterfaceRequired self, std::string const & eventName) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_RemoveEventHandlerVoid(self, *args)

    def RemoveEventHandlerWrite(self, *args):
        """RemoveEventHandlerWrite(mtsInterfaceRequired self, std::string const & eventName) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequired_RemoveEventHandlerWrite(self, *args)

    def UpdateFromC(self):
        if not self.GetConnectedInterface():
            print 'Required interface ', self.GetName(), ' not yet connected.'
            return
        functions = mtsInterfaceRequired.GetNamesOfFunctionsVoid(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionVoid(self, function)
        functions = mtsInterfaceRequired.GetNamesOfFunctionsVoidReturn(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionVoidReturn(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsWrite(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionWrite(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsWriteReturn(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionWriteReturn(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsQualifiedRead(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionQualifiedRead(self, function)
            self.__dict__[function].UpdateFromC()
        functions = mtsInterfaceRequired.GetNamesOfFunctionsRead(self)
        for function in functions:
            self.__dict__[function] = mtsInterfaceRequired.GetFunctionRead(self, function)
            self.__dict__[function].UpdateFromC()

mtsInterfaceRequired_swigregister = _cisstMultiTaskPython.mtsInterfaceRequired_swigregister
mtsInterfaceRequired_swigregister(mtsInterfaceRequired)

def mtsInterfaceRequired_ClassServices():
  """mtsInterfaceRequired_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInterfaceRequired_ClassServices()

class mtsManagerComponentServices(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ mtsManagerComponentServices class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsManagerComponentServices_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsManagerComponentServices_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """__init__(mtsManagerComponentServices self, mtsInterfaceRequired internalInterfaceRequired) -> mtsManagerComponentServices"""
        this = _cisstMultiTaskPython.new_mtsManagerComponentServices(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsManagerComponentServices
    __del__ = lambda self : None;
    def InitializeInterfaceInternalRequired(self):
        """InitializeInterfaceInternalRequired(mtsManagerComponentServices self) -> bool"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_InitializeInterfaceInternalRequired(self)

    def IsConnected(self):
        """IsConnected(mtsManagerComponentServices self) -> bool"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_IsConnected(self)

    def ComponentCreate(self, *args):
        """
        ComponentCreate(mtsManagerComponentServices self, std::string const & className, std::string const & componentName) -> bool
        ComponentCreate(mtsManagerComponentServices self, std::string const & processName, std::string const & className, std::string const & componentName) -> bool
        ComponentCreate(mtsManagerComponentServices self, std::string const & className, mtsGenericObject constructorArg) -> bool
        ComponentCreate(mtsManagerComponentServices self, std::string const & processName, std::string const & className, mtsGenericObject constructorArg) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentCreate(self, *args)

    def ComponentConfigure(self, *args):
        """
        ComponentConfigure(mtsManagerComponentServices self, std::string const & componentName, std::string const & configString) -> bool
        ComponentConfigure(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & configString) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentConfigure(self, *args)

    def Connect(self, *args):
        """
        Connect(mtsManagerComponentServices self, std::string const & clientComponentName, std::string const & clientInterfaceName, 
            std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Connect(mtsManagerComponentServices self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Connect(mtsManagerComponentServices self, mtsDescriptionConnection connection) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_Connect(self, *args)

    def Disconnect(self, *args):
        """
        Disconnect(mtsManagerComponentServices self, std::string const & clientComponentName, std::string const & clientInterfaceName, 
            std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Disconnect(mtsManagerComponentServices self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceName) -> bool
        Disconnect(mtsManagerComponentServices self, mtsDescriptionConnection connection) -> bool
        Disconnect(mtsManagerComponentServices self, ConnectionIDType connectionID) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_Disconnect(self, *args)

    def ComponentStart(self, *args):
        """
        ComponentStart(mtsManagerComponentServices self, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStart(mtsManagerComponentServices self, std::string const & componentName) -> bool
        ComponentStart(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStart(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentStart(self, *args)

    def ComponentStop(self, *args):
        """
        ComponentStop(mtsManagerComponentServices self, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStop(mtsManagerComponentServices self, std::string const & componentName) -> bool
        ComponentStop(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double const delayInSecond) -> bool
        ComponentStop(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentStop(self, *args)

    def ComponentResume(self, *args):
        """
        ComponentResume(mtsManagerComponentServices self, std::string const & componentName, double const delayInSecond=0.0) -> bool
        ComponentResume(mtsManagerComponentServices self, std::string const & componentName) -> bool
        ComponentResume(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double const delayInSecond=0.0) -> bool
        ComponentResume(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentResume(self, *args)

    def ComponentGetState(self, *args):
        """
        ComponentGetState(mtsManagerComponentServices self, mtsDescriptionComponent component) -> mtsComponentState
        ComponentGetState(mtsManagerComponentServices self, std::string const componentName) -> std::string
        ComponentGetState(mtsManagerComponentServices self, std::string const & processName, std::string const componentName) -> std::string
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_ComponentGetState(self, *args)

    def GetNamesOfProcesses(self):
        """GetNamesOfProcesses(mtsManagerComponentServices self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetNamesOfProcesses(self)

    def GetNamesOfComponents(self, *args):
        """GetNamesOfComponents(mtsManagerComponentServices self, std::string const & processName) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetNamesOfComponents(self, *args)

    def GetNamesOfInterfaces(self, *args):
        """GetNamesOfInterfaces(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetNamesOfInterfaces(self, *args)

    def GetListOfConnections(self):
        """GetListOfConnections(mtsManagerComponentServices self) -> mtsDescriptionConnectionVec"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetListOfConnections(self)

    def GetListOfComponentClasses(self, *args):
        """
        GetListOfComponentClasses(mtsManagerComponentServices self) -> mtsDescriptionComponentClassVec
        GetListOfComponentClasses(mtsManagerComponentServices self, std::string const & processName) -> mtsDescriptionComponentClassVec
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetListOfComponentClasses(self, *args)

    def GetInterfaceProvidedDescription(self, *args):
        """GetInterfaceProvidedDescription(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & interfaceName) -> mtsInterfaceProvidedDescription"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetInterfaceProvidedDescription(self, *args)

    def GetInterfaceRequiredDescription(self, *args):
        """GetInterfaceRequiredDescription(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & interfaceName) -> mtsInterfaceRequiredDescription"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetInterfaceRequiredDescription(self, *args)

    def Load(self, *args):
        """
        Load(mtsManagerComponentServices self, std::string const & fileName) -> bool
        Load(mtsManagerComponentServices self, std::string const & processName, std::string const & fileName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_Load(self, *args)

    def EnableLogForwarding(self, *args):
        """
        EnableLogForwarding(mtsManagerComponentServices self)
        EnableLogForwarding(mtsManagerComponentServices self, mtsStringVector processNames)
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_EnableLogForwarding(self, *args)

    def DisableLogForwarding(self, *args):
        """
        DisableLogForwarding(mtsManagerComponentServices self)
        DisableLogForwarding(mtsManagerComponentServices self, mtsStringVector processNames)
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_DisableLogForwarding(self, *args)

    def GetLogForwardingStates(self, *args):
        """
        GetLogForwardingStates(mtsManagerComponentServices self, stdCharVec & states)
        GetLogForwardingStates(mtsManagerComponentServices self, mtsStringVector processNames, stdCharVec & states)
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetLogForwardingStates(self, *args)

    def GetAbsoluteTimeDiffs(self, *args):
        """GetAbsoluteTimeDiffs(mtsManagerComponentServices self, mtsStringVector processNames) -> mtsDoubleVector"""
        return _cisstMultiTaskPython.mtsManagerComponentServices_GetAbsoluteTimeDiffs(self, *args)

    def WaitFor(self, *args):
        """
        WaitFor(mtsManagerComponentServices self, std::string const & processName, double timeoutInSec=-1.0) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, double timeoutInSec=-1.0) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & state, 
            double timeoutInSec=-1.0) -> bool
        WaitFor(mtsManagerComponentServices self, std::string const & processName, std::string const & componentName, std::string const & state) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerComponentServices_WaitFor(self, *args)

mtsManagerComponentServices_swigregister = _cisstMultiTaskPython.mtsManagerComponentServices_swigregister
mtsManagerComponentServices_swigregister(mtsManagerComponentServices)

def mtsManagerComponentServices_ClassServices():
  """mtsManagerComponentServices_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsManagerComponentServices_ClassServices()

class mtsTask(mtsComponent):
    """Proxy of C++ mtsTask class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTask_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTask_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTask_ClassServices()

    ClassServices = staticmethod(ClassServices)
    UnknownException = _swig_property(_cisstMultiTaskPython.mtsTask_UnknownException_get, _cisstMultiTaskPython.mtsTask_UnknownException_set)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTask
    __del__ = lambda self : None;
    def OnStartupException(self, *args):
        """OnStartupException(mtsTask self, std::exception const & excp)"""
        return _cisstMultiTaskPython.mtsTask_OnStartupException(self, *args)

    def Run(self):
        """Run(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_Run(self)

    def OnRunException(self, *args):
        """OnRunException(mtsTask self, std::exception const & excp)"""
        return _cisstMultiTaskPython.mtsTask_OnRunException(self, *args)

    def Configure(self, MARKED_AS_UNUSEDfilename=""):
        """
        Configure(mtsTask self, std::string const & MARKED_AS_UNUSEDfilename="")
        Configure(mtsTask self)
        """
        return _cisstMultiTaskPython.mtsTask_Configure(self, MARKED_AS_UNUSEDfilename)

    def SetInitializationDelay(self, *args):
        """SetInitializationDelay(mtsTask self, double delay)"""
        return _cisstMultiTaskPython.mtsTask_SetInitializationDelay(self, *args)

    def Create(self, *args):
        """
        Create(mtsTask self, void * data)
        Create(mtsTask self)
        """
        return _cisstMultiTaskPython.mtsTask_Create(self, *args)

    def GetAveragePeriod(self):
        """GetAveragePeriod(mtsTask self) -> double"""
        return _cisstMultiTaskPython.mtsTask_GetAveragePeriod(self)

    def GetDefaultStateTableName(self):
        """GetDefaultStateTableName(mtsTask self) -> std::string const"""
        return _cisstMultiTaskPython.mtsTask_GetDefaultStateTableName(self)

    def GetDefaultStateTable(self):
        """GetDefaultStateTable(mtsTask self) -> mtsStateTable *"""
        return _cisstMultiTaskPython.mtsTask_GetDefaultStateTable(self)

    def AddInterfaceRequiredWithoutSystemEventHandlers(self, *args):
        """
        AddInterfaceRequiredWithoutSystemEventHandlers(mtsTask self, std::string const & interfaceRequiredName, mtsRequiredType required=MTS_REQUIRED) -> mtsInterfaceRequired
        AddInterfaceRequiredWithoutSystemEventHandlers(mtsTask self, std::string const & interfaceRequiredName) -> mtsInterfaceRequired
        """
        return _cisstMultiTaskPython.mtsTask_AddInterfaceRequiredWithoutSystemEventHandlers(self, *args)

    def AddInterfaceProvidedWithoutSystemEvents(self, *args):
        """
        AddInterfaceProvidedWithoutSystemEvents(mtsTask self, std::string const & newInterfaceName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY, 
            bool isProxy=False) -> mtsInterfaceProvided
        AddInterfaceProvidedWithoutSystemEvents(mtsTask self, std::string const & newInterfaceName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY) -> mtsInterfaceProvided
        AddInterfaceProvidedWithoutSystemEvents(mtsTask self, std::string const & newInterfaceName) -> mtsInterfaceProvided
        """
        return _cisstMultiTaskPython.mtsTask_AddInterfaceProvidedWithoutSystemEvents(self, *args)

    def WaitToStart(self, *args):
        """WaitToStart(mtsTask self, double timeout) -> bool"""
        return _cisstMultiTaskPython.mtsTask_WaitToStart(self, *args)

    def WaitToTerminate(self, *args):
        """WaitToTerminate(mtsTask self, double timeout) -> bool"""
        return _cisstMultiTaskPython.mtsTask_WaitToTerminate(self, *args)

    def WaitForWakeup(self):
        """WaitForWakeup(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_WaitForWakeup(self)

    def Wakeup(self):
        """Wakeup(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_Wakeup(self)

    def ProcessManagerCommandsIfNotActive(self):
        """ProcessManagerCommandsIfNotActive(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_ProcessManagerCommandsIfNotActive(self)

    def CheckForOwnThread(self):
        """CheckForOwnThread(mtsTask self) -> bool"""
        return _cisstMultiTaskPython.mtsTask_CheckForOwnThread(self)

    def IsPeriodic(self):
        """IsPeriodic(mtsTask self) -> bool"""
        return _cisstMultiTaskPython.mtsTask_IsPeriodic(self)

    def IsOverranPeriod(self):
        """IsOverranPeriod(mtsTask self) -> bool"""
        return _cisstMultiTaskPython.mtsTask_IsOverranPeriod(self)

    def ResetOverranPeriod(self):
        """ResetOverranPeriod(mtsTask self)"""
        return _cisstMultiTaskPython.mtsTask_ResetOverranPeriod(self)

mtsTask_swigregister = _cisstMultiTaskPython.mtsTask_swigregister
mtsTask_swigregister(mtsTask)

def mtsTask_ClassServices():
  """mtsTask_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTask_ClassServices()

class mtsTaskContinuousConstructorArg(mtsGenericObject):
    """Proxy of C++ mtsTaskContinuousConstructorArg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_ClassServices()

    ClassServices = staticmethod(ClassServices)
    STATE_TABLE_DEFAULT_SIZE = _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_STATE_TABLE_DEFAULT_SIZE
    Name = _swig_property(_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_Name_get, _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_Name_set)
    StateTableSize = _swig_property(_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_StateTableSize_get, _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_StateTableSize_set)
    NewThread = _swig_property(_cisstMultiTaskPython.mtsTaskContinuousConstructorArg_NewThread_get, _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_NewThread_set)
    def __init__(self, *args): 
        """
        __init__(mtsTaskContinuousConstructorArg self) -> mtsTaskContinuousConstructorArg
        __init__(mtsTaskContinuousConstructorArg self, std::string const & name, unsigned int sizeStateTable=STATE_TABLE_DEFAULT_SIZE, bool newThread=True) -> mtsTaskContinuousConstructorArg
        __init__(mtsTaskContinuousConstructorArg self, std::string const & name, unsigned int sizeStateTable=STATE_TABLE_DEFAULT_SIZE) -> mtsTaskContinuousConstructorArg
        __init__(mtsTaskContinuousConstructorArg self, std::string const & name) -> mtsTaskContinuousConstructorArg
        __init__(mtsTaskContinuousConstructorArg self, mtsTaskContinuousConstructorArg other) -> mtsTaskContinuousConstructorArg
        """
        this = _cisstMultiTaskPython.new_mtsTaskContinuousConstructorArg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskContinuousConstructorArg
    __del__ = lambda self : None;
mtsTaskContinuousConstructorArg_swigregister = _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_swigregister
mtsTaskContinuousConstructorArg_swigregister(mtsTaskContinuousConstructorArg)

def mtsTaskContinuousConstructorArg_ClassServices():
  """mtsTaskContinuousConstructorArg_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTaskContinuousConstructorArg_ClassServices()

class mtsTaskContinuous(mtsTask):
    """Proxy of C++ mtsTaskContinuous class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskContinuous_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTaskContinuous_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskContinuous_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskContinuous
    __del__ = lambda self : None;
    def Create(self, data=None):
        """
        Create(mtsTaskContinuous self, void * data=None)
        Create(mtsTaskContinuous self)
        """
        return _cisstMultiTaskPython.mtsTaskContinuous_Create(self, data)

mtsTaskContinuous_swigregister = _cisstMultiTaskPython.mtsTaskContinuous_swigregister
mtsTaskContinuous_swigregister(mtsTaskContinuous)

def mtsTaskContinuous_ClassServices():
  """mtsTaskContinuous_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTaskContinuous_ClassServices()

class mtsTaskMain(mtsTaskContinuous):
    """Proxy of C++ mtsTaskMain class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskMain_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTaskMain_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskMain_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskMain
    __del__ = lambda self : None;
mtsTaskMain_swigregister = _cisstMultiTaskPython.mtsTaskMain_swigregister
mtsTaskMain_swigregister(mtsTaskMain)

def mtsTaskMain_ClassServices():
  """mtsTaskMain_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTaskMain_ClassServices()

class mtsTaskPeriodicConstructorArg(mtsGenericObject):
    """Proxy of C++ mtsTaskPeriodicConstructorArg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_ClassServices()

    ClassServices = staticmethod(ClassServices)
    STATE_TABLE_DEFAULT_SIZE = _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_STATE_TABLE_DEFAULT_SIZE
    Name = _swig_property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Name_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Name_set)
    Period = _swig_property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Period_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_Period_set)
    IsHardRealTime = _swig_property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_IsHardRealTime_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_IsHardRealTime_set)
    StateTableSize = _swig_property(_cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_StateTableSize_get, _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_StateTableSize_set)
    def __init__(self, *args): 
        """
        __init__(mtsTaskPeriodicConstructorArg self) -> mtsTaskPeriodicConstructorArg
        __init__(mtsTaskPeriodicConstructorArg self, std::string const & name, double period, bool isHardRealTime=False, unsigned int sizeStateTable=STATE_TABLE_DEFAULT_SIZE) -> mtsTaskPeriodicConstructorArg
        __init__(mtsTaskPeriodicConstructorArg self, std::string const & name, double period, bool isHardRealTime=False) -> mtsTaskPeriodicConstructorArg
        __init__(mtsTaskPeriodicConstructorArg self, std::string const & name, double period) -> mtsTaskPeriodicConstructorArg
        __init__(mtsTaskPeriodicConstructorArg self, mtsTaskPeriodicConstructorArg other) -> mtsTaskPeriodicConstructorArg
        """
        this = _cisstMultiTaskPython.new_mtsTaskPeriodicConstructorArg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskPeriodicConstructorArg
    __del__ = lambda self : None;
mtsTaskPeriodicConstructorArg_swigregister = _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_swigregister
mtsTaskPeriodicConstructorArg_swigregister(mtsTaskPeriodicConstructorArg)

def mtsTaskPeriodicConstructorArg_ClassServices():
  """mtsTaskPeriodicConstructorArg_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTaskPeriodicConstructorArg_ClassServices()

class mtsTaskPeriodic(mtsTaskContinuous):
    """Proxy of C++ mtsTaskPeriodic class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskPeriodic_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTaskPeriodic_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskPeriodic_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskPeriodic
    __del__ = lambda self : None;
    def GetPeriodicity(self):
        """GetPeriodicity(mtsTaskPeriodic self) -> double"""
        return _cisstMultiTaskPython.mtsTaskPeriodic_GetPeriodicity(self)

mtsTaskPeriodic_swigregister = _cisstMultiTaskPython.mtsTaskPeriodic_swigregister
mtsTaskPeriodic_swigregister(mtsTaskPeriodic)

def mtsTaskPeriodic_ClassServices():
  """mtsTaskPeriodic_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTaskPeriodic_ClassServices()

class mtsTaskFromSignal(mtsTaskContinuous):
    """Proxy of C++ mtsTaskFromSignal class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsTaskFromSignal_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsTaskFromSignal_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsTaskFromSignal_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsTaskFromSignal
    __del__ = lambda self : None;
    def AddInterfaceRequiredWithoutSystemEventHandlers(self, *args):
        """
        AddInterfaceRequiredWithoutSystemEventHandlers(mtsTaskFromSignal self, std::string const & interfaceRequiredName, mtsRequiredType required=MTS_REQUIRED) -> mtsInterfaceRequired
        AddInterfaceRequiredWithoutSystemEventHandlers(mtsTaskFromSignal self, std::string const & interfaceRequiredName) -> mtsInterfaceRequired
        """
        return _cisstMultiTaskPython.mtsTaskFromSignal_AddInterfaceRequiredWithoutSystemEventHandlers(self, *args)

    def AddInterfaceProvidedWithoutSystemEvents(self, *args):
        """
        AddInterfaceProvidedWithoutSystemEvents(mtsTaskFromSignal self, std::string const & newInterfaceName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY, 
            bool isProxy=False) -> mtsInterfaceProvided
        AddInterfaceProvidedWithoutSystemEvents(mtsTaskFromSignal self, std::string const & newInterfaceName, mtsInterfaceQueueingPolicy queueingPolicy=MTS_COMPONENT_POLICY) -> mtsInterfaceProvided
        AddInterfaceProvidedWithoutSystemEvents(mtsTaskFromSignal self, std::string const & newInterfaceName) -> mtsInterfaceProvided
        """
        return _cisstMultiTaskPython.mtsTaskFromSignal_AddInterfaceProvidedWithoutSystemEvents(self, *args)

mtsTaskFromSignal_swigregister = _cisstMultiTaskPython.mtsTaskFromSignal_swigregister
mtsTaskFromSignal_swigregister(mtsTaskFromSignal)

def mtsTaskFromSignal_ClassServices():
  """mtsTaskFromSignal_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsTaskFromSignal_ClassServices()

class mtsManagerLocalInterface(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ mtsManagerLocalInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsManagerLocalInterface_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsManagerLocalInterface_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsManagerLocalInterface_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def CreateComponentProxy(self, *args):
        """
        CreateComponentProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & listenerID="") -> bool
        CreateComponentProxy(mtsManagerLocalInterface self, std::string const & componentProxyName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_CreateComponentProxy(self, *args)

    def RemoveComponentProxy(self, *args):
        """
        RemoveComponentProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & listenerID="") -> bool
        RemoveComponentProxy(mtsManagerLocalInterface self, std::string const & componentProxyName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_RemoveComponentProxy(self, *args)

    def CreateInterfaceProvidedProxy(self, *args):
        """
        CreateInterfaceProvidedProxy(mtsManagerLocalInterface self, std::string const & serverComponentProxyName, mtsInterfaceProvidedDescription providedInterfaceDescription, 
            std::string const & listenerID="") -> bool
        CreateInterfaceProvidedProxy(mtsManagerLocalInterface self, std::string const & serverComponentProxyName, mtsInterfaceProvidedDescription providedInterfaceDescription) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_CreateInterfaceProvidedProxy(self, *args)

    def CreateInterfaceRequiredProxy(self, *args):
        """
        CreateInterfaceRequiredProxy(mtsManagerLocalInterface self, std::string const & clientComponentProxyName, mtsInterfaceRequiredDescription requiredInterfaceDescription, 
            std::string const & listenerID="") -> bool
        CreateInterfaceRequiredProxy(mtsManagerLocalInterface self, std::string const & clientComponentProxyName, mtsInterfaceRequiredDescription requiredInterfaceDescription) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_CreateInterfaceRequiredProxy(self, *args)

    def RemoveInterfaceProvidedProxy(self, *args):
        """
        RemoveInterfaceProvidedProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & providedInterfaceProxyName, 
            std::string const & listenerID="") -> bool
        RemoveInterfaceProvidedProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & providedInterfaceProxyName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_RemoveInterfaceProvidedProxy(self, *args)

    def RemoveInterfaceRequiredProxy(self, *args):
        """
        RemoveInterfaceRequiredProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & requiredInterfaceProxyName, 
            std::string const & listenerID="") -> bool
        RemoveInterfaceRequiredProxy(mtsManagerLocalInterface self, std::string const & componentProxyName, std::string const & requiredInterfaceProxyName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_RemoveInterfaceRequiredProxy(self, *args)

    def ConnectServerSideInterface(self, *args):
        """
        ConnectServerSideInterface(mtsManagerLocalInterface self, mtsDescriptionConnection description, std::string const & listenerID="") -> bool
        ConnectServerSideInterface(mtsManagerLocalInterface self, mtsDescriptionConnection description) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_ConnectServerSideInterface(self, *args)

    def ConnectClientSideInterface(self, *args):
        """
        ConnectClientSideInterface(mtsManagerLocalInterface self, mtsDescriptionConnection description, std::string const & listenerID="") -> bool
        ConnectClientSideInterface(mtsManagerLocalInterface self, mtsDescriptionConnection description) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_ConnectClientSideInterface(self, *args)

    def GetProcessName(self, listenerID=""):
        """
        GetProcessName(mtsManagerLocalInterface self, std::string const & listenerID="") -> std::string const
        GetProcessName(mtsManagerLocalInterface self) -> std::string const
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetProcessName(self, listenerID)

    def GetNamesOfCommands(self, *args):
        """
        GetNamesOfCommands(mtsManagerLocalInterface self, mtsStringVector namesOfCommands, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & listenerID="")
        GetNamesOfCommands(mtsManagerLocalInterface self, mtsStringVector namesOfCommands, std::string const & componentName, std::string const & providedInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfCommands(self, *args)

    def GetNamesOfEventGenerators(self, *args):
        """
        GetNamesOfEventGenerators(mtsManagerLocalInterface self, mtsStringVector namesOfEventGenerators, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & listenerID="")
        GetNamesOfEventGenerators(mtsManagerLocalInterface self, mtsStringVector namesOfEventGenerators, std::string const & componentName, std::string const & providedInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfEventGenerators(self, *args)

    def GetNamesOfFunctions(self, *args):
        """
        GetNamesOfFunctions(mtsManagerLocalInterface self, mtsStringVector namesOfFunctions, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & listenerID="")
        GetNamesOfFunctions(mtsManagerLocalInterface self, mtsStringVector namesOfFunctions, std::string const & componentName, std::string const & requiredInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfFunctions(self, *args)

    def GetNamesOfEventHandlers(self, *args):
        """
        GetNamesOfEventHandlers(mtsManagerLocalInterface self, mtsStringVector namesOfEventHandlers, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & listenerID="")
        GetNamesOfEventHandlers(mtsManagerLocalInterface self, mtsStringVector namesOfEventHandlers, std::string const & componentName, std::string const & requiredInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetNamesOfEventHandlers(self, *args)

    def GetDescriptionOfCommand(self, *args):
        """
        GetDescriptionOfCommand(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & commandName, std::string const & listenerID="")
        GetDescriptionOfCommand(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & commandName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfCommand(self, *args)

    def GetDescriptionOfEventGenerator(self, *args):
        """
        GetDescriptionOfEventGenerator(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & eventGeneratorName, std::string const & listenerID="")
        GetDescriptionOfEventGenerator(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & eventGeneratorName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfEventGenerator(self, *args)

    def GetDescriptionOfFunction(self, *args):
        """
        GetDescriptionOfFunction(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & functionName, std::string const & listenerID="")
        GetDescriptionOfFunction(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & functionName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfFunction(self, *args)

    def GetDescriptionOfEventHandler(self, *args):
        """
        GetDescriptionOfEventHandler(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & eventHandlerName, std::string const & listenerID="")
        GetDescriptionOfEventHandler(mtsManagerLocalInterface self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & eventHandlerName)
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetDescriptionOfEventHandler(self, *args)

    def GetInterfaceProvidedDescription(self, *args):
        """
        GetInterfaceProvidedDescription(mtsManagerLocalInterface self, std::string const & serverComponentName, std::string const & providedInterfaceName, 
            mtsInterfaceProvidedDescription providedInterfaceDescription, std::string const & listenerID="") -> bool
        GetInterfaceProvidedDescription(mtsManagerLocalInterface self, std::string const & serverComponentName, std::string const & providedInterfaceName, 
            mtsInterfaceProvidedDescription providedInterfaceDescription) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetInterfaceProvidedDescription(self, *args)

    def GetInterfaceRequiredDescription(self, *args):
        """
        GetInterfaceRequiredDescription(mtsManagerLocalInterface self, std::string const & componentName, std::string const & requiredInterfaceName, mtsInterfaceRequiredDescription requiredInterfaceDescription, 
            std::string const & listenerID="") -> bool
        GetInterfaceRequiredDescription(mtsManagerLocalInterface self, std::string const & componentName, std::string const & requiredInterfaceName, mtsInterfaceRequiredDescription requiredInterfaceDescription) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocalInterface_GetInterfaceRequiredDescription(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsManagerLocalInterface
    __del__ = lambda self : None;
mtsManagerLocalInterface_swigregister = _cisstMultiTaskPython.mtsManagerLocalInterface_swigregister
mtsManagerLocalInterface_swigregister(mtsManagerLocalInterface)

def mtsManagerLocalInterface_ClassServices():
  """mtsManagerLocalInterface_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsManagerLocalInterface_ClassServices()

class mtsManagerLocal(mtsManagerLocalInterface):
    """Proxy of C++ mtsManagerLocal class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsManagerLocal_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsManagerLocal_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsManagerLocal_ClassServices()

    ClassServices = staticmethod(ClassServices)
    LCM_CONFIG_STANDALONE = _cisstMultiTaskPython.mtsManagerLocal_LCM_CONFIG_STANDALONE
    LCM_CONFIG_NETWORKED = _cisstMultiTaskPython.mtsManagerLocal_LCM_CONFIG_NETWORKED
    LCM_CONFIG_NETWORKED_WITH_GCM = _cisstMultiTaskPython.mtsManagerLocal_LCM_CONFIG_NETWORKED_WITH_GCM
    def LogDispatcher(*args):
        """LogDispatcher(char const * str, int len)"""
        return _cisstMultiTaskPython.mtsManagerLocal_LogDispatcher(*args)

    LogDispatcher = staticmethod(LogDispatcher)
    def SetLogForwarding(*args):
        """SetLogForwarding(bool activate)"""
        return _cisstMultiTaskPython.mtsManagerLocal_SetLogForwarding(*args)

    SetLogForwarding = staticmethod(SetLogForwarding)
    def GetLogForwardingState(*args):
        """
        GetLogForwardingState(bool & state)
        GetLogForwardingState() -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetLogForwardingState(*args)

    GetLogForwardingState = staticmethod(GetLogForwardingState)
    def IsLogForwardingEnabled():
        """IsLogForwardingEnabled() -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_IsLogForwardingEnabled()

    IsLogForwardingEnabled = staticmethod(IsLogForwardingEnabled)
    def IsLogAllowed():
        """IsLogAllowed() -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_IsLogAllowed()

    IsLogAllowed = staticmethod(IsLogAllowed)
    def CreateComponentDynamically(self, *args):
        """CreateComponentDynamically(mtsManagerLocal self, std::string const & className, std::string const & componentName, std::string const & constructorArgSerialized) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateComponentDynamically(self, *args)

    def AddComponent(self, *args):
        """AddComponent(mtsManagerLocal self, mtsComponent component) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_AddComponent(self, *args)

    def RemoveComponent(self, *args):
        """
        RemoveComponent(mtsManagerLocal self, mtsComponent component) -> bool
        RemoveComponent(mtsManagerLocal self, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_RemoveComponent(self, *args)

    def GetComponent(self, *args):
        """GetComponent(mtsManagerLocal self, std::string const & componentName) -> mtsComponent"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetComponent(self, *args)

    def GetComponentAsTask(self, *args):
        """GetComponentAsTask(mtsManagerLocal self, std::string const & componentName) -> mtsTask"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetComponentAsTask(self, *args)

    def FindComponent(self, *args):
        """FindComponent(mtsManagerLocal self, std::string const & componentName) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_FindComponent(self, *args)

    def WaitForStateAll(self, *args):
        """
        WaitForStateAll(mtsManagerLocal self, mtsComponentState desiredState, double timeout=3.0*cmn_minute) -> bool
        WaitForStateAll(mtsManagerLocal self, mtsComponentState desiredState) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_WaitForStateAll(self, *args)

    def CreateAll(self):
        """CreateAll(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateAll(self)

    def CreateAllAndWait(self, *args):
        """CreateAllAndWait(mtsManagerLocal self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_CreateAllAndWait(self, *args)

    def StartAll(self):
        """StartAll(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_StartAll(self)

    def StartAllAndWait(self, *args):
        """StartAllAndWait(mtsManagerLocal self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_StartAllAndWait(self, *args)

    def KillAll(self):
        """KillAll(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_KillAll(self)

    def KillAllAndWait(self, *args):
        """KillAllAndWait(mtsManagerLocal self, double timeoutInSeconds) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_KillAllAndWait(self, *args)

    def Cleanup(self):
        """Cleanup(mtsManagerLocal self)"""
        return _cisstMultiTaskPython.mtsManagerLocal_Cleanup(self)

    def Connect(self, *args):
        """
        Connect(mtsManagerLocal self, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        Connect(mtsManagerLocal self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName, 
            unsigned int const retryCount=10) -> bool
        Connect(mtsManagerLocal self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_Connect(self, *args)

    def Disconnect(self, *args):
        """
        Disconnect(mtsManagerLocal self, ConnectionIDType const connectionID) -> bool
        Disconnect(mtsManagerLocal self, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        Disconnect(mtsManagerLocal self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> bool
        """
        return _cisstMultiTaskPython.mtsManagerLocal_Disconnect(self, *args)

    def GetInstance(*args):
        """
        GetInstance() -> mtsManagerLocal
        GetInstance(std::string const & globalComponentManagerIP, std::string const & thisProcessName="", 
            std::string const & thisProcessIP="") -> mtsManagerLocal
        GetInstance(std::string const & globalComponentManagerIP, std::string const & thisProcessName="") -> mtsManagerLocal
        GetInstance(std::string const & globalComponentManagerIP) -> mtsManagerLocal
        GetInstance(mtsManagerGlobal & globalComponentManager) -> mtsManagerLocal
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetInstance(*args)

    GetInstance = staticmethod(GetInstance)
    def GetNamesOfComponents(self, *args):
        """
        GetNamesOfComponents(mtsManagerLocal self) -> mtsStringVector
        GetNamesOfComponents(mtsManagerLocal self, mtsStringVector namesOfComponents)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfComponents(self, *args)

    def GetTimeServer(self):
        """GetTimeServer(mtsManagerLocal self) -> osaTimeServer"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetTimeServer(self)

    def GetProcessName(self, MARKED_AS_UNUSEDlistenerID=""):
        """
        GetProcessName(mtsManagerLocal self, std::string const & MARKED_AS_UNUSEDlistenerID="") -> std::string const
        GetProcessName(mtsManagerLocal self) -> std::string const
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetProcessName(self, MARKED_AS_UNUSEDlistenerID)

    def GetConfiguration(self):
        """GetConfiguration(mtsManagerLocal self) -> mtsManagerLocal::ConfigurationType"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetConfiguration(self)

    def IsGCMActive(self):
        """IsGCMActive(mtsManagerLocal self) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_IsGCMActive(self)

    def SetMainThreadId(self, *args):
        """
        SetMainThreadId(mtsManagerLocal self)
        SetMainThreadId(mtsManagerLocal self, osaThreadId const & threadId)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_SetMainThreadId(self, *args)

    def GetMainThreadId(self):
        """GetMainThreadId(mtsManagerLocal self) -> osaThreadId"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetMainThreadId(self)

    def PushCurrentMainTask(self, *args):
        """PushCurrentMainTask(mtsManagerLocal self, mtsTaskContinuous cur)"""
        return _cisstMultiTaskPython.mtsManagerLocal_PushCurrentMainTask(self, *args)

    def PopCurrentMainTask(self):
        """PopCurrentMainTask(mtsManagerLocal self) -> mtsTaskContinuous"""
        return _cisstMultiTaskPython.mtsManagerLocal_PopCurrentMainTask(self)

    def GetCurrentMainTask(self):
        """GetCurrentMainTask(mtsManagerLocal self) -> mtsTaskContinuous"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetCurrentMainTask(self)

    def GetNamesOfCommands(self, *args):
        """
        GetNamesOfCommands(mtsManagerLocal self, mtsStringVector namesOfCommands, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetNamesOfCommands(mtsManagerLocal self, mtsStringVector namesOfCommands, std::string const & componentName, std::string const & providedInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfCommands(self, *args)

    def GetNamesOfEventGenerators(self, *args):
        """
        GetNamesOfEventGenerators(mtsManagerLocal self, mtsStringVector namesOfEventGenerators, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetNamesOfEventGenerators(mtsManagerLocal self, mtsStringVector namesOfEventGenerators, std::string const & componentName, std::string const & providedInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfEventGenerators(self, *args)

    def GetNamesOfFunctions(self, *args):
        """
        GetNamesOfFunctions(mtsManagerLocal self, mtsStringVector namesOfFunctions, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetNamesOfFunctions(mtsManagerLocal self, mtsStringVector namesOfFunctions, std::string const & componentName, std::string const & requiredInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfFunctions(self, *args)

    def GetNamesOfEventHandlers(self, *args):
        """
        GetNamesOfEventHandlers(mtsManagerLocal self, mtsStringVector namesOfEventHandlers, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetNamesOfEventHandlers(mtsManagerLocal self, mtsStringVector namesOfEventHandlers, std::string const & componentName, std::string const & requiredInterfaceName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetNamesOfEventHandlers(self, *args)

    def GetDescriptionOfCommand(self, *args):
        """
        GetDescriptionOfCommand(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & commandName, std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetDescriptionOfCommand(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & commandName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfCommand(self, *args)

    def GetDescriptionOfEventGenerator(self, *args):
        """
        GetDescriptionOfEventGenerator(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & eventGeneratorName, std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetDescriptionOfEventGenerator(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & providedInterfaceName, 
            std::string const & eventGeneratorName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfEventGenerator(self, *args)

    def GetDescriptionOfFunction(self, *args):
        """
        GetDescriptionOfFunction(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & functionName, std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetDescriptionOfFunction(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & functionName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfFunction(self, *args)

    def GetDescriptionOfEventHandler(self, *args):
        """
        GetDescriptionOfEventHandler(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & eventHandlerName, std::string const & MARKED_AS_UNUSEDlistenerID="")
        GetDescriptionOfEventHandler(mtsManagerLocal self, std::string & description, std::string const & componentName, std::string const & requiredInterfaceName, 
            std::string const & eventHandlerName)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetDescriptionOfEventHandler(self, *args)

    def GetIPAddress(self):
        """GetIPAddress(mtsManagerLocal self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetIPAddress(self)

    def GetIPAddressList(*args):
        """
        GetIPAddressList() -> mtsStringVector
        GetIPAddressList(mtsStringVector ipAddresses)
        """
        return _cisstMultiTaskPython.mtsManagerLocal_GetIPAddressList(*args)

    GetIPAddressList = staticmethod(GetIPAddressList)
    def GetName(self):
        """GetName(mtsManagerLocal self) -> std::string const"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetName(self)

    def SetInterfaceProvidedProxyAccessInfo(self, *args):
        """SetInterfaceProvidedProxyAccessInfo(mtsManagerLocal self, ConnectionIDType const connectionID, std::string const & endpointInfo) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_SetInterfaceProvidedProxyAccessInfo(self, *args)

    def GetGCMProcTimeSyncInfo(self, *args):
        """GetGCMProcTimeSyncInfo(mtsManagerLocal self, mtsStringVector processNames, mtsDoubleVector timeOffsets) -> bool"""
        return _cisstMultiTaskPython.mtsManagerLocal_GetGCMProcTimeSyncInfo(self, *args)

    def ToStreamDot(self, *args):
        """ToStreamDot(mtsManagerLocal self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsManagerLocal_ToStreamDot(self, *args)

    def UpdateFromC(self):
        comps = mtsManagerLocal.GetNamesOfComponents(self)
        for comp in comps:
            self.__dict__[comp] = mtsManagerLocal.GetComponent(self, comp)
            self.__dict__[comp].UpdateFromC()

mtsManagerLocal_swigregister = _cisstMultiTaskPython.mtsManagerLocal_swigregister
mtsManagerLocal_swigregister(mtsManagerLocal)

def mtsManagerLocal_ClassServices():
  """mtsManagerLocal_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsManagerLocal_ClassServices()

def mtsManagerLocal_LogDispatcher(*args):
  """mtsManagerLocal_LogDispatcher(char const * str, int len)"""
  return _cisstMultiTaskPython.mtsManagerLocal_LogDispatcher(*args)

def mtsManagerLocal_SetLogForwarding(*args):
  """mtsManagerLocal_SetLogForwarding(bool activate)"""
  return _cisstMultiTaskPython.mtsManagerLocal_SetLogForwarding(*args)

def mtsManagerLocal_GetLogForwardingState(*args):
  """
    GetLogForwardingState(bool & state)
    mtsManagerLocal_GetLogForwardingState() -> bool
    """
  return _cisstMultiTaskPython.mtsManagerLocal_GetLogForwardingState(*args)

def mtsManagerLocal_IsLogForwardingEnabled():
  """mtsManagerLocal_IsLogForwardingEnabled() -> bool"""
  return _cisstMultiTaskPython.mtsManagerLocal_IsLogForwardingEnabled()

def mtsManagerLocal_IsLogAllowed():
  """mtsManagerLocal_IsLogAllowed() -> bool"""
  return _cisstMultiTaskPython.mtsManagerLocal_IsLogAllowed()
mtsManagerLocal.ProcessNameOfLCMDefault = _cisstMultiTaskPython.cvar.mtsManagerLocal_ProcessNameOfLCMDefault
mtsManagerLocal.ProcessNameOfLCMWithGCM = _cisstMultiTaskPython.cvar.mtsManagerLocal_ProcessNameOfLCMWithGCM

def mtsManagerLocal_GetInstance(*args):
  """
    GetInstance() -> mtsManagerLocal
    GetInstance(std::string const & globalComponentManagerIP, std::string const & thisProcessName="", 
        std::string const & thisProcessIP="") -> mtsManagerLocal
    GetInstance(std::string const & globalComponentManagerIP, std::string const & thisProcessName="") -> mtsManagerLocal
    GetInstance(std::string const & globalComponentManagerIP) -> mtsManagerLocal
    mtsManagerLocal_GetInstance(mtsManagerGlobal & globalComponentManager) -> mtsManagerLocal
    """
  return _cisstMultiTaskPython.mtsManagerLocal_GetInstance(*args)

def mtsManagerLocal_GetIPAddressList(*args):
  """
    GetIPAddressList() -> mtsStringVector
    mtsManagerLocal_GetIPAddressList(mtsStringVector ipAddresses)
    """
  return _cisstMultiTaskPython.mtsManagerLocal_GetIPAddressList(*args)

class mtsCollectorBase(mtsTaskFromSignal):
    """Proxy of C++ mtsCollectorBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    COLLECTOR_FILE_FORMAT_PLAIN_TEXT = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_PLAIN_TEXT
    COLLECTOR_FILE_FORMAT_BINARY = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_BINARY
    COLLECTOR_FILE_FORMAT_CSV = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_CSV
    COLLECTOR_FILE_FORMAT_UNDEFINED = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FORMAT_UNDEFINED
    COLLECTOR_FILE_FLOATING_NOTATION_NONE = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FLOATING_NOTATION_NONE
    COLLECTOR_FILE_FLOATING_NOTATION_FIXED = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FLOATING_NOTATION_FIXED
    COLLECTOR_FILE_FLOATING_NOTATION_SCIENTIFIC = _cisstMultiTaskPython.mtsCollectorBase_COLLECTOR_FILE_FLOATING_NOTATION_SCIENTIFIC
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCollectorBase
    __del__ = lambda self : None;
    def GetDefaultOutputName(self):
        """GetDefaultOutputName(mtsCollectorBase self) -> std::string"""
        return _cisstMultiTaskPython.mtsCollectorBase_GetDefaultOutputName(self)

    def SetOutput(self, *args):
        """
        SetOutput(mtsCollectorBase self, std::string const & fileName, mtsCollectorBase::CollectorFileFormat const fileFormat)
        SetOutput(mtsCollectorBase self, ostream outputStream, mtsCollectorBase::CollectorFileFormat const fileFormat)
        SetOutput(mtsCollectorBase self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutput(self, *args)

    def SetOutputToDefault(self, *args):
        """
        SetOutputToDefault(mtsCollectorBase self, mtsCollectorBase::CollectorFileFormat const fileFormat)
        SetOutputToDefault(mtsCollectorBase self)
        """
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputToDefault(self, *args)

    def CloseOutput(self):
        """CloseOutput(mtsCollectorBase self)"""
        return _cisstMultiTaskPython.mtsCollectorBase_CloseOutput(self)

    def GetOutputFileName(self):
        """GetOutputFileName(mtsCollectorBase self) -> std::string const &"""
        return _cisstMultiTaskPython.mtsCollectorBase_GetOutputFileName(self)

    def OpenFileIfNeeded(self):
        """OpenFileIfNeeded(mtsCollectorBase self)"""
        return _cisstMultiTaskPython.mtsCollectorBase_OpenFileIfNeeded(self)

    def StartCollection(self, *args):
        """StartCollection(mtsCollectorBase self, mtsDouble delayInSeconds)"""
        return _cisstMultiTaskPython.mtsCollectorBase_StartCollection(self, *args)

    def StopCollection(self, *args):
        """StopCollection(mtsCollectorBase self, mtsDouble delayInSeconds)"""
        return _cisstMultiTaskPython.mtsCollectorBase_StopCollection(self, *args)

    CollectionStartedEventTrigger = _swig_property(_cisstMultiTaskPython.mtsCollectorBase_CollectionStartedEventTrigger_get, _cisstMultiTaskPython.mtsCollectorBase_CollectionStartedEventTrigger_set)
    CollectionStoppedEventTrigger = _swig_property(_cisstMultiTaskPython.mtsCollectorBase_CollectionStoppedEventTrigger_get, _cisstMultiTaskPython.mtsCollectorBase_CollectionStoppedEventTrigger_set)
    ProgressEventTrigger = _swig_property(_cisstMultiTaskPython.mtsCollectorBase_ProgressEventTrigger_get, _cisstMultiTaskPython.mtsCollectorBase_ProgressEventTrigger_set)
    def SetWorkingDirectory(self, *args):
        """SetWorkingDirectory(mtsCollectorBase self, mtsStdString directory)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetWorkingDirectory(self, *args)

    def GetWorkingDirectory(self, *args):
        """GetWorkingDirectory(mtsCollectorBase self, mtsStdString placeHolder)"""
        return _cisstMultiTaskPython.mtsCollectorBase_GetWorkingDirectory(self, *args)

    def SetOutputStreamFloatingNotation(self, *args):
        """SetOutputStreamFloatingNotation(mtsCollectorBase self, mtsCollectorBase::CollectorFileFloatingNotation const floatingNotation)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamFloatingNotation(self, *args)

    def SetOutputStreamPrecision(self, *args):
        """SetOutputStreamPrecision(mtsCollectorBase self, int const precision)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamPrecision(self, *args)

    def SetOutputStreamWidth(self, *args):
        """SetOutputStreamWidth(mtsCollectorBase self, int const width)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamWidth(self, *args)

    def SetOutputStreamFill(self, *args):
        """SetOutputStreamFill(mtsCollectorBase self, char const fillCharacter)"""
        return _cisstMultiTaskPython.mtsCollectorBase_SetOutputStreamFill(self, *args)

mtsCollectorBase_swigregister = _cisstMultiTaskPython.mtsCollectorBase_swigregister
mtsCollectorBase_swigregister(mtsCollectorBase)

class mtsCollectorState(mtsCollectorBase):
    """Proxy of C++ mtsCollectorState class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsCollectorState_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsCollectorState_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsCollectorState_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsCollectorState self, std::string const & collectorName) -> mtsCollectorState
        __init__(mtsCollectorState self, std::string const & targetComponentName, std::string const & targetStateTableName, 
            mtsCollectorBase::CollectorFileFormat const fileFormat) -> mtsCollectorState
        """
        this = _cisstMultiTaskPython.new_mtsCollectorState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCollectorState
    __del__ = lambda self : None;
    def SetStateTable(self, *args):
        """
        SetStateTable(mtsCollectorState self, std::string const & componentName, std::string const & stateTableName="") -> bool
        SetStateTable(mtsCollectorState self, std::string const & componentName) -> bool
        """
        return _cisstMultiTaskPython.mtsCollectorState_SetStateTable(self, *args)

    def AddSignal(self, signalName=""):
        """
        AddSignal(mtsCollectorState self, std::string const & signalName="") -> bool
        AddSignal(mtsCollectorState self) -> bool
        """
        return _cisstMultiTaskPython.mtsCollectorState_AddSignal(self, signalName)

    def SetSamplingInterval(self, *args):
        """SetSamplingInterval(mtsCollectorState self, unsigned int const samplingInterval)"""
        return _cisstMultiTaskPython.mtsCollectorState_SetSamplingInterval(self, *args)

    def Connect(self):
        """Connect(mtsCollectorState self) -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_Connect(self)

    def Disconnect(self):
        """Disconnect(mtsCollectorState self) -> bool"""
        return _cisstMultiTaskPython.mtsCollectorState_Disconnect(self)

    def ConvertBinaryToText(*args):
        """
        ConvertBinaryToText(std::string const sourceBinaryLogFileName, std::string const targetPlainTextLogFileName, 
            char const delimiter=',') -> bool
        ConvertBinaryToText(std::string const sourceBinaryLogFileName, std::string const targetPlainTextLogFileName) -> bool
        """
        return _cisstMultiTaskPython.mtsCollectorState_ConvertBinaryToText(*args)

    ConvertBinaryToText = staticmethod(ConvertBinaryToText)
mtsCollectorState_swigregister = _cisstMultiTaskPython.mtsCollectorState_swigregister
mtsCollectorState_swigregister(mtsCollectorState)

def mtsCollectorState_ClassServices():
  """mtsCollectorState_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsCollectorState_ClassServices()

def mtsCollectorState_ConvertBinaryToText(*args):
  """
    ConvertBinaryToText(std::string const sourceBinaryLogFileName, std::string const targetPlainTextLogFileName, 
        char const delimiter=',') -> bool
    mtsCollectorState_ConvertBinaryToText(std::string const sourceBinaryLogFileName, std::string const targetPlainTextLogFileName) -> bool
    """
  return _cisstMultiTaskPython.mtsCollectorState_ConvertBinaryToText(*args)

class mtsDoubleBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsDoubleBase self) -> mtsGenericObjectProxyBase< double >::value_type
        GetData(mtsDoubleBase self) -> mtsGenericObjectProxyBase< double >::value_type const &
        """
        return _cisstMultiTaskPython.mtsDoubleBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsDoubleBase self, mtsDoubleBase other)"""
        return _cisstMultiTaskPython.mtsDoubleBase_Assign(self, *args)

mtsDoubleBase_swigregister = _cisstMultiTaskPython.mtsDoubleBase_swigregister
mtsDoubleBase_swigregister(mtsDoubleBase)

def mtsDoubleBase_ClassServices():
  """mtsDoubleBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleBase_ClassServices()

class mtsDouble(mtsDoubleBase):
    """Proxy of C++ mtsGenericObjectProxy<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDouble_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDouble_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDouble_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsDouble_Data_get, _cisstMultiTaskPython.mtsDouble_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(double)> self) -> mtsDouble
        __init__(mtsGenericObjectProxy<(double)> self, mtsDouble other) -> mtsDouble
        __init__(mtsGenericObjectProxy<(double)> self, mtsGenericObjectProxy< double >::value_type const & data) -> mtsDouble
        """
        this = _cisstMultiTaskPython.new_mtsDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDouble
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsDouble self) -> mtsGenericObjectProxy< double >::value_type
        GetData(mtsDouble self) -> mtsGenericObjectProxy< double >::value_type const &
        """
        return _cisstMultiTaskPython.mtsDouble_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsDouble self) -> double"""
        return _cisstMultiTaskPython.mtsDouble_GetDataCopy(self)

mtsDouble_swigregister = _cisstMultiTaskPython.mtsDouble_swigregister
mtsDouble_swigregister(mtsDouble)

def mtsDouble_ClassServices():
  """mtsDouble_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDouble_ClassServices()

class mtsFloatBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsFloatBase self) -> mtsGenericObjectProxyBase< float >::value_type
        GetData(mtsFloatBase self) -> mtsGenericObjectProxyBase< float >::value_type const &
        """
        return _cisstMultiTaskPython.mtsFloatBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsFloatBase self, mtsFloatBase other)"""
        return _cisstMultiTaskPython.mtsFloatBase_Assign(self, *args)

mtsFloatBase_swigregister = _cisstMultiTaskPython.mtsFloatBase_swigregister
mtsFloatBase_swigregister(mtsFloatBase)

def mtsFloatBase_ClassServices():
  """mtsFloatBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatBase_ClassServices()

class mtsFloat(mtsFloatBase):
    """Proxy of C++ mtsGenericObjectProxy<(float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsFloat_Data_get, _cisstMultiTaskPython.mtsFloat_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(float)> self) -> mtsFloat
        __init__(mtsGenericObjectProxy<(float)> self, mtsFloat other) -> mtsFloat
        __init__(mtsGenericObjectProxy<(float)> self, mtsGenericObjectProxy< float >::value_type const & data) -> mtsFloat
        """
        this = _cisstMultiTaskPython.new_mtsFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloat
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsFloat self) -> mtsGenericObjectProxy< float >::value_type
        GetData(mtsFloat self) -> mtsGenericObjectProxy< float >::value_type const &
        """
        return _cisstMultiTaskPython.mtsFloat_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsFloat self) -> float"""
        return _cisstMultiTaskPython.mtsFloat_GetDataCopy(self)

mtsFloat_swigregister = _cisstMultiTaskPython.mtsFloat_swigregister
mtsFloat_swigregister(mtsFloat)

def mtsFloat_ClassServices():
  """mtsFloat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloat_ClassServices()

class mtsIntBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsIntBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsIntBase self) -> mtsGenericObjectProxyBase< int >::value_type
        GetData(mtsIntBase self) -> mtsGenericObjectProxyBase< int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsIntBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsIntBase self, mtsIntBase other)"""
        return _cisstMultiTaskPython.mtsIntBase_Assign(self, *args)

mtsIntBase_swigregister = _cisstMultiTaskPython.mtsIntBase_swigregister
mtsIntBase_swigregister(mtsIntBase)

def mtsIntBase_ClassServices():
  """mtsIntBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsIntBase_ClassServices()

class mtsInt(mtsIntBase):
    """Proxy of C++ mtsGenericObjectProxy<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInt_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInt_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInt_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsInt_Data_get, _cisstMultiTaskPython.mtsInt_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(int)> self) -> mtsInt
        __init__(mtsGenericObjectProxy<(int)> self, mtsInt other) -> mtsInt
        __init__(mtsGenericObjectProxy<(int)> self, mtsGenericObjectProxy< int >::value_type const & data) -> mtsInt
        """
        this = _cisstMultiTaskPython.new_mtsInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInt
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsInt self) -> mtsGenericObjectProxy< int >::value_type
        GetData(mtsInt self) -> mtsGenericObjectProxy< int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsInt_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsInt self) -> int"""
        return _cisstMultiTaskPython.mtsInt_GetDataCopy(self)

mtsInt_swigregister = _cisstMultiTaskPython.mtsInt_swigregister
mtsInt_swigregister(mtsInt)

def mtsInt_ClassServices():
  """mtsInt_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInt_ClassServices()

class mtsUIntBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUIntBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUIntBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUIntBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUIntBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsUIntBase self) -> mtsGenericObjectProxyBase< unsigned int >::value_type
        GetData(mtsUIntBase self) -> mtsGenericObjectProxyBase< unsigned int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUIntBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsUIntBase self, mtsUIntBase other)"""
        return _cisstMultiTaskPython.mtsUIntBase_Assign(self, *args)

mtsUIntBase_swigregister = _cisstMultiTaskPython.mtsUIntBase_swigregister
mtsUIntBase_swigregister(mtsUIntBase)

def mtsUIntBase_ClassServices():
  """mtsUIntBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUIntBase_ClassServices()

class mtsUInt(mtsUIntBase):
    """Proxy of C++ mtsGenericObjectProxy<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUInt_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUInt_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUInt_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsUInt_Data_get, _cisstMultiTaskPython.mtsUInt_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(unsigned int)> self) -> mtsUInt
        __init__(mtsGenericObjectProxy<(unsigned int)> self, mtsUInt other) -> mtsUInt
        __init__(mtsGenericObjectProxy<(unsigned int)> self, mtsGenericObjectProxy< unsigned int >::value_type const & data) -> mtsUInt
        """
        this = _cisstMultiTaskPython.new_mtsUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUInt
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsUInt self) -> mtsGenericObjectProxy< unsigned int >::value_type
        GetData(mtsUInt self) -> mtsGenericObjectProxy< unsigned int >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUInt_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsUInt self) -> unsigned int"""
        return _cisstMultiTaskPython.mtsUInt_GetDataCopy(self)

mtsUInt_swigregister = _cisstMultiTaskPython.mtsUInt_swigregister
mtsUInt_swigregister(mtsUInt)

def mtsUInt_ClassServices():
  """mtsUInt_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUInt_ClassServices()

class mtsShortBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShortBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsShortBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShortBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShortBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsShortBase self) -> mtsGenericObjectProxyBase< short >::value_type
        GetData(mtsShortBase self) -> mtsGenericObjectProxyBase< short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsShortBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsShortBase self, mtsShortBase other)"""
        return _cisstMultiTaskPython.mtsShortBase_Assign(self, *args)

mtsShortBase_swigregister = _cisstMultiTaskPython.mtsShortBase_swigregister
mtsShortBase_swigregister(mtsShortBase)

def mtsShortBase_ClassServices():
  """mtsShortBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsShortBase_ClassServices()

class mtsShort(mtsShortBase):
    """Proxy of C++ mtsGenericObjectProxy<(short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShort_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsShort_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShort_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsShort_Data_get, _cisstMultiTaskPython.mtsShort_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(short)> self) -> mtsShort
        __init__(mtsGenericObjectProxy<(short)> self, mtsShort other) -> mtsShort
        __init__(mtsGenericObjectProxy<(short)> self, mtsGenericObjectProxy< short >::value_type const & data) -> mtsShort
        """
        this = _cisstMultiTaskPython.new_mtsShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShort
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsShort self) -> mtsGenericObjectProxy< short >::value_type
        GetData(mtsShort self) -> mtsGenericObjectProxy< short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsShort_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsShort self) -> short"""
        return _cisstMultiTaskPython.mtsShort_GetDataCopy(self)

mtsShort_swigregister = _cisstMultiTaskPython.mtsShort_swigregister
mtsShort_swigregister(mtsShort)

def mtsShort_ClassServices():
  """mtsShort_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsShort_ClassServices()

class mtsUShortBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(unsigned short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUShortBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUShortBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUShortBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUShortBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsUShortBase self) -> mtsGenericObjectProxyBase< unsigned short >::value_type
        GetData(mtsUShortBase self) -> mtsGenericObjectProxyBase< unsigned short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUShortBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsUShortBase self, mtsUShortBase other)"""
        return _cisstMultiTaskPython.mtsUShortBase_Assign(self, *args)

mtsUShortBase_swigregister = _cisstMultiTaskPython.mtsUShortBase_swigregister
mtsUShortBase_swigregister(mtsUShortBase)

def mtsUShortBase_ClassServices():
  """mtsUShortBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUShortBase_ClassServices()

class mtsUShort(mtsUShortBase):
    """Proxy of C++ mtsGenericObjectProxy<(unsigned short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUShort_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUShort_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUShort_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsUShort_Data_get, _cisstMultiTaskPython.mtsUShort_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(unsigned short)> self) -> mtsUShort
        __init__(mtsGenericObjectProxy<(unsigned short)> self, mtsUShort other) -> mtsUShort
        __init__(mtsGenericObjectProxy<(unsigned short)> self, mtsGenericObjectProxy< unsigned short >::value_type const & data) -> mtsUShort
        """
        this = _cisstMultiTaskPython.new_mtsUShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUShort
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsUShort self) -> mtsGenericObjectProxy< unsigned short >::value_type
        GetData(mtsUShort self) -> mtsGenericObjectProxy< unsigned short >::value_type const &
        """
        return _cisstMultiTaskPython.mtsUShort_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsUShort self) -> unsigned short"""
        return _cisstMultiTaskPython.mtsUShort_GetDataCopy(self)

mtsUShort_swigregister = _cisstMultiTaskPython.mtsUShort_swigregister
mtsUShort_swigregister(mtsUShort)

def mtsUShort_ClassServices():
  """mtsUShort_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUShort_ClassServices()

class mtsLongBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLongBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsLongBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLongBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLongBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsLongBase self) -> mtsGenericObjectProxyBase< long >::value_type
        GetData(mtsLongBase self) -> mtsGenericObjectProxyBase< long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsLongBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsLongBase self, mtsLongBase other)"""
        return _cisstMultiTaskPython.mtsLongBase_Assign(self, *args)

mtsLongBase_swigregister = _cisstMultiTaskPython.mtsLongBase_swigregister
mtsLongBase_swigregister(mtsLongBase)

def mtsLongBase_ClassServices():
  """mtsLongBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsLongBase_ClassServices()

class mtsLong(mtsLongBase):
    """Proxy of C++ mtsGenericObjectProxy<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLong_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsLong_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLong_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsLong_Data_get, _cisstMultiTaskPython.mtsLong_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(long)> self) -> mtsLong
        __init__(mtsGenericObjectProxy<(long)> self, mtsLong other) -> mtsLong
        __init__(mtsGenericObjectProxy<(long)> self, mtsGenericObjectProxy< long >::value_type const & data) -> mtsLong
        """
        this = _cisstMultiTaskPython.new_mtsLong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLong
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsLong self) -> mtsGenericObjectProxy< long >::value_type
        GetData(mtsLong self) -> mtsGenericObjectProxy< long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsLong_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsLong self) -> long"""
        return _cisstMultiTaskPython.mtsLong_GetDataCopy(self)

mtsLong_swigregister = _cisstMultiTaskPython.mtsLong_swigregister
mtsLong_swigregister(mtsLong)

def mtsLong_ClassServices():
  """mtsLong_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsLong_ClassServices()

class mtsULongBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsULongBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsULongBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsULongBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsULongBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsULongBase self) -> mtsGenericObjectProxyBase< unsigned long >::value_type
        GetData(mtsULongBase self) -> mtsGenericObjectProxyBase< unsigned long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsULongBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsULongBase self, mtsULongBase other)"""
        return _cisstMultiTaskPython.mtsULongBase_Assign(self, *args)

mtsULongBase_swigregister = _cisstMultiTaskPython.mtsULongBase_swigregister
mtsULongBase_swigregister(mtsULongBase)

def mtsULongBase_ClassServices():
  """mtsULongBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsULongBase_ClassServices()

class mtsULong(mtsULongBase):
    """Proxy of C++ mtsGenericObjectProxy<(unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsULong_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsULong_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsULong_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsULong_Data_get, _cisstMultiTaskPython.mtsULong_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(unsigned long)> self) -> mtsULong
        __init__(mtsGenericObjectProxy<(unsigned long)> self, mtsULong other) -> mtsULong
        __init__(mtsGenericObjectProxy<(unsigned long)> self, mtsGenericObjectProxy< unsigned long >::value_type const & data) -> mtsULong
        """
        this = _cisstMultiTaskPython.new_mtsULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsULong
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsULong self) -> mtsGenericObjectProxy< unsigned long >::value_type
        GetData(mtsULong self) -> mtsGenericObjectProxy< unsigned long >::value_type const &
        """
        return _cisstMultiTaskPython.mtsULong_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsULong self) -> unsigned long"""
        return _cisstMultiTaskPython.mtsULong_GetDataCopy(self)

mtsULong_swigregister = _cisstMultiTaskPython.mtsULong_swigregister
mtsULong_swigregister(mtsULong)

def mtsULong_ClassServices():
  """mtsULong_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsULong_ClassServices()

class mtsBoolBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(bool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsBoolBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsBoolBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsBoolBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsBoolBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsBoolBase self) -> mtsGenericObjectProxyBase< bool >::value_type
        GetData(mtsBoolBase self) -> mtsGenericObjectProxyBase< bool >::value_type const &
        """
        return _cisstMultiTaskPython.mtsBoolBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsBoolBase self, mtsBoolBase other)"""
        return _cisstMultiTaskPython.mtsBoolBase_Assign(self, *args)

mtsBoolBase_swigregister = _cisstMultiTaskPython.mtsBoolBase_swigregister
mtsBoolBase_swigregister(mtsBoolBase)

def mtsBoolBase_ClassServices():
  """mtsBoolBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsBoolBase_ClassServices()

class mtsBool(mtsBoolBase):
    """Proxy of C++ mtsGenericObjectProxy<(bool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsBool_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsBool_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsBool_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsBool_Data_get, _cisstMultiTaskPython.mtsBool_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(bool)> self) -> mtsBool
        __init__(mtsGenericObjectProxy<(bool)> self, mtsBool other) -> mtsBool
        __init__(mtsGenericObjectProxy<(bool)> self, mtsGenericObjectProxy< bool >::value_type const & data) -> mtsBool
        """
        this = _cisstMultiTaskPython.new_mtsBool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsBool
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsBool self) -> mtsGenericObjectProxy< bool >::value_type
        GetData(mtsBool self) -> mtsGenericObjectProxy< bool >::value_type const &
        """
        return _cisstMultiTaskPython.mtsBool_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsBool self) -> bool"""
        return _cisstMultiTaskPython.mtsBool_GetDataCopy(self)

mtsBool_swigregister = _cisstMultiTaskPython.mtsBool_swigregister
mtsBool_swigregister(mtsBool)

def mtsBool_ClassServices():
  """mtsBool_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsBool_ClassServices()

class mtsStdStringBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdStringBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdStringBase self) -> mtsGenericObjectProxyBase< std::string >::value_type
        GetData(mtsStdStringBase self) -> mtsGenericObjectProxyBase< std::string >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdStringBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsStdStringBase self, mtsStdStringBase other)"""
        return _cisstMultiTaskPython.mtsStdStringBase_Assign(self, *args)

mtsStdStringBase_swigregister = _cisstMultiTaskPython.mtsStdStringBase_swigregister
mtsStdStringBase_swigregister(mtsStdStringBase)

def mtsStdStringBase_ClassServices():
  """mtsStdStringBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdStringBase_ClassServices()

class mtsStdString(mtsStdStringBase):
    """Proxy of C++ mtsGenericObjectProxy<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdString_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdString_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdString_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsStdString_Data_get, _cisstMultiTaskPython.mtsStdString_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(std::string)> self) -> mtsStdString
        __init__(mtsGenericObjectProxy<(std::string)> self, mtsStdString other) -> mtsStdString
        __init__(mtsGenericObjectProxy<(std::string)> self, mtsGenericObjectProxy< std::string >::value_type const & data) -> mtsStdString
        """
        this = _cisstMultiTaskPython.new_mtsStdString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdString
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdString self) -> mtsGenericObjectProxy< std::string >::value_type
        GetData(mtsStdString self) -> mtsGenericObjectProxy< std::string >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdString_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsStdString self) -> std::string"""
        return _cisstMultiTaskPython.mtsStdString_GetDataCopy(self)

mtsStdString_swigregister = _cisstMultiTaskPython.mtsStdString_swigregister
mtsStdString_swigregister(mtsStdString)

def mtsStdString_ClassServices():
  """mtsStdString_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdString_ClassServices()

class mtsStdStringVecProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(stdStringVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringVecProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdStringVecProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringVecProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringVecProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdStringVecProxyBase self) -> mtsStringVector
        GetData(mtsStdStringVecProxyBase self) -> mtsStringVector
        """
        return _cisstMultiTaskPython.mtsStdStringVecProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsStdStringVecProxyBase self, mtsStdStringVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsStdStringVecProxyBase_Assign(self, *args)

mtsStdStringVecProxyBase_swigregister = _cisstMultiTaskPython.mtsStdStringVecProxyBase_swigregister
mtsStdStringVecProxyBase_swigregister(mtsStdStringVecProxyBase)

def mtsStdStringVecProxyBase_ClassServices():
  """mtsStdStringVecProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdStringVecProxyBase_ClassServices()

class mtsStdStringVecProxy(mtsStdStringVecProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(stdStringVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringVecProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdStringVecProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringVecProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsStdStringVecProxy_Data_get, _cisstMultiTaskPython.mtsStdStringVecProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(stdStringVec)> self) -> mtsStdStringVecProxy
        __init__(mtsGenericObjectProxy<(stdStringVec)> self, mtsStdStringVecProxy other) -> mtsStdStringVecProxy
        __init__(mtsGenericObjectProxy<(stdStringVec)> self, mtsStringVector data) -> mtsStdStringVecProxy
        """
        this = _cisstMultiTaskPython.new_mtsStdStringVecProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringVecProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdStringVecProxy self) -> mtsStringVector
        GetData(mtsStdStringVecProxy self) -> mtsStringVector
        """
        return _cisstMultiTaskPython.mtsStdStringVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsStdStringVecProxy self) -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsStdStringVecProxy_GetDataCopy(self)

mtsStdStringVecProxy_swigregister = _cisstMultiTaskPython.mtsStdStringVecProxy_swigregister
mtsStdStringVecProxy_swigregister(mtsStdStringVecProxy)

def mtsStdStringVecProxy_ClassServices():
  """mtsStdStringVecProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdStringVecProxy_ClassServices()

class mtsStdDoubleVecProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(stdDoubleVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdDoubleVecProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdDoubleVecProxyBase self) -> mtsDoubleVector
        GetData(mtsStdDoubleVecProxyBase self) -> mtsDoubleVector
        """
        return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsStdDoubleVecProxyBase self, mtsStdDoubleVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_Assign(self, *args)

mtsStdDoubleVecProxyBase_swigregister = _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_swigregister
mtsStdDoubleVecProxyBase_swigregister(mtsStdDoubleVecProxyBase)

def mtsStdDoubleVecProxyBase_ClassServices():
  """mtsStdDoubleVecProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdDoubleVecProxyBase_ClassServices()

class mtsStdDoubleVecProxy(mtsStdDoubleVecProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(stdDoubleVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdDoubleVecProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdDoubleVecProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsStdDoubleVecProxy_Data_get, _cisstMultiTaskPython.mtsStdDoubleVecProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(stdDoubleVec)> self) -> mtsStdDoubleVecProxy
        __init__(mtsGenericObjectProxy<(stdDoubleVec)> self, mtsStdDoubleVecProxy other) -> mtsStdDoubleVecProxy
        __init__(mtsGenericObjectProxy<(stdDoubleVec)> self, mtsDoubleVector data) -> mtsStdDoubleVecProxy
        """
        this = _cisstMultiTaskPython.new_mtsStdDoubleVecProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdDoubleVecProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdDoubleVecProxy self) -> mtsDoubleVector
        GetData(mtsStdDoubleVecProxy self) -> mtsDoubleVector
        """
        return _cisstMultiTaskPython.mtsStdDoubleVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsStdDoubleVecProxy self) -> mtsDoubleVector"""
        return _cisstMultiTaskPython.mtsStdDoubleVecProxy_GetDataCopy(self)

mtsStdDoubleVecProxy_swigregister = _cisstMultiTaskPython.mtsStdDoubleVecProxy_swigregister
mtsStdDoubleVecProxy_swigregister(mtsStdDoubleVecProxy)

def mtsStdDoubleVecProxy_ClassServices():
  """mtsStdDoubleVecProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdDoubleVecProxy_ClassServices()

class mtsStdCharVecProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(stdCharVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdCharVecProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdCharVecProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdCharVecProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdCharVecProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdCharVecProxyBase self) -> mtsGenericObjectProxyBase< std::vector< char,std::allocator< char > > >::value_type
        GetData(mtsStdCharVecProxyBase self) -> mtsGenericObjectProxyBase< std::vector< char,std::allocator< char > > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdCharVecProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsStdCharVecProxyBase self, mtsStdCharVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsStdCharVecProxyBase_Assign(self, *args)

mtsStdCharVecProxyBase_swigregister = _cisstMultiTaskPython.mtsStdCharVecProxyBase_swigregister
mtsStdCharVecProxyBase_swigregister(mtsStdCharVecProxyBase)

def mtsStdCharVecProxyBase_ClassServices():
  """mtsStdCharVecProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdCharVecProxyBase_ClassServices()

class mtsStdCharVecProxy(mtsStdCharVecProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(stdCharVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdCharVecProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdCharVecProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdCharVecProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsStdCharVecProxy_Data_get, _cisstMultiTaskPython.mtsStdCharVecProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(stdCharVec)> self) -> mtsStdCharVecProxy
        __init__(mtsGenericObjectProxy<(stdCharVec)> self, mtsStdCharVecProxy other) -> mtsStdCharVecProxy
        __init__(mtsGenericObjectProxy<(stdCharVec)> self, mtsGenericObjectProxy< std::vector< char,std::allocator< char > > >::value_type const & data) -> mtsStdCharVecProxy
        """
        this = _cisstMultiTaskPython.new_mtsStdCharVecProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdCharVecProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsStdCharVecProxy self) -> mtsGenericObjectProxy< std::vector< char,std::allocator< char > > >::value_type
        GetData(mtsStdCharVecProxy self) -> mtsGenericObjectProxy< std::vector< char,std::allocator< char > > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsStdCharVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsStdCharVecProxy self) -> stdCharVec"""
        return _cisstMultiTaskPython.mtsStdCharVecProxy_GetDataCopy(self)

mtsStdCharVecProxy_swigregister = _cisstMultiTaskPython.mtsStdCharVecProxy_swigregister
mtsStdCharVecProxy_swigregister(mtsStdCharVecProxy)

def mtsStdCharVecProxy_ClassServices():
  """mtsStdCharVecProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdCharVecProxy_ClassServices()

class mtsVct1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct1Base self) -> mtsGenericObjectProxyBase< vct1 >::value_type
        GetData(mtsVct1Base self) -> mtsGenericObjectProxyBase< vct1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct1Base self, mtsVct1Base other)"""
        return _cisstMultiTaskPython.mtsVct1Base_Assign(self, *args)

mtsVct1Base_swigregister = _cisstMultiTaskPython.mtsVct1Base_swigregister
mtsVct1Base_swigregister(mtsVct1Base)

def mtsVct1Base_ClassServices():
  """mtsVct1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct1Base_ClassServices()

class mtsVct1(mtsVct1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct1_Data_get, _cisstMultiTaskPython.mtsVct1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct1)> self) -> mtsVct1
        __init__(mtsGenericObjectProxy<(vct1)> self, mtsVct1 other) -> mtsVct1
        __init__(mtsGenericObjectProxy<(vct1)> self, mtsGenericObjectProxy< vct1 >::value_type const & data) -> mtsVct1
        """
        this = _cisstMultiTaskPython.new_mtsVct1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct1 self) -> mtsGenericObjectProxy< vct1 >::value_type
        GetData(mtsVct1 self) -> mtsGenericObjectProxy< vct1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct1 self) -> vct1"""
        return _cisstMultiTaskPython.mtsVct1_GetDataCopy(self)

mtsVct1_swigregister = _cisstMultiTaskPython.mtsVct1_swigregister
mtsVct1_swigregister(mtsVct1)

def mtsVct1_ClassServices():
  """mtsVct1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct1_ClassServices()

class mtsVct2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct2Base self) -> mtsGenericObjectProxyBase< vct2 >::value_type
        GetData(mtsVct2Base self) -> mtsGenericObjectProxyBase< vct2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct2Base self, mtsVct2Base other)"""
        return _cisstMultiTaskPython.mtsVct2Base_Assign(self, *args)

mtsVct2Base_swigregister = _cisstMultiTaskPython.mtsVct2Base_swigregister
mtsVct2Base_swigregister(mtsVct2Base)

def mtsVct2Base_ClassServices():
  """mtsVct2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct2Base_ClassServices()

class mtsVct2(mtsVct2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct2_Data_get, _cisstMultiTaskPython.mtsVct2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct2)> self) -> mtsVct2
        __init__(mtsGenericObjectProxy<(vct2)> self, mtsVct2 other) -> mtsVct2
        __init__(mtsGenericObjectProxy<(vct2)> self, mtsGenericObjectProxy< vct2 >::value_type const & data) -> mtsVct2
        """
        this = _cisstMultiTaskPython.new_mtsVct2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct2 self) -> mtsGenericObjectProxy< vct2 >::value_type
        GetData(mtsVct2 self) -> mtsGenericObjectProxy< vct2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct2 self) -> vct2"""
        return _cisstMultiTaskPython.mtsVct2_GetDataCopy(self)

mtsVct2_swigregister = _cisstMultiTaskPython.mtsVct2_swigregister
mtsVct2_swigregister(mtsVct2)

def mtsVct2_ClassServices():
  """mtsVct2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct2_ClassServices()

class mtsVct3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct3Base self) -> mtsGenericObjectProxyBase< vct3 >::value_type
        GetData(mtsVct3Base self) -> mtsGenericObjectProxyBase< vct3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct3Base self, mtsVct3Base other)"""
        return _cisstMultiTaskPython.mtsVct3Base_Assign(self, *args)

mtsVct3Base_swigregister = _cisstMultiTaskPython.mtsVct3Base_swigregister
mtsVct3Base_swigregister(mtsVct3Base)

def mtsVct3Base_ClassServices():
  """mtsVct3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct3Base_ClassServices()

class mtsVct3(mtsVct3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct3_Data_get, _cisstMultiTaskPython.mtsVct3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct3)> self) -> mtsVct3
        __init__(mtsGenericObjectProxy<(vct3)> self, mtsVct3 other) -> mtsVct3
        __init__(mtsGenericObjectProxy<(vct3)> self, mtsGenericObjectProxy< vct3 >::value_type const & data) -> mtsVct3
        """
        this = _cisstMultiTaskPython.new_mtsVct3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct3 self) -> mtsGenericObjectProxy< vct3 >::value_type
        GetData(mtsVct3 self) -> mtsGenericObjectProxy< vct3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct3 self) -> vct3"""
        return _cisstMultiTaskPython.mtsVct3_GetDataCopy(self)

mtsVct3_swigregister = _cisstMultiTaskPython.mtsVct3_swigregister
mtsVct3_swigregister(mtsVct3)

def mtsVct3_ClassServices():
  """mtsVct3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct3_ClassServices()

class mtsVct4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct4Base self) -> mtsGenericObjectProxyBase< vct4 >::value_type
        GetData(mtsVct4Base self) -> mtsGenericObjectProxyBase< vct4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct4Base self, mtsVct4Base other)"""
        return _cisstMultiTaskPython.mtsVct4Base_Assign(self, *args)

mtsVct4Base_swigregister = _cisstMultiTaskPython.mtsVct4Base_swigregister
mtsVct4Base_swigregister(mtsVct4Base)

def mtsVct4Base_ClassServices():
  """mtsVct4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct4Base_ClassServices()

class mtsVct4(mtsVct4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct4_Data_get, _cisstMultiTaskPython.mtsVct4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct4)> self) -> mtsVct4
        __init__(mtsGenericObjectProxy<(vct4)> self, mtsVct4 other) -> mtsVct4
        __init__(mtsGenericObjectProxy<(vct4)> self, mtsGenericObjectProxy< vct4 >::value_type const & data) -> mtsVct4
        """
        this = _cisstMultiTaskPython.new_mtsVct4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct4 self) -> mtsGenericObjectProxy< vct4 >::value_type
        GetData(mtsVct4 self) -> mtsGenericObjectProxy< vct4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct4 self) -> vct4"""
        return _cisstMultiTaskPython.mtsVct4_GetDataCopy(self)

mtsVct4_swigregister = _cisstMultiTaskPython.mtsVct4_swigregister
mtsVct4_swigregister(mtsVct4)

def mtsVct4_ClassServices():
  """mtsVct4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct4_ClassServices()

class mtsVct5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct5Base self) -> mtsGenericObjectProxyBase< vct5 >::value_type
        GetData(mtsVct5Base self) -> mtsGenericObjectProxyBase< vct5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct5Base self, mtsVct5Base other)"""
        return _cisstMultiTaskPython.mtsVct5Base_Assign(self, *args)

mtsVct5Base_swigregister = _cisstMultiTaskPython.mtsVct5Base_swigregister
mtsVct5Base_swigregister(mtsVct5Base)

def mtsVct5Base_ClassServices():
  """mtsVct5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct5Base_ClassServices()

class mtsVct5(mtsVct5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct5_Data_get, _cisstMultiTaskPython.mtsVct5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct5)> self) -> mtsVct5
        __init__(mtsGenericObjectProxy<(vct5)> self, mtsVct5 other) -> mtsVct5
        __init__(mtsGenericObjectProxy<(vct5)> self, mtsGenericObjectProxy< vct5 >::value_type const & data) -> mtsVct5
        """
        this = _cisstMultiTaskPython.new_mtsVct5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct5 self) -> mtsGenericObjectProxy< vct5 >::value_type
        GetData(mtsVct5 self) -> mtsGenericObjectProxy< vct5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct5 self) -> vct5"""
        return _cisstMultiTaskPython.mtsVct5_GetDataCopy(self)

mtsVct5_swigregister = _cisstMultiTaskPython.mtsVct5_swigregister
mtsVct5_swigregister(mtsVct5)

def mtsVct5_ClassServices():
  """mtsVct5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct5_ClassServices()

class mtsVct6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct6Base self) -> mtsGenericObjectProxyBase< vct6 >::value_type
        GetData(mtsVct6Base self) -> mtsGenericObjectProxyBase< vct6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct6Base self, mtsVct6Base other)"""
        return _cisstMultiTaskPython.mtsVct6Base_Assign(self, *args)

mtsVct6Base_swigregister = _cisstMultiTaskPython.mtsVct6Base_swigregister
mtsVct6Base_swigregister(mtsVct6Base)

def mtsVct6Base_ClassServices():
  """mtsVct6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct6Base_ClassServices()

class mtsVct6(mtsVct6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct6_Data_get, _cisstMultiTaskPython.mtsVct6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct6)> self) -> mtsVct6
        __init__(mtsGenericObjectProxy<(vct6)> self, mtsVct6 other) -> mtsVct6
        __init__(mtsGenericObjectProxy<(vct6)> self, mtsGenericObjectProxy< vct6 >::value_type const & data) -> mtsVct6
        """
        this = _cisstMultiTaskPython.new_mtsVct6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct6 self) -> mtsGenericObjectProxy< vct6 >::value_type
        GetData(mtsVct6 self) -> mtsGenericObjectProxy< vct6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct6 self) -> vct6"""
        return _cisstMultiTaskPython.mtsVct6_GetDataCopy(self)

mtsVct6_swigregister = _cisstMultiTaskPython.mtsVct6_swigregister
mtsVct6_swigregister(mtsVct6)

def mtsVct6_ClassServices():
  """mtsVct6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct6_ClassServices()

class mtsVct7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct7Base self) -> mtsGenericObjectProxyBase< vct7 >::value_type
        GetData(mtsVct7Base self) -> mtsGenericObjectProxyBase< vct7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct7Base self, mtsVct7Base other)"""
        return _cisstMultiTaskPython.mtsVct7Base_Assign(self, *args)

mtsVct7Base_swigregister = _cisstMultiTaskPython.mtsVct7Base_swigregister
mtsVct7Base_swigregister(mtsVct7Base)

def mtsVct7Base_ClassServices():
  """mtsVct7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct7Base_ClassServices()

class mtsVct7(mtsVct7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct7_Data_get, _cisstMultiTaskPython.mtsVct7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct7)> self) -> mtsVct7
        __init__(mtsGenericObjectProxy<(vct7)> self, mtsVct7 other) -> mtsVct7
        __init__(mtsGenericObjectProxy<(vct7)> self, mtsGenericObjectProxy< vct7 >::value_type const & data) -> mtsVct7
        """
        this = _cisstMultiTaskPython.new_mtsVct7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct7 self) -> mtsGenericObjectProxy< vct7 >::value_type
        GetData(mtsVct7 self) -> mtsGenericObjectProxy< vct7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct7 self) -> vct7"""
        return _cisstMultiTaskPython.mtsVct7_GetDataCopy(self)

mtsVct7_swigregister = _cisstMultiTaskPython.mtsVct7_swigregister
mtsVct7_swigregister(mtsVct7)

def mtsVct7_ClassServices():
  """mtsVct7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct7_ClassServices()

class mtsVct8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct8Base self) -> mtsGenericObjectProxyBase< vct8 >::value_type
        GetData(mtsVct8Base self) -> mtsGenericObjectProxyBase< vct8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct8Base self, mtsVct8Base other)"""
        return _cisstMultiTaskPython.mtsVct8Base_Assign(self, *args)

mtsVct8Base_swigregister = _cisstMultiTaskPython.mtsVct8Base_swigregister
mtsVct8Base_swigregister(mtsVct8Base)

def mtsVct8Base_ClassServices():
  """mtsVct8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct8Base_ClassServices()

class mtsVct8(mtsVct8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct8_Data_get, _cisstMultiTaskPython.mtsVct8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct8)> self) -> mtsVct8
        __init__(mtsGenericObjectProxy<(vct8)> self, mtsVct8 other) -> mtsVct8
        __init__(mtsGenericObjectProxy<(vct8)> self, mtsGenericObjectProxy< vct8 >::value_type const & data) -> mtsVct8
        """
        this = _cisstMultiTaskPython.new_mtsVct8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct8 self) -> mtsGenericObjectProxy< vct8 >::value_type
        GetData(mtsVct8 self) -> mtsGenericObjectProxy< vct8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct8 self) -> vct8"""
        return _cisstMultiTaskPython.mtsVct8_GetDataCopy(self)

mtsVct8_swigregister = _cisstMultiTaskPython.mtsVct8_swigregister
mtsVct8_swigregister(mtsVct8)

def mtsVct8_ClassServices():
  """mtsVct8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct8_ClassServices()

class mtsVct9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct9Base self) -> mtsGenericObjectProxyBase< vct9 >::value_type
        GetData(mtsVct9Base self) -> mtsGenericObjectProxyBase< vct9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct9Base self, mtsVct9Base other)"""
        return _cisstMultiTaskPython.mtsVct9Base_Assign(self, *args)

mtsVct9Base_swigregister = _cisstMultiTaskPython.mtsVct9Base_swigregister
mtsVct9Base_swigregister(mtsVct9Base)

def mtsVct9Base_ClassServices():
  """mtsVct9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct9Base_ClassServices()

class mtsVct9(mtsVct9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct9_Data_get, _cisstMultiTaskPython.mtsVct9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct9)> self) -> mtsVct9
        __init__(mtsGenericObjectProxy<(vct9)> self, mtsVct9 other) -> mtsVct9
        __init__(mtsGenericObjectProxy<(vct9)> self, mtsGenericObjectProxy< vct9 >::value_type const & data) -> mtsVct9
        """
        this = _cisstMultiTaskPython.new_mtsVct9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct9 self) -> mtsGenericObjectProxy< vct9 >::value_type
        GetData(mtsVct9 self) -> mtsGenericObjectProxy< vct9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct9 self) -> vct9"""
        return _cisstMultiTaskPython.mtsVct9_GetDataCopy(self)

mtsVct9_swigregister = _cisstMultiTaskPython.mtsVct9_swigregister
mtsVct9_swigregister(mtsVct9)

def mtsVct9_ClassServices():
  """mtsVct9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct9_ClassServices()

class mtsVctFloat1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat1Base self) -> mtsGenericObjectProxyBase< vctFloat1 >::value_type
        GetData(mtsVctFloat1Base self) -> mtsGenericObjectProxyBase< vctFloat1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat1Base self, mtsVctFloat1Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat1Base_Assign(self, *args)

mtsVctFloat1Base_swigregister = _cisstMultiTaskPython.mtsVctFloat1Base_swigregister
mtsVctFloat1Base_swigregister(mtsVctFloat1Base)

def mtsVctFloat1Base_ClassServices():
  """mtsVctFloat1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat1Base_ClassServices()

class mtsVctFloat1(mtsVctFloat1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat1_Data_get, _cisstMultiTaskPython.mtsVctFloat1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat1)> self) -> mtsVctFloat1
        __init__(mtsGenericObjectProxy<(vctFloat1)> self, mtsVctFloat1 other) -> mtsVctFloat1
        __init__(mtsGenericObjectProxy<(vctFloat1)> self, mtsGenericObjectProxy< vctFloat1 >::value_type const & data) -> mtsVctFloat1
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat1 self) -> mtsGenericObjectProxy< vctFloat1 >::value_type
        GetData(mtsVctFloat1 self) -> mtsGenericObjectProxy< vctFloat1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat1 self) -> vctFloat1"""
        return _cisstMultiTaskPython.mtsVctFloat1_GetDataCopy(self)

mtsVctFloat1_swigregister = _cisstMultiTaskPython.mtsVctFloat1_swigregister
mtsVctFloat1_swigregister(mtsVctFloat1)

def mtsVctFloat1_ClassServices():
  """mtsVctFloat1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat1_ClassServices()

class mtsVctFloat2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat2Base self) -> mtsGenericObjectProxyBase< vctFloat2 >::value_type
        GetData(mtsVctFloat2Base self) -> mtsGenericObjectProxyBase< vctFloat2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat2Base self, mtsVctFloat2Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat2Base_Assign(self, *args)

mtsVctFloat2Base_swigregister = _cisstMultiTaskPython.mtsVctFloat2Base_swigregister
mtsVctFloat2Base_swigregister(mtsVctFloat2Base)

def mtsVctFloat2Base_ClassServices():
  """mtsVctFloat2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat2Base_ClassServices()

class mtsVctFloat2(mtsVctFloat2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat2_Data_get, _cisstMultiTaskPython.mtsVctFloat2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat2)> self) -> mtsVctFloat2
        __init__(mtsGenericObjectProxy<(vctFloat2)> self, mtsVctFloat2 other) -> mtsVctFloat2
        __init__(mtsGenericObjectProxy<(vctFloat2)> self, mtsGenericObjectProxy< vctFloat2 >::value_type const & data) -> mtsVctFloat2
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat2 self) -> mtsGenericObjectProxy< vctFloat2 >::value_type
        GetData(mtsVctFloat2 self) -> mtsGenericObjectProxy< vctFloat2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat2 self) -> vctFloat2"""
        return _cisstMultiTaskPython.mtsVctFloat2_GetDataCopy(self)

mtsVctFloat2_swigregister = _cisstMultiTaskPython.mtsVctFloat2_swigregister
mtsVctFloat2_swigregister(mtsVctFloat2)

def mtsVctFloat2_ClassServices():
  """mtsVctFloat2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat2_ClassServices()

class mtsVctFloat3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat3Base self) -> mtsGenericObjectProxyBase< vctFloat3 >::value_type
        GetData(mtsVctFloat3Base self) -> mtsGenericObjectProxyBase< vctFloat3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat3Base self, mtsVctFloat3Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat3Base_Assign(self, *args)

mtsVctFloat3Base_swigregister = _cisstMultiTaskPython.mtsVctFloat3Base_swigregister
mtsVctFloat3Base_swigregister(mtsVctFloat3Base)

def mtsVctFloat3Base_ClassServices():
  """mtsVctFloat3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat3Base_ClassServices()

class mtsVctFloat3(mtsVctFloat3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat3_Data_get, _cisstMultiTaskPython.mtsVctFloat3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat3)> self) -> mtsVctFloat3
        __init__(mtsGenericObjectProxy<(vctFloat3)> self, mtsVctFloat3 other) -> mtsVctFloat3
        __init__(mtsGenericObjectProxy<(vctFloat3)> self, mtsGenericObjectProxy< vctFloat3 >::value_type const & data) -> mtsVctFloat3
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat3 self) -> mtsGenericObjectProxy< vctFloat3 >::value_type
        GetData(mtsVctFloat3 self) -> mtsGenericObjectProxy< vctFloat3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat3 self) -> vctFloat3"""
        return _cisstMultiTaskPython.mtsVctFloat3_GetDataCopy(self)

mtsVctFloat3_swigregister = _cisstMultiTaskPython.mtsVctFloat3_swigregister
mtsVctFloat3_swigregister(mtsVctFloat3)

def mtsVctFloat3_ClassServices():
  """mtsVctFloat3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat3_ClassServices()

class mtsVctFloat4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat4Base self) -> mtsGenericObjectProxyBase< vctFloat4 >::value_type
        GetData(mtsVctFloat4Base self) -> mtsGenericObjectProxyBase< vctFloat4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat4Base self, mtsVctFloat4Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat4Base_Assign(self, *args)

mtsVctFloat4Base_swigregister = _cisstMultiTaskPython.mtsVctFloat4Base_swigregister
mtsVctFloat4Base_swigregister(mtsVctFloat4Base)

def mtsVctFloat4Base_ClassServices():
  """mtsVctFloat4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat4Base_ClassServices()

class mtsVctFloat4(mtsVctFloat4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat4_Data_get, _cisstMultiTaskPython.mtsVctFloat4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat4)> self) -> mtsVctFloat4
        __init__(mtsGenericObjectProxy<(vctFloat4)> self, mtsVctFloat4 other) -> mtsVctFloat4
        __init__(mtsGenericObjectProxy<(vctFloat4)> self, mtsGenericObjectProxy< vctFloat4 >::value_type const & data) -> mtsVctFloat4
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat4 self) -> mtsGenericObjectProxy< vctFloat4 >::value_type
        GetData(mtsVctFloat4 self) -> mtsGenericObjectProxy< vctFloat4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat4 self) -> vctFloat4"""
        return _cisstMultiTaskPython.mtsVctFloat4_GetDataCopy(self)

mtsVctFloat4_swigregister = _cisstMultiTaskPython.mtsVctFloat4_swigregister
mtsVctFloat4_swigregister(mtsVctFloat4)

def mtsVctFloat4_ClassServices():
  """mtsVctFloat4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat4_ClassServices()

class mtsVctFloat5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat5Base self) -> mtsGenericObjectProxyBase< vctFloat5 >::value_type
        GetData(mtsVctFloat5Base self) -> mtsGenericObjectProxyBase< vctFloat5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat5Base self, mtsVctFloat5Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat5Base_Assign(self, *args)

mtsVctFloat5Base_swigregister = _cisstMultiTaskPython.mtsVctFloat5Base_swigregister
mtsVctFloat5Base_swigregister(mtsVctFloat5Base)

def mtsVctFloat5Base_ClassServices():
  """mtsVctFloat5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat5Base_ClassServices()

class mtsVctFloat5(mtsVctFloat5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat5_Data_get, _cisstMultiTaskPython.mtsVctFloat5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat5)> self) -> mtsVctFloat5
        __init__(mtsGenericObjectProxy<(vctFloat5)> self, mtsVctFloat5 other) -> mtsVctFloat5
        __init__(mtsGenericObjectProxy<(vctFloat5)> self, mtsGenericObjectProxy< vctFloat5 >::value_type const & data) -> mtsVctFloat5
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat5 self) -> mtsGenericObjectProxy< vctFloat5 >::value_type
        GetData(mtsVctFloat5 self) -> mtsGenericObjectProxy< vctFloat5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat5 self) -> vctFloat5"""
        return _cisstMultiTaskPython.mtsVctFloat5_GetDataCopy(self)

mtsVctFloat5_swigregister = _cisstMultiTaskPython.mtsVctFloat5_swigregister
mtsVctFloat5_swigregister(mtsVctFloat5)

def mtsVctFloat5_ClassServices():
  """mtsVctFloat5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat5_ClassServices()

class mtsVctFloat6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat6Base self) -> mtsGenericObjectProxyBase< vctFloat6 >::value_type
        GetData(mtsVctFloat6Base self) -> mtsGenericObjectProxyBase< vctFloat6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat6Base self, mtsVctFloat6Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat6Base_Assign(self, *args)

mtsVctFloat6Base_swigregister = _cisstMultiTaskPython.mtsVctFloat6Base_swigregister
mtsVctFloat6Base_swigregister(mtsVctFloat6Base)

def mtsVctFloat6Base_ClassServices():
  """mtsVctFloat6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat6Base_ClassServices()

class mtsVctFloat6(mtsVctFloat6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat6_Data_get, _cisstMultiTaskPython.mtsVctFloat6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat6)> self) -> mtsVctFloat6
        __init__(mtsGenericObjectProxy<(vctFloat6)> self, mtsVctFloat6 other) -> mtsVctFloat6
        __init__(mtsGenericObjectProxy<(vctFloat6)> self, mtsGenericObjectProxy< vctFloat6 >::value_type const & data) -> mtsVctFloat6
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat6 self) -> mtsGenericObjectProxy< vctFloat6 >::value_type
        GetData(mtsVctFloat6 self) -> mtsGenericObjectProxy< vctFloat6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat6 self) -> vctFloat6"""
        return _cisstMultiTaskPython.mtsVctFloat6_GetDataCopy(self)

mtsVctFloat6_swigregister = _cisstMultiTaskPython.mtsVctFloat6_swigregister
mtsVctFloat6_swigregister(mtsVctFloat6)

def mtsVctFloat6_ClassServices():
  """mtsVctFloat6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat6_ClassServices()

class mtsVctFloat7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat7Base self) -> mtsGenericObjectProxyBase< vctFloat7 >::value_type
        GetData(mtsVctFloat7Base self) -> mtsGenericObjectProxyBase< vctFloat7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat7Base self, mtsVctFloat7Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat7Base_Assign(self, *args)

mtsVctFloat7Base_swigregister = _cisstMultiTaskPython.mtsVctFloat7Base_swigregister
mtsVctFloat7Base_swigregister(mtsVctFloat7Base)

def mtsVctFloat7Base_ClassServices():
  """mtsVctFloat7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat7Base_ClassServices()

class mtsVctFloat7(mtsVctFloat7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat7_Data_get, _cisstMultiTaskPython.mtsVctFloat7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat7)> self) -> mtsVctFloat7
        __init__(mtsGenericObjectProxy<(vctFloat7)> self, mtsVctFloat7 other) -> mtsVctFloat7
        __init__(mtsGenericObjectProxy<(vctFloat7)> self, mtsGenericObjectProxy< vctFloat7 >::value_type const & data) -> mtsVctFloat7
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat7 self) -> mtsGenericObjectProxy< vctFloat7 >::value_type
        GetData(mtsVctFloat7 self) -> mtsGenericObjectProxy< vctFloat7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat7 self) -> vctFloat7"""
        return _cisstMultiTaskPython.mtsVctFloat7_GetDataCopy(self)

mtsVctFloat7_swigregister = _cisstMultiTaskPython.mtsVctFloat7_swigregister
mtsVctFloat7_swigregister(mtsVctFloat7)

def mtsVctFloat7_ClassServices():
  """mtsVctFloat7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat7_ClassServices()

class mtsVctFloat8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat8Base self) -> mtsGenericObjectProxyBase< vctFloat8 >::value_type
        GetData(mtsVctFloat8Base self) -> mtsGenericObjectProxyBase< vctFloat8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat8Base self, mtsVctFloat8Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat8Base_Assign(self, *args)

mtsVctFloat8Base_swigregister = _cisstMultiTaskPython.mtsVctFloat8Base_swigregister
mtsVctFloat8Base_swigregister(mtsVctFloat8Base)

def mtsVctFloat8Base_ClassServices():
  """mtsVctFloat8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat8Base_ClassServices()

class mtsVctFloat8(mtsVctFloat8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat8_Data_get, _cisstMultiTaskPython.mtsVctFloat8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat8)> self) -> mtsVctFloat8
        __init__(mtsGenericObjectProxy<(vctFloat8)> self, mtsVctFloat8 other) -> mtsVctFloat8
        __init__(mtsGenericObjectProxy<(vctFloat8)> self, mtsGenericObjectProxy< vctFloat8 >::value_type const & data) -> mtsVctFloat8
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat8 self) -> mtsGenericObjectProxy< vctFloat8 >::value_type
        GetData(mtsVctFloat8 self) -> mtsGenericObjectProxy< vctFloat8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat8 self) -> vctFloat8"""
        return _cisstMultiTaskPython.mtsVctFloat8_GetDataCopy(self)

mtsVctFloat8_swigregister = _cisstMultiTaskPython.mtsVctFloat8_swigregister
mtsVctFloat8_swigregister(mtsVctFloat8)

def mtsVctFloat8_ClassServices():
  """mtsVctFloat8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat8_ClassServices()

class mtsVctFloat9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloat9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat9Base self) -> mtsGenericObjectProxyBase< vctFloat9 >::value_type
        GetData(mtsVctFloat9Base self) -> mtsGenericObjectProxyBase< vctFloat9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloat9Base self, mtsVctFloat9Base other)"""
        return _cisstMultiTaskPython.mtsVctFloat9Base_Assign(self, *args)

mtsVctFloat9Base_swigregister = _cisstMultiTaskPython.mtsVctFloat9Base_swigregister
mtsVctFloat9Base_swigregister(mtsVctFloat9Base)

def mtsVctFloat9Base_ClassServices():
  """mtsVctFloat9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat9Base_ClassServices()

class mtsVctFloat9(mtsVctFloat9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloat9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloat9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloat9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloat9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloat9_Data_get, _cisstMultiTaskPython.mtsVctFloat9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloat9)> self) -> mtsVctFloat9
        __init__(mtsGenericObjectProxy<(vctFloat9)> self, mtsVctFloat9 other) -> mtsVctFloat9
        __init__(mtsGenericObjectProxy<(vctFloat9)> self, mtsGenericObjectProxy< vctFloat9 >::value_type const & data) -> mtsVctFloat9
        """
        this = _cisstMultiTaskPython.new_mtsVctFloat9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloat9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloat9 self) -> mtsGenericObjectProxy< vctFloat9 >::value_type
        GetData(mtsVctFloat9 self) -> mtsGenericObjectProxy< vctFloat9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloat9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloat9 self) -> vctFloat9"""
        return _cisstMultiTaskPython.mtsVctFloat9_GetDataCopy(self)

mtsVctFloat9_swigregister = _cisstMultiTaskPython.mtsVctFloat9_swigregister
mtsVctFloat9_swigregister(mtsVctFloat9)

def mtsVctFloat9_ClassServices():
  """mtsVctFloat9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloat9_ClassServices()

class mtsVctLong1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong1Base self) -> mtsGenericObjectProxyBase< vctLong1 >::value_type
        GetData(mtsVctLong1Base self) -> mtsGenericObjectProxyBase< vctLong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong1Base self, mtsVctLong1Base other)"""
        return _cisstMultiTaskPython.mtsVctLong1Base_Assign(self, *args)

mtsVctLong1Base_swigregister = _cisstMultiTaskPython.mtsVctLong1Base_swigregister
mtsVctLong1Base_swigregister(mtsVctLong1Base)

def mtsVctLong1Base_ClassServices():
  """mtsVctLong1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong1Base_ClassServices()

class mtsVctLong1(mtsVctLong1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong1_Data_get, _cisstMultiTaskPython.mtsVctLong1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong1)> self) -> mtsVctLong1
        __init__(mtsGenericObjectProxy<(vctLong1)> self, mtsVctLong1 other) -> mtsVctLong1
        __init__(mtsGenericObjectProxy<(vctLong1)> self, mtsGenericObjectProxy< vctLong1 >::value_type const & data) -> mtsVctLong1
        """
        this = _cisstMultiTaskPython.new_mtsVctLong1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong1 self) -> mtsGenericObjectProxy< vctLong1 >::value_type
        GetData(mtsVctLong1 self) -> mtsGenericObjectProxy< vctLong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong1 self) -> vctLong1"""
        return _cisstMultiTaskPython.mtsVctLong1_GetDataCopy(self)

mtsVctLong1_swigregister = _cisstMultiTaskPython.mtsVctLong1_swigregister
mtsVctLong1_swigregister(mtsVctLong1)

def mtsVctLong1_ClassServices():
  """mtsVctLong1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong1_ClassServices()

class mtsVctLong2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong2Base self) -> mtsGenericObjectProxyBase< vctLong2 >::value_type
        GetData(mtsVctLong2Base self) -> mtsGenericObjectProxyBase< vctLong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong2Base self, mtsVctLong2Base other)"""
        return _cisstMultiTaskPython.mtsVctLong2Base_Assign(self, *args)

mtsVctLong2Base_swigregister = _cisstMultiTaskPython.mtsVctLong2Base_swigregister
mtsVctLong2Base_swigregister(mtsVctLong2Base)

def mtsVctLong2Base_ClassServices():
  """mtsVctLong2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong2Base_ClassServices()

class mtsVctLong2(mtsVctLong2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong2_Data_get, _cisstMultiTaskPython.mtsVctLong2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong2)> self) -> mtsVctLong2
        __init__(mtsGenericObjectProxy<(vctLong2)> self, mtsVctLong2 other) -> mtsVctLong2
        __init__(mtsGenericObjectProxy<(vctLong2)> self, mtsGenericObjectProxy< vctLong2 >::value_type const & data) -> mtsVctLong2
        """
        this = _cisstMultiTaskPython.new_mtsVctLong2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong2 self) -> mtsGenericObjectProxy< vctLong2 >::value_type
        GetData(mtsVctLong2 self) -> mtsGenericObjectProxy< vctLong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong2 self) -> vctLong2"""
        return _cisstMultiTaskPython.mtsVctLong2_GetDataCopy(self)

mtsVctLong2_swigregister = _cisstMultiTaskPython.mtsVctLong2_swigregister
mtsVctLong2_swigregister(mtsVctLong2)

def mtsVctLong2_ClassServices():
  """mtsVctLong2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong2_ClassServices()

class mtsVctLong3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong3Base self) -> mtsGenericObjectProxyBase< vctLong3 >::value_type
        GetData(mtsVctLong3Base self) -> mtsGenericObjectProxyBase< vctLong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong3Base self, mtsVctLong3Base other)"""
        return _cisstMultiTaskPython.mtsVctLong3Base_Assign(self, *args)

mtsVctLong3Base_swigregister = _cisstMultiTaskPython.mtsVctLong3Base_swigregister
mtsVctLong3Base_swigregister(mtsVctLong3Base)

def mtsVctLong3Base_ClassServices():
  """mtsVctLong3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong3Base_ClassServices()

class mtsVctLong3(mtsVctLong3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong3_Data_get, _cisstMultiTaskPython.mtsVctLong3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong3)> self) -> mtsVctLong3
        __init__(mtsGenericObjectProxy<(vctLong3)> self, mtsVctLong3 other) -> mtsVctLong3
        __init__(mtsGenericObjectProxy<(vctLong3)> self, mtsGenericObjectProxy< vctLong3 >::value_type const & data) -> mtsVctLong3
        """
        this = _cisstMultiTaskPython.new_mtsVctLong3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong3 self) -> mtsGenericObjectProxy< vctLong3 >::value_type
        GetData(mtsVctLong3 self) -> mtsGenericObjectProxy< vctLong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong3 self) -> vctLong3"""
        return _cisstMultiTaskPython.mtsVctLong3_GetDataCopy(self)

mtsVctLong3_swigregister = _cisstMultiTaskPython.mtsVctLong3_swigregister
mtsVctLong3_swigregister(mtsVctLong3)

def mtsVctLong3_ClassServices():
  """mtsVctLong3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong3_ClassServices()

class mtsVctLong4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong4Base self) -> mtsGenericObjectProxyBase< vctLong4 >::value_type
        GetData(mtsVctLong4Base self) -> mtsGenericObjectProxyBase< vctLong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong4Base self, mtsVctLong4Base other)"""
        return _cisstMultiTaskPython.mtsVctLong4Base_Assign(self, *args)

mtsVctLong4Base_swigregister = _cisstMultiTaskPython.mtsVctLong4Base_swigregister
mtsVctLong4Base_swigregister(mtsVctLong4Base)

def mtsVctLong4Base_ClassServices():
  """mtsVctLong4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong4Base_ClassServices()

class mtsVctLong4(mtsVctLong4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong4_Data_get, _cisstMultiTaskPython.mtsVctLong4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong4)> self) -> mtsVctLong4
        __init__(mtsGenericObjectProxy<(vctLong4)> self, mtsVctLong4 other) -> mtsVctLong4
        __init__(mtsGenericObjectProxy<(vctLong4)> self, mtsGenericObjectProxy< vctLong4 >::value_type const & data) -> mtsVctLong4
        """
        this = _cisstMultiTaskPython.new_mtsVctLong4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong4 self) -> mtsGenericObjectProxy< vctLong4 >::value_type
        GetData(mtsVctLong4 self) -> mtsGenericObjectProxy< vctLong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong4 self) -> vctLong4"""
        return _cisstMultiTaskPython.mtsVctLong4_GetDataCopy(self)

mtsVctLong4_swigregister = _cisstMultiTaskPython.mtsVctLong4_swigregister
mtsVctLong4_swigregister(mtsVctLong4)

def mtsVctLong4_ClassServices():
  """mtsVctLong4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong4_ClassServices()

class mtsVctLong5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong5Base self) -> mtsGenericObjectProxyBase< vctLong5 >::value_type
        GetData(mtsVctLong5Base self) -> mtsGenericObjectProxyBase< vctLong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong5Base self, mtsVctLong5Base other)"""
        return _cisstMultiTaskPython.mtsVctLong5Base_Assign(self, *args)

mtsVctLong5Base_swigregister = _cisstMultiTaskPython.mtsVctLong5Base_swigregister
mtsVctLong5Base_swigregister(mtsVctLong5Base)

def mtsVctLong5Base_ClassServices():
  """mtsVctLong5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong5Base_ClassServices()

class mtsVctLong5(mtsVctLong5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong5_Data_get, _cisstMultiTaskPython.mtsVctLong5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong5)> self) -> mtsVctLong5
        __init__(mtsGenericObjectProxy<(vctLong5)> self, mtsVctLong5 other) -> mtsVctLong5
        __init__(mtsGenericObjectProxy<(vctLong5)> self, mtsGenericObjectProxy< vctLong5 >::value_type const & data) -> mtsVctLong5
        """
        this = _cisstMultiTaskPython.new_mtsVctLong5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong5 self) -> mtsGenericObjectProxy< vctLong5 >::value_type
        GetData(mtsVctLong5 self) -> mtsGenericObjectProxy< vctLong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong5 self) -> vctLong5"""
        return _cisstMultiTaskPython.mtsVctLong5_GetDataCopy(self)

mtsVctLong5_swigregister = _cisstMultiTaskPython.mtsVctLong5_swigregister
mtsVctLong5_swigregister(mtsVctLong5)

def mtsVctLong5_ClassServices():
  """mtsVctLong5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong5_ClassServices()

class mtsVctLong6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong6Base self) -> mtsGenericObjectProxyBase< vctLong6 >::value_type
        GetData(mtsVctLong6Base self) -> mtsGenericObjectProxyBase< vctLong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong6Base self, mtsVctLong6Base other)"""
        return _cisstMultiTaskPython.mtsVctLong6Base_Assign(self, *args)

mtsVctLong6Base_swigregister = _cisstMultiTaskPython.mtsVctLong6Base_swigregister
mtsVctLong6Base_swigregister(mtsVctLong6Base)

def mtsVctLong6Base_ClassServices():
  """mtsVctLong6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong6Base_ClassServices()

class mtsVctLong6(mtsVctLong6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong6_Data_get, _cisstMultiTaskPython.mtsVctLong6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong6)> self) -> mtsVctLong6
        __init__(mtsGenericObjectProxy<(vctLong6)> self, mtsVctLong6 other) -> mtsVctLong6
        __init__(mtsGenericObjectProxy<(vctLong6)> self, mtsGenericObjectProxy< vctLong6 >::value_type const & data) -> mtsVctLong6
        """
        this = _cisstMultiTaskPython.new_mtsVctLong6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong6 self) -> mtsGenericObjectProxy< vctLong6 >::value_type
        GetData(mtsVctLong6 self) -> mtsGenericObjectProxy< vctLong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong6 self) -> vctLong6"""
        return _cisstMultiTaskPython.mtsVctLong6_GetDataCopy(self)

mtsVctLong6_swigregister = _cisstMultiTaskPython.mtsVctLong6_swigregister
mtsVctLong6_swigregister(mtsVctLong6)

def mtsVctLong6_ClassServices():
  """mtsVctLong6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong6_ClassServices()

class mtsVctLong7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong7Base self) -> mtsGenericObjectProxyBase< vctLong7 >::value_type
        GetData(mtsVctLong7Base self) -> mtsGenericObjectProxyBase< vctLong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong7Base self, mtsVctLong7Base other)"""
        return _cisstMultiTaskPython.mtsVctLong7Base_Assign(self, *args)

mtsVctLong7Base_swigregister = _cisstMultiTaskPython.mtsVctLong7Base_swigregister
mtsVctLong7Base_swigregister(mtsVctLong7Base)

def mtsVctLong7Base_ClassServices():
  """mtsVctLong7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong7Base_ClassServices()

class mtsVctLong7(mtsVctLong7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong7_Data_get, _cisstMultiTaskPython.mtsVctLong7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong7)> self) -> mtsVctLong7
        __init__(mtsGenericObjectProxy<(vctLong7)> self, mtsVctLong7 other) -> mtsVctLong7
        __init__(mtsGenericObjectProxy<(vctLong7)> self, mtsGenericObjectProxy< vctLong7 >::value_type const & data) -> mtsVctLong7
        """
        this = _cisstMultiTaskPython.new_mtsVctLong7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong7 self) -> mtsGenericObjectProxy< vctLong7 >::value_type
        GetData(mtsVctLong7 self) -> mtsGenericObjectProxy< vctLong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong7 self) -> vctLong7"""
        return _cisstMultiTaskPython.mtsVctLong7_GetDataCopy(self)

mtsVctLong7_swigregister = _cisstMultiTaskPython.mtsVctLong7_swigregister
mtsVctLong7_swigregister(mtsVctLong7)

def mtsVctLong7_ClassServices():
  """mtsVctLong7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong7_ClassServices()

class mtsVctLong8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong8Base self) -> mtsGenericObjectProxyBase< vctLong8 >::value_type
        GetData(mtsVctLong8Base self) -> mtsGenericObjectProxyBase< vctLong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong8Base self, mtsVctLong8Base other)"""
        return _cisstMultiTaskPython.mtsVctLong8Base_Assign(self, *args)

mtsVctLong8Base_swigregister = _cisstMultiTaskPython.mtsVctLong8Base_swigregister
mtsVctLong8Base_swigregister(mtsVctLong8Base)

def mtsVctLong8Base_ClassServices():
  """mtsVctLong8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong8Base_ClassServices()

class mtsVctLong8(mtsVctLong8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong8_Data_get, _cisstMultiTaskPython.mtsVctLong8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong8)> self) -> mtsVctLong8
        __init__(mtsGenericObjectProxy<(vctLong8)> self, mtsVctLong8 other) -> mtsVctLong8
        __init__(mtsGenericObjectProxy<(vctLong8)> self, mtsGenericObjectProxy< vctLong8 >::value_type const & data) -> mtsVctLong8
        """
        this = _cisstMultiTaskPython.new_mtsVctLong8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong8 self) -> mtsGenericObjectProxy< vctLong8 >::value_type
        GetData(mtsVctLong8 self) -> mtsGenericObjectProxy< vctLong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong8 self) -> vctLong8"""
        return _cisstMultiTaskPython.mtsVctLong8_GetDataCopy(self)

mtsVctLong8_swigregister = _cisstMultiTaskPython.mtsVctLong8_swigregister
mtsVctLong8_swigregister(mtsVctLong8)

def mtsVctLong8_ClassServices():
  """mtsVctLong8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong8_ClassServices()

class mtsVctLong9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLong9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong9Base self) -> mtsGenericObjectProxyBase< vctLong9 >::value_type
        GetData(mtsVctLong9Base self) -> mtsGenericObjectProxyBase< vctLong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLong9Base self, mtsVctLong9Base other)"""
        return _cisstMultiTaskPython.mtsVctLong9Base_Assign(self, *args)

mtsVctLong9Base_swigregister = _cisstMultiTaskPython.mtsVctLong9Base_swigregister
mtsVctLong9Base_swigregister(mtsVctLong9Base)

def mtsVctLong9Base_ClassServices():
  """mtsVctLong9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong9Base_ClassServices()

class mtsVctLong9(mtsVctLong9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctLong9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLong9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLong9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLong9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLong9_Data_get, _cisstMultiTaskPython.mtsVctLong9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLong9)> self) -> mtsVctLong9
        __init__(mtsGenericObjectProxy<(vctLong9)> self, mtsVctLong9 other) -> mtsVctLong9
        __init__(mtsGenericObjectProxy<(vctLong9)> self, mtsGenericObjectProxy< vctLong9 >::value_type const & data) -> mtsVctLong9
        """
        this = _cisstMultiTaskPython.new_mtsVctLong9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLong9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLong9 self) -> mtsGenericObjectProxy< vctLong9 >::value_type
        GetData(mtsVctLong9 self) -> mtsGenericObjectProxy< vctLong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLong9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLong9 self) -> vctLong9"""
        return _cisstMultiTaskPython.mtsVctLong9_GetDataCopy(self)

mtsVctLong9_swigregister = _cisstMultiTaskPython.mtsVctLong9_swigregister
mtsVctLong9_swigregister(mtsVctLong9)

def mtsVctLong9_ClassServices():
  """mtsVctLong9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLong9_ClassServices()

class mtsVctULong1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong1Base self) -> mtsGenericObjectProxyBase< vctULong1 >::value_type
        GetData(mtsVctULong1Base self) -> mtsGenericObjectProxyBase< vctULong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong1Base self, mtsVctULong1Base other)"""
        return _cisstMultiTaskPython.mtsVctULong1Base_Assign(self, *args)

mtsVctULong1Base_swigregister = _cisstMultiTaskPython.mtsVctULong1Base_swigregister
mtsVctULong1Base_swigregister(mtsVctULong1Base)

def mtsVctULong1Base_ClassServices():
  """mtsVctULong1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong1Base_ClassServices()

class mtsVctULong1(mtsVctULong1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong1_Data_get, _cisstMultiTaskPython.mtsVctULong1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong1)> self) -> mtsVctULong1
        __init__(mtsGenericObjectProxy<(vctULong1)> self, mtsVctULong1 other) -> mtsVctULong1
        __init__(mtsGenericObjectProxy<(vctULong1)> self, mtsGenericObjectProxy< vctULong1 >::value_type const & data) -> mtsVctULong1
        """
        this = _cisstMultiTaskPython.new_mtsVctULong1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong1 self) -> mtsGenericObjectProxy< vctULong1 >::value_type
        GetData(mtsVctULong1 self) -> mtsGenericObjectProxy< vctULong1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong1 self) -> vctULong1"""
        return _cisstMultiTaskPython.mtsVctULong1_GetDataCopy(self)

mtsVctULong1_swigregister = _cisstMultiTaskPython.mtsVctULong1_swigregister
mtsVctULong1_swigregister(mtsVctULong1)

def mtsVctULong1_ClassServices():
  """mtsVctULong1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong1_ClassServices()

class mtsVctULong2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong2Base self) -> mtsGenericObjectProxyBase< vctULong2 >::value_type
        GetData(mtsVctULong2Base self) -> mtsGenericObjectProxyBase< vctULong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong2Base self, mtsVctULong2Base other)"""
        return _cisstMultiTaskPython.mtsVctULong2Base_Assign(self, *args)

mtsVctULong2Base_swigregister = _cisstMultiTaskPython.mtsVctULong2Base_swigregister
mtsVctULong2Base_swigregister(mtsVctULong2Base)

def mtsVctULong2Base_ClassServices():
  """mtsVctULong2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong2Base_ClassServices()

class mtsVctULong2(mtsVctULong2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong2_Data_get, _cisstMultiTaskPython.mtsVctULong2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong2)> self) -> mtsVctULong2
        __init__(mtsGenericObjectProxy<(vctULong2)> self, mtsVctULong2 other) -> mtsVctULong2
        __init__(mtsGenericObjectProxy<(vctULong2)> self, mtsGenericObjectProxy< vctULong2 >::value_type const & data) -> mtsVctULong2
        """
        this = _cisstMultiTaskPython.new_mtsVctULong2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong2 self) -> mtsGenericObjectProxy< vctULong2 >::value_type
        GetData(mtsVctULong2 self) -> mtsGenericObjectProxy< vctULong2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong2 self) -> vctULong2"""
        return _cisstMultiTaskPython.mtsVctULong2_GetDataCopy(self)

mtsVctULong2_swigregister = _cisstMultiTaskPython.mtsVctULong2_swigregister
mtsVctULong2_swigregister(mtsVctULong2)

def mtsVctULong2_ClassServices():
  """mtsVctULong2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong2_ClassServices()

class mtsVctULong3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong3Base self) -> mtsGenericObjectProxyBase< vctULong3 >::value_type
        GetData(mtsVctULong3Base self) -> mtsGenericObjectProxyBase< vctULong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong3Base self, mtsVctULong3Base other)"""
        return _cisstMultiTaskPython.mtsVctULong3Base_Assign(self, *args)

mtsVctULong3Base_swigregister = _cisstMultiTaskPython.mtsVctULong3Base_swigregister
mtsVctULong3Base_swigregister(mtsVctULong3Base)

def mtsVctULong3Base_ClassServices():
  """mtsVctULong3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong3Base_ClassServices()

class mtsVctULong3(mtsVctULong3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong3_Data_get, _cisstMultiTaskPython.mtsVctULong3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong3)> self) -> mtsVctULong3
        __init__(mtsGenericObjectProxy<(vctULong3)> self, mtsVctULong3 other) -> mtsVctULong3
        __init__(mtsGenericObjectProxy<(vctULong3)> self, mtsGenericObjectProxy< vctULong3 >::value_type const & data) -> mtsVctULong3
        """
        this = _cisstMultiTaskPython.new_mtsVctULong3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong3 self) -> mtsGenericObjectProxy< vctULong3 >::value_type
        GetData(mtsVctULong3 self) -> mtsGenericObjectProxy< vctULong3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong3 self) -> vctULong3"""
        return _cisstMultiTaskPython.mtsVctULong3_GetDataCopy(self)

mtsVctULong3_swigregister = _cisstMultiTaskPython.mtsVctULong3_swigregister
mtsVctULong3_swigregister(mtsVctULong3)

def mtsVctULong3_ClassServices():
  """mtsVctULong3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong3_ClassServices()

class mtsVctULong4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong4Base self) -> mtsGenericObjectProxyBase< vctULong4 >::value_type
        GetData(mtsVctULong4Base self) -> mtsGenericObjectProxyBase< vctULong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong4Base self, mtsVctULong4Base other)"""
        return _cisstMultiTaskPython.mtsVctULong4Base_Assign(self, *args)

mtsVctULong4Base_swigregister = _cisstMultiTaskPython.mtsVctULong4Base_swigregister
mtsVctULong4Base_swigregister(mtsVctULong4Base)

def mtsVctULong4Base_ClassServices():
  """mtsVctULong4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong4Base_ClassServices()

class mtsVctULong4(mtsVctULong4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong4_Data_get, _cisstMultiTaskPython.mtsVctULong4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong4)> self) -> mtsVctULong4
        __init__(mtsGenericObjectProxy<(vctULong4)> self, mtsVctULong4 other) -> mtsVctULong4
        __init__(mtsGenericObjectProxy<(vctULong4)> self, mtsGenericObjectProxy< vctULong4 >::value_type const & data) -> mtsVctULong4
        """
        this = _cisstMultiTaskPython.new_mtsVctULong4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong4 self) -> mtsGenericObjectProxy< vctULong4 >::value_type
        GetData(mtsVctULong4 self) -> mtsGenericObjectProxy< vctULong4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong4 self) -> vctULong4"""
        return _cisstMultiTaskPython.mtsVctULong4_GetDataCopy(self)

mtsVctULong4_swigregister = _cisstMultiTaskPython.mtsVctULong4_swigregister
mtsVctULong4_swigregister(mtsVctULong4)

def mtsVctULong4_ClassServices():
  """mtsVctULong4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong4_ClassServices()

class mtsVctULong5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong5Base self) -> mtsGenericObjectProxyBase< vctULong5 >::value_type
        GetData(mtsVctULong5Base self) -> mtsGenericObjectProxyBase< vctULong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong5Base self, mtsVctULong5Base other)"""
        return _cisstMultiTaskPython.mtsVctULong5Base_Assign(self, *args)

mtsVctULong5Base_swigregister = _cisstMultiTaskPython.mtsVctULong5Base_swigregister
mtsVctULong5Base_swigregister(mtsVctULong5Base)

def mtsVctULong5Base_ClassServices():
  """mtsVctULong5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong5Base_ClassServices()

class mtsVctULong5(mtsVctULong5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong5_Data_get, _cisstMultiTaskPython.mtsVctULong5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong5)> self) -> mtsVctULong5
        __init__(mtsGenericObjectProxy<(vctULong5)> self, mtsVctULong5 other) -> mtsVctULong5
        __init__(mtsGenericObjectProxy<(vctULong5)> self, mtsGenericObjectProxy< vctULong5 >::value_type const & data) -> mtsVctULong5
        """
        this = _cisstMultiTaskPython.new_mtsVctULong5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong5 self) -> mtsGenericObjectProxy< vctULong5 >::value_type
        GetData(mtsVctULong5 self) -> mtsGenericObjectProxy< vctULong5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong5 self) -> vctULong5"""
        return _cisstMultiTaskPython.mtsVctULong5_GetDataCopy(self)

mtsVctULong5_swigregister = _cisstMultiTaskPython.mtsVctULong5_swigregister
mtsVctULong5_swigregister(mtsVctULong5)

def mtsVctULong5_ClassServices():
  """mtsVctULong5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong5_ClassServices()

class mtsVctULong6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong6Base self) -> mtsGenericObjectProxyBase< vctULong6 >::value_type
        GetData(mtsVctULong6Base self) -> mtsGenericObjectProxyBase< vctULong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong6Base self, mtsVctULong6Base other)"""
        return _cisstMultiTaskPython.mtsVctULong6Base_Assign(self, *args)

mtsVctULong6Base_swigregister = _cisstMultiTaskPython.mtsVctULong6Base_swigregister
mtsVctULong6Base_swigregister(mtsVctULong6Base)

def mtsVctULong6Base_ClassServices():
  """mtsVctULong6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong6Base_ClassServices()

class mtsVctULong6(mtsVctULong6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong6_Data_get, _cisstMultiTaskPython.mtsVctULong6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong6)> self) -> mtsVctULong6
        __init__(mtsGenericObjectProxy<(vctULong6)> self, mtsVctULong6 other) -> mtsVctULong6
        __init__(mtsGenericObjectProxy<(vctULong6)> self, mtsGenericObjectProxy< vctULong6 >::value_type const & data) -> mtsVctULong6
        """
        this = _cisstMultiTaskPython.new_mtsVctULong6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong6 self) -> mtsGenericObjectProxy< vctULong6 >::value_type
        GetData(mtsVctULong6 self) -> mtsGenericObjectProxy< vctULong6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong6 self) -> vctULong6"""
        return _cisstMultiTaskPython.mtsVctULong6_GetDataCopy(self)

mtsVctULong6_swigregister = _cisstMultiTaskPython.mtsVctULong6_swigregister
mtsVctULong6_swigregister(mtsVctULong6)

def mtsVctULong6_ClassServices():
  """mtsVctULong6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong6_ClassServices()

class mtsVctULong7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong7Base self) -> mtsGenericObjectProxyBase< vctULong7 >::value_type
        GetData(mtsVctULong7Base self) -> mtsGenericObjectProxyBase< vctULong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong7Base self, mtsVctULong7Base other)"""
        return _cisstMultiTaskPython.mtsVctULong7Base_Assign(self, *args)

mtsVctULong7Base_swigregister = _cisstMultiTaskPython.mtsVctULong7Base_swigregister
mtsVctULong7Base_swigregister(mtsVctULong7Base)

def mtsVctULong7Base_ClassServices():
  """mtsVctULong7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong7Base_ClassServices()

class mtsVctULong7(mtsVctULong7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong7_Data_get, _cisstMultiTaskPython.mtsVctULong7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong7)> self) -> mtsVctULong7
        __init__(mtsGenericObjectProxy<(vctULong7)> self, mtsVctULong7 other) -> mtsVctULong7
        __init__(mtsGenericObjectProxy<(vctULong7)> self, mtsGenericObjectProxy< vctULong7 >::value_type const & data) -> mtsVctULong7
        """
        this = _cisstMultiTaskPython.new_mtsVctULong7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong7 self) -> mtsGenericObjectProxy< vctULong7 >::value_type
        GetData(mtsVctULong7 self) -> mtsGenericObjectProxy< vctULong7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong7 self) -> vctULong7"""
        return _cisstMultiTaskPython.mtsVctULong7_GetDataCopy(self)

mtsVctULong7_swigregister = _cisstMultiTaskPython.mtsVctULong7_swigregister
mtsVctULong7_swigregister(mtsVctULong7)

def mtsVctULong7_ClassServices():
  """mtsVctULong7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong7_ClassServices()

class mtsVctULong8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong8Base self) -> mtsGenericObjectProxyBase< vctULong8 >::value_type
        GetData(mtsVctULong8Base self) -> mtsGenericObjectProxyBase< vctULong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong8Base self, mtsVctULong8Base other)"""
        return _cisstMultiTaskPython.mtsVctULong8Base_Assign(self, *args)

mtsVctULong8Base_swigregister = _cisstMultiTaskPython.mtsVctULong8Base_swigregister
mtsVctULong8Base_swigregister(mtsVctULong8Base)

def mtsVctULong8Base_ClassServices():
  """mtsVctULong8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong8Base_ClassServices()

class mtsVctULong8(mtsVctULong8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong8_Data_get, _cisstMultiTaskPython.mtsVctULong8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong8)> self) -> mtsVctULong8
        __init__(mtsGenericObjectProxy<(vctULong8)> self, mtsVctULong8 other) -> mtsVctULong8
        __init__(mtsGenericObjectProxy<(vctULong8)> self, mtsGenericObjectProxy< vctULong8 >::value_type const & data) -> mtsVctULong8
        """
        this = _cisstMultiTaskPython.new_mtsVctULong8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong8 self) -> mtsGenericObjectProxy< vctULong8 >::value_type
        GetData(mtsVctULong8 self) -> mtsGenericObjectProxy< vctULong8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong8 self) -> vctULong8"""
        return _cisstMultiTaskPython.mtsVctULong8_GetDataCopy(self)

mtsVctULong8_swigregister = _cisstMultiTaskPython.mtsVctULong8_swigregister
mtsVctULong8_swigregister(mtsVctULong8)

def mtsVctULong8_ClassServices():
  """mtsVctULong8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong8_ClassServices()

class mtsVctULong9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULong9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong9Base self) -> mtsGenericObjectProxyBase< vctULong9 >::value_type
        GetData(mtsVctULong9Base self) -> mtsGenericObjectProxyBase< vctULong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULong9Base self, mtsVctULong9Base other)"""
        return _cisstMultiTaskPython.mtsVctULong9Base_Assign(self, *args)

mtsVctULong9Base_swigregister = _cisstMultiTaskPython.mtsVctULong9Base_swigregister
mtsVctULong9Base_swigregister(mtsVctULong9Base)

def mtsVctULong9Base_ClassServices():
  """mtsVctULong9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong9Base_ClassServices()

class mtsVctULong9(mtsVctULong9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctULong9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULong9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULong9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULong9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULong9_Data_get, _cisstMultiTaskPython.mtsVctULong9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULong9)> self) -> mtsVctULong9
        __init__(mtsGenericObjectProxy<(vctULong9)> self, mtsVctULong9 other) -> mtsVctULong9
        __init__(mtsGenericObjectProxy<(vctULong9)> self, mtsGenericObjectProxy< vctULong9 >::value_type const & data) -> mtsVctULong9
        """
        this = _cisstMultiTaskPython.new_mtsVctULong9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULong9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULong9 self) -> mtsGenericObjectProxy< vctULong9 >::value_type
        GetData(mtsVctULong9 self) -> mtsGenericObjectProxy< vctULong9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULong9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULong9 self) -> vctULong9"""
        return _cisstMultiTaskPython.mtsVctULong9_GetDataCopy(self)

mtsVctULong9_swigregister = _cisstMultiTaskPython.mtsVctULong9_swigregister
mtsVctULong9_swigregister(mtsVctULong9)

def mtsVctULong9_ClassServices():
  """mtsVctULong9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULong9_ClassServices()

class mtsVctInt1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt1Base self) -> mtsGenericObjectProxyBase< vctInt1 >::value_type
        GetData(mtsVctInt1Base self) -> mtsGenericObjectProxyBase< vctInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt1Base self, mtsVctInt1Base other)"""
        return _cisstMultiTaskPython.mtsVctInt1Base_Assign(self, *args)

mtsVctInt1Base_swigregister = _cisstMultiTaskPython.mtsVctInt1Base_swigregister
mtsVctInt1Base_swigregister(mtsVctInt1Base)

def mtsVctInt1Base_ClassServices():
  """mtsVctInt1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt1Base_ClassServices()

class mtsVctInt1(mtsVctInt1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt1_Data_get, _cisstMultiTaskPython.mtsVctInt1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt1)> self) -> mtsVctInt1
        __init__(mtsGenericObjectProxy<(vctInt1)> self, mtsVctInt1 other) -> mtsVctInt1
        __init__(mtsGenericObjectProxy<(vctInt1)> self, mtsGenericObjectProxy< vctInt1 >::value_type const & data) -> mtsVctInt1
        """
        this = _cisstMultiTaskPython.new_mtsVctInt1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt1 self) -> mtsGenericObjectProxy< vctInt1 >::value_type
        GetData(mtsVctInt1 self) -> mtsGenericObjectProxy< vctInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt1 self) -> vctInt1"""
        return _cisstMultiTaskPython.mtsVctInt1_GetDataCopy(self)

mtsVctInt1_swigregister = _cisstMultiTaskPython.mtsVctInt1_swigregister
mtsVctInt1_swigregister(mtsVctInt1)

def mtsVctInt1_ClassServices():
  """mtsVctInt1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt1_ClassServices()

class mtsVctInt2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt2Base self) -> mtsGenericObjectProxyBase< vctInt2 >::value_type
        GetData(mtsVctInt2Base self) -> mtsGenericObjectProxyBase< vctInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt2Base self, mtsVctInt2Base other)"""
        return _cisstMultiTaskPython.mtsVctInt2Base_Assign(self, *args)

mtsVctInt2Base_swigregister = _cisstMultiTaskPython.mtsVctInt2Base_swigregister
mtsVctInt2Base_swigregister(mtsVctInt2Base)

def mtsVctInt2Base_ClassServices():
  """mtsVctInt2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt2Base_ClassServices()

class mtsVctInt2(mtsVctInt2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt2_Data_get, _cisstMultiTaskPython.mtsVctInt2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt2)> self) -> mtsVctInt2
        __init__(mtsGenericObjectProxy<(vctInt2)> self, mtsVctInt2 other) -> mtsVctInt2
        __init__(mtsGenericObjectProxy<(vctInt2)> self, mtsGenericObjectProxy< vctInt2 >::value_type const & data) -> mtsVctInt2
        """
        this = _cisstMultiTaskPython.new_mtsVctInt2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt2 self) -> mtsGenericObjectProxy< vctInt2 >::value_type
        GetData(mtsVctInt2 self) -> mtsGenericObjectProxy< vctInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt2 self) -> vctInt2"""
        return _cisstMultiTaskPython.mtsVctInt2_GetDataCopy(self)

mtsVctInt2_swigregister = _cisstMultiTaskPython.mtsVctInt2_swigregister
mtsVctInt2_swigregister(mtsVctInt2)

def mtsVctInt2_ClassServices():
  """mtsVctInt2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt2_ClassServices()

class mtsVctInt3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt3Base self) -> mtsGenericObjectProxyBase< vctInt3 >::value_type
        GetData(mtsVctInt3Base self) -> mtsGenericObjectProxyBase< vctInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt3Base self, mtsVctInt3Base other)"""
        return _cisstMultiTaskPython.mtsVctInt3Base_Assign(self, *args)

mtsVctInt3Base_swigregister = _cisstMultiTaskPython.mtsVctInt3Base_swigregister
mtsVctInt3Base_swigregister(mtsVctInt3Base)

def mtsVctInt3Base_ClassServices():
  """mtsVctInt3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt3Base_ClassServices()

class mtsVctInt3(mtsVctInt3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt3_Data_get, _cisstMultiTaskPython.mtsVctInt3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt3)> self) -> mtsVctInt3
        __init__(mtsGenericObjectProxy<(vctInt3)> self, mtsVctInt3 other) -> mtsVctInt3
        __init__(mtsGenericObjectProxy<(vctInt3)> self, mtsGenericObjectProxy< vctInt3 >::value_type const & data) -> mtsVctInt3
        """
        this = _cisstMultiTaskPython.new_mtsVctInt3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt3 self) -> mtsGenericObjectProxy< vctInt3 >::value_type
        GetData(mtsVctInt3 self) -> mtsGenericObjectProxy< vctInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt3 self) -> vctInt3"""
        return _cisstMultiTaskPython.mtsVctInt3_GetDataCopy(self)

mtsVctInt3_swigregister = _cisstMultiTaskPython.mtsVctInt3_swigregister
mtsVctInt3_swigregister(mtsVctInt3)

def mtsVctInt3_ClassServices():
  """mtsVctInt3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt3_ClassServices()

class mtsVctInt4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt4Base self) -> mtsGenericObjectProxyBase< vctInt4 >::value_type
        GetData(mtsVctInt4Base self) -> mtsGenericObjectProxyBase< vctInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt4Base self, mtsVctInt4Base other)"""
        return _cisstMultiTaskPython.mtsVctInt4Base_Assign(self, *args)

mtsVctInt4Base_swigregister = _cisstMultiTaskPython.mtsVctInt4Base_swigregister
mtsVctInt4Base_swigregister(mtsVctInt4Base)

def mtsVctInt4Base_ClassServices():
  """mtsVctInt4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt4Base_ClassServices()

class mtsVctInt4(mtsVctInt4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt4_Data_get, _cisstMultiTaskPython.mtsVctInt4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt4)> self) -> mtsVctInt4
        __init__(mtsGenericObjectProxy<(vctInt4)> self, mtsVctInt4 other) -> mtsVctInt4
        __init__(mtsGenericObjectProxy<(vctInt4)> self, mtsGenericObjectProxy< vctInt4 >::value_type const & data) -> mtsVctInt4
        """
        this = _cisstMultiTaskPython.new_mtsVctInt4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt4 self) -> mtsGenericObjectProxy< vctInt4 >::value_type
        GetData(mtsVctInt4 self) -> mtsGenericObjectProxy< vctInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt4 self) -> vctInt4"""
        return _cisstMultiTaskPython.mtsVctInt4_GetDataCopy(self)

mtsVctInt4_swigregister = _cisstMultiTaskPython.mtsVctInt4_swigregister
mtsVctInt4_swigregister(mtsVctInt4)

def mtsVctInt4_ClassServices():
  """mtsVctInt4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt4_ClassServices()

class mtsVctInt5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt5Base self) -> mtsGenericObjectProxyBase< vctInt5 >::value_type
        GetData(mtsVctInt5Base self) -> mtsGenericObjectProxyBase< vctInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt5Base self, mtsVctInt5Base other)"""
        return _cisstMultiTaskPython.mtsVctInt5Base_Assign(self, *args)

mtsVctInt5Base_swigregister = _cisstMultiTaskPython.mtsVctInt5Base_swigregister
mtsVctInt5Base_swigregister(mtsVctInt5Base)

def mtsVctInt5Base_ClassServices():
  """mtsVctInt5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt5Base_ClassServices()

class mtsVctInt5(mtsVctInt5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt5_Data_get, _cisstMultiTaskPython.mtsVctInt5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt5)> self) -> mtsVctInt5
        __init__(mtsGenericObjectProxy<(vctInt5)> self, mtsVctInt5 other) -> mtsVctInt5
        __init__(mtsGenericObjectProxy<(vctInt5)> self, mtsGenericObjectProxy< vctInt5 >::value_type const & data) -> mtsVctInt5
        """
        this = _cisstMultiTaskPython.new_mtsVctInt5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt5 self) -> mtsGenericObjectProxy< vctInt5 >::value_type
        GetData(mtsVctInt5 self) -> mtsGenericObjectProxy< vctInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt5 self) -> vctInt5"""
        return _cisstMultiTaskPython.mtsVctInt5_GetDataCopy(self)

mtsVctInt5_swigregister = _cisstMultiTaskPython.mtsVctInt5_swigregister
mtsVctInt5_swigregister(mtsVctInt5)

def mtsVctInt5_ClassServices():
  """mtsVctInt5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt5_ClassServices()

class mtsVctInt6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt6Base self) -> mtsGenericObjectProxyBase< vctInt6 >::value_type
        GetData(mtsVctInt6Base self) -> mtsGenericObjectProxyBase< vctInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt6Base self, mtsVctInt6Base other)"""
        return _cisstMultiTaskPython.mtsVctInt6Base_Assign(self, *args)

mtsVctInt6Base_swigregister = _cisstMultiTaskPython.mtsVctInt6Base_swigregister
mtsVctInt6Base_swigregister(mtsVctInt6Base)

def mtsVctInt6Base_ClassServices():
  """mtsVctInt6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt6Base_ClassServices()

class mtsVctInt6(mtsVctInt6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt6_Data_get, _cisstMultiTaskPython.mtsVctInt6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt6)> self) -> mtsVctInt6
        __init__(mtsGenericObjectProxy<(vctInt6)> self, mtsVctInt6 other) -> mtsVctInt6
        __init__(mtsGenericObjectProxy<(vctInt6)> self, mtsGenericObjectProxy< vctInt6 >::value_type const & data) -> mtsVctInt6
        """
        this = _cisstMultiTaskPython.new_mtsVctInt6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt6 self) -> mtsGenericObjectProxy< vctInt6 >::value_type
        GetData(mtsVctInt6 self) -> mtsGenericObjectProxy< vctInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt6 self) -> vctInt6"""
        return _cisstMultiTaskPython.mtsVctInt6_GetDataCopy(self)

mtsVctInt6_swigregister = _cisstMultiTaskPython.mtsVctInt6_swigregister
mtsVctInt6_swigregister(mtsVctInt6)

def mtsVctInt6_ClassServices():
  """mtsVctInt6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt6_ClassServices()

class mtsVctInt7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt7Base self) -> mtsGenericObjectProxyBase< vctInt7 >::value_type
        GetData(mtsVctInt7Base self) -> mtsGenericObjectProxyBase< vctInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt7Base self, mtsVctInt7Base other)"""
        return _cisstMultiTaskPython.mtsVctInt7Base_Assign(self, *args)

mtsVctInt7Base_swigregister = _cisstMultiTaskPython.mtsVctInt7Base_swigregister
mtsVctInt7Base_swigregister(mtsVctInt7Base)

def mtsVctInt7Base_ClassServices():
  """mtsVctInt7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt7Base_ClassServices()

class mtsVctInt7(mtsVctInt7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt7_Data_get, _cisstMultiTaskPython.mtsVctInt7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt7)> self) -> mtsVctInt7
        __init__(mtsGenericObjectProxy<(vctInt7)> self, mtsVctInt7 other) -> mtsVctInt7
        __init__(mtsGenericObjectProxy<(vctInt7)> self, mtsGenericObjectProxy< vctInt7 >::value_type const & data) -> mtsVctInt7
        """
        this = _cisstMultiTaskPython.new_mtsVctInt7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt7 self) -> mtsGenericObjectProxy< vctInt7 >::value_type
        GetData(mtsVctInt7 self) -> mtsGenericObjectProxy< vctInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt7 self) -> vctInt7"""
        return _cisstMultiTaskPython.mtsVctInt7_GetDataCopy(self)

mtsVctInt7_swigregister = _cisstMultiTaskPython.mtsVctInt7_swigregister
mtsVctInt7_swigregister(mtsVctInt7)

def mtsVctInt7_ClassServices():
  """mtsVctInt7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt7_ClassServices()

class mtsVctInt8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt8Base self) -> mtsGenericObjectProxyBase< vctInt8 >::value_type
        GetData(mtsVctInt8Base self) -> mtsGenericObjectProxyBase< vctInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt8Base self, mtsVctInt8Base other)"""
        return _cisstMultiTaskPython.mtsVctInt8Base_Assign(self, *args)

mtsVctInt8Base_swigregister = _cisstMultiTaskPython.mtsVctInt8Base_swigregister
mtsVctInt8Base_swigregister(mtsVctInt8Base)

def mtsVctInt8Base_ClassServices():
  """mtsVctInt8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt8Base_ClassServices()

class mtsVctInt8(mtsVctInt8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt8_Data_get, _cisstMultiTaskPython.mtsVctInt8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt8)> self) -> mtsVctInt8
        __init__(mtsGenericObjectProxy<(vctInt8)> self, mtsVctInt8 other) -> mtsVctInt8
        __init__(mtsGenericObjectProxy<(vctInt8)> self, mtsGenericObjectProxy< vctInt8 >::value_type const & data) -> mtsVctInt8
        """
        this = _cisstMultiTaskPython.new_mtsVctInt8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt8 self) -> mtsGenericObjectProxy< vctInt8 >::value_type
        GetData(mtsVctInt8 self) -> mtsGenericObjectProxy< vctInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt8 self) -> vctInt8"""
        return _cisstMultiTaskPython.mtsVctInt8_GetDataCopy(self)

mtsVctInt8_swigregister = _cisstMultiTaskPython.mtsVctInt8_swigregister
mtsVctInt8_swigregister(mtsVctInt8)

def mtsVctInt8_ClassServices():
  """mtsVctInt8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt8_ClassServices()

class mtsVctInt9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctInt9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt9Base self) -> mtsGenericObjectProxyBase< vctInt9 >::value_type
        GetData(mtsVctInt9Base self) -> mtsGenericObjectProxyBase< vctInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctInt9Base self, mtsVctInt9Base other)"""
        return _cisstMultiTaskPython.mtsVctInt9Base_Assign(self, *args)

mtsVctInt9Base_swigregister = _cisstMultiTaskPython.mtsVctInt9Base_swigregister
mtsVctInt9Base_swigregister(mtsVctInt9Base)

def mtsVctInt9Base_ClassServices():
  """mtsVctInt9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt9Base_ClassServices()

class mtsVctInt9(mtsVctInt9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctInt9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctInt9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctInt9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctInt9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctInt9_Data_get, _cisstMultiTaskPython.mtsVctInt9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctInt9)> self) -> mtsVctInt9
        __init__(mtsGenericObjectProxy<(vctInt9)> self, mtsVctInt9 other) -> mtsVctInt9
        __init__(mtsGenericObjectProxy<(vctInt9)> self, mtsGenericObjectProxy< vctInt9 >::value_type const & data) -> mtsVctInt9
        """
        this = _cisstMultiTaskPython.new_mtsVctInt9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctInt9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctInt9 self) -> mtsGenericObjectProxy< vctInt9 >::value_type
        GetData(mtsVctInt9 self) -> mtsGenericObjectProxy< vctInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctInt9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctInt9 self) -> vctInt9"""
        return _cisstMultiTaskPython.mtsVctInt9_GetDataCopy(self)

mtsVctInt9_swigregister = _cisstMultiTaskPython.mtsVctInt9_swigregister
mtsVctInt9_swigregister(mtsVctInt9)

def mtsVctInt9_ClassServices():
  """mtsVctInt9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctInt9_ClassServices()

class mtsVctUInt1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt1Base self) -> mtsGenericObjectProxyBase< vctUInt1 >::value_type
        GetData(mtsVctUInt1Base self) -> mtsGenericObjectProxyBase< vctUInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt1Base self, mtsVctUInt1Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt1Base_Assign(self, *args)

mtsVctUInt1Base_swigregister = _cisstMultiTaskPython.mtsVctUInt1Base_swigregister
mtsVctUInt1Base_swigregister(mtsVctUInt1Base)

def mtsVctUInt1Base_ClassServices():
  """mtsVctUInt1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt1Base_ClassServices()

class mtsVctUInt1(mtsVctUInt1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt1_Data_get, _cisstMultiTaskPython.mtsVctUInt1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt1)> self) -> mtsVctUInt1
        __init__(mtsGenericObjectProxy<(vctUInt1)> self, mtsVctUInt1 other) -> mtsVctUInt1
        __init__(mtsGenericObjectProxy<(vctUInt1)> self, mtsGenericObjectProxy< vctUInt1 >::value_type const & data) -> mtsVctUInt1
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt1 self) -> mtsGenericObjectProxy< vctUInt1 >::value_type
        GetData(mtsVctUInt1 self) -> mtsGenericObjectProxy< vctUInt1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt1 self) -> vctUInt1"""
        return _cisstMultiTaskPython.mtsVctUInt1_GetDataCopy(self)

mtsVctUInt1_swigregister = _cisstMultiTaskPython.mtsVctUInt1_swigregister
mtsVctUInt1_swigregister(mtsVctUInt1)

def mtsVctUInt1_ClassServices():
  """mtsVctUInt1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt1_ClassServices()

class mtsVctUInt2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt2Base self) -> mtsGenericObjectProxyBase< vctUInt2 >::value_type
        GetData(mtsVctUInt2Base self) -> mtsGenericObjectProxyBase< vctUInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt2Base self, mtsVctUInt2Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt2Base_Assign(self, *args)

mtsVctUInt2Base_swigregister = _cisstMultiTaskPython.mtsVctUInt2Base_swigregister
mtsVctUInt2Base_swigregister(mtsVctUInt2Base)

def mtsVctUInt2Base_ClassServices():
  """mtsVctUInt2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt2Base_ClassServices()

class mtsVctUInt2(mtsVctUInt2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt2_Data_get, _cisstMultiTaskPython.mtsVctUInt2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt2)> self) -> mtsVctUInt2
        __init__(mtsGenericObjectProxy<(vctUInt2)> self, mtsVctUInt2 other) -> mtsVctUInt2
        __init__(mtsGenericObjectProxy<(vctUInt2)> self, mtsGenericObjectProxy< vctUInt2 >::value_type const & data) -> mtsVctUInt2
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt2 self) -> mtsGenericObjectProxy< vctUInt2 >::value_type
        GetData(mtsVctUInt2 self) -> mtsGenericObjectProxy< vctUInt2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt2 self) -> vctUInt2"""
        return _cisstMultiTaskPython.mtsVctUInt2_GetDataCopy(self)

mtsVctUInt2_swigregister = _cisstMultiTaskPython.mtsVctUInt2_swigregister
mtsVctUInt2_swigregister(mtsVctUInt2)

def mtsVctUInt2_ClassServices():
  """mtsVctUInt2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt2_ClassServices()

class mtsVctUInt3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt3Base self) -> mtsGenericObjectProxyBase< vctUInt3 >::value_type
        GetData(mtsVctUInt3Base self) -> mtsGenericObjectProxyBase< vctUInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt3Base self, mtsVctUInt3Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt3Base_Assign(self, *args)

mtsVctUInt3Base_swigregister = _cisstMultiTaskPython.mtsVctUInt3Base_swigregister
mtsVctUInt3Base_swigregister(mtsVctUInt3Base)

def mtsVctUInt3Base_ClassServices():
  """mtsVctUInt3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt3Base_ClassServices()

class mtsVctUInt3(mtsVctUInt3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt3_Data_get, _cisstMultiTaskPython.mtsVctUInt3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt3)> self) -> mtsVctUInt3
        __init__(mtsGenericObjectProxy<(vctUInt3)> self, mtsVctUInt3 other) -> mtsVctUInt3
        __init__(mtsGenericObjectProxy<(vctUInt3)> self, mtsGenericObjectProxy< vctUInt3 >::value_type const & data) -> mtsVctUInt3
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt3 self) -> mtsGenericObjectProxy< vctUInt3 >::value_type
        GetData(mtsVctUInt3 self) -> mtsGenericObjectProxy< vctUInt3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt3 self) -> vctUInt3"""
        return _cisstMultiTaskPython.mtsVctUInt3_GetDataCopy(self)

mtsVctUInt3_swigregister = _cisstMultiTaskPython.mtsVctUInt3_swigregister
mtsVctUInt3_swigregister(mtsVctUInt3)

def mtsVctUInt3_ClassServices():
  """mtsVctUInt3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt3_ClassServices()

class mtsVctUInt4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt4Base self) -> mtsGenericObjectProxyBase< vctUInt4 >::value_type
        GetData(mtsVctUInt4Base self) -> mtsGenericObjectProxyBase< vctUInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt4Base self, mtsVctUInt4Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt4Base_Assign(self, *args)

mtsVctUInt4Base_swigregister = _cisstMultiTaskPython.mtsVctUInt4Base_swigregister
mtsVctUInt4Base_swigregister(mtsVctUInt4Base)

def mtsVctUInt4Base_ClassServices():
  """mtsVctUInt4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt4Base_ClassServices()

class mtsVctUInt4(mtsVctUInt4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt4_Data_get, _cisstMultiTaskPython.mtsVctUInt4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt4)> self) -> mtsVctUInt4
        __init__(mtsGenericObjectProxy<(vctUInt4)> self, mtsVctUInt4 other) -> mtsVctUInt4
        __init__(mtsGenericObjectProxy<(vctUInt4)> self, mtsGenericObjectProxy< vctUInt4 >::value_type const & data) -> mtsVctUInt4
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt4 self) -> mtsGenericObjectProxy< vctUInt4 >::value_type
        GetData(mtsVctUInt4 self) -> mtsGenericObjectProxy< vctUInt4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt4 self) -> vctUInt4"""
        return _cisstMultiTaskPython.mtsVctUInt4_GetDataCopy(self)

mtsVctUInt4_swigregister = _cisstMultiTaskPython.mtsVctUInt4_swigregister
mtsVctUInt4_swigregister(mtsVctUInt4)

def mtsVctUInt4_ClassServices():
  """mtsVctUInt4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt4_ClassServices()

class mtsVctUInt5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt5Base self) -> mtsGenericObjectProxyBase< vctUInt5 >::value_type
        GetData(mtsVctUInt5Base self) -> mtsGenericObjectProxyBase< vctUInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt5Base self, mtsVctUInt5Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt5Base_Assign(self, *args)

mtsVctUInt5Base_swigregister = _cisstMultiTaskPython.mtsVctUInt5Base_swigregister
mtsVctUInt5Base_swigregister(mtsVctUInt5Base)

def mtsVctUInt5Base_ClassServices():
  """mtsVctUInt5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt5Base_ClassServices()

class mtsVctUInt5(mtsVctUInt5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt5_Data_get, _cisstMultiTaskPython.mtsVctUInt5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt5)> self) -> mtsVctUInt5
        __init__(mtsGenericObjectProxy<(vctUInt5)> self, mtsVctUInt5 other) -> mtsVctUInt5
        __init__(mtsGenericObjectProxy<(vctUInt5)> self, mtsGenericObjectProxy< vctUInt5 >::value_type const & data) -> mtsVctUInt5
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt5 self) -> mtsGenericObjectProxy< vctUInt5 >::value_type
        GetData(mtsVctUInt5 self) -> mtsGenericObjectProxy< vctUInt5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt5 self) -> vctUInt5"""
        return _cisstMultiTaskPython.mtsVctUInt5_GetDataCopy(self)

mtsVctUInt5_swigregister = _cisstMultiTaskPython.mtsVctUInt5_swigregister
mtsVctUInt5_swigregister(mtsVctUInt5)

def mtsVctUInt5_ClassServices():
  """mtsVctUInt5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt5_ClassServices()

class mtsVctUInt6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt6Base self) -> mtsGenericObjectProxyBase< vctUInt6 >::value_type
        GetData(mtsVctUInt6Base self) -> mtsGenericObjectProxyBase< vctUInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt6Base self, mtsVctUInt6Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt6Base_Assign(self, *args)

mtsVctUInt6Base_swigregister = _cisstMultiTaskPython.mtsVctUInt6Base_swigregister
mtsVctUInt6Base_swigregister(mtsVctUInt6Base)

def mtsVctUInt6Base_ClassServices():
  """mtsVctUInt6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt6Base_ClassServices()

class mtsVctUInt6(mtsVctUInt6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt6_Data_get, _cisstMultiTaskPython.mtsVctUInt6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt6)> self) -> mtsVctUInt6
        __init__(mtsGenericObjectProxy<(vctUInt6)> self, mtsVctUInt6 other) -> mtsVctUInt6
        __init__(mtsGenericObjectProxy<(vctUInt6)> self, mtsGenericObjectProxy< vctUInt6 >::value_type const & data) -> mtsVctUInt6
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt6 self) -> mtsGenericObjectProxy< vctUInt6 >::value_type
        GetData(mtsVctUInt6 self) -> mtsGenericObjectProxy< vctUInt6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt6 self) -> vctUInt6"""
        return _cisstMultiTaskPython.mtsVctUInt6_GetDataCopy(self)

mtsVctUInt6_swigregister = _cisstMultiTaskPython.mtsVctUInt6_swigregister
mtsVctUInt6_swigregister(mtsVctUInt6)

def mtsVctUInt6_ClassServices():
  """mtsVctUInt6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt6_ClassServices()

class mtsVctUInt7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt7Base self) -> mtsGenericObjectProxyBase< vctUInt7 >::value_type
        GetData(mtsVctUInt7Base self) -> mtsGenericObjectProxyBase< vctUInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt7Base self, mtsVctUInt7Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt7Base_Assign(self, *args)

mtsVctUInt7Base_swigregister = _cisstMultiTaskPython.mtsVctUInt7Base_swigregister
mtsVctUInt7Base_swigregister(mtsVctUInt7Base)

def mtsVctUInt7Base_ClassServices():
  """mtsVctUInt7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt7Base_ClassServices()

class mtsVctUInt7(mtsVctUInt7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt7_Data_get, _cisstMultiTaskPython.mtsVctUInt7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt7)> self) -> mtsVctUInt7
        __init__(mtsGenericObjectProxy<(vctUInt7)> self, mtsVctUInt7 other) -> mtsVctUInt7
        __init__(mtsGenericObjectProxy<(vctUInt7)> self, mtsGenericObjectProxy< vctUInt7 >::value_type const & data) -> mtsVctUInt7
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt7 self) -> mtsGenericObjectProxy< vctUInt7 >::value_type
        GetData(mtsVctUInt7 self) -> mtsGenericObjectProxy< vctUInt7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt7 self) -> vctUInt7"""
        return _cisstMultiTaskPython.mtsVctUInt7_GetDataCopy(self)

mtsVctUInt7_swigregister = _cisstMultiTaskPython.mtsVctUInt7_swigregister
mtsVctUInt7_swigregister(mtsVctUInt7)

def mtsVctUInt7_ClassServices():
  """mtsVctUInt7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt7_ClassServices()

class mtsVctUInt8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt8Base self) -> mtsGenericObjectProxyBase< vctUInt8 >::value_type
        GetData(mtsVctUInt8Base self) -> mtsGenericObjectProxyBase< vctUInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt8Base self, mtsVctUInt8Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt8Base_Assign(self, *args)

mtsVctUInt8Base_swigregister = _cisstMultiTaskPython.mtsVctUInt8Base_swigregister
mtsVctUInt8Base_swigregister(mtsVctUInt8Base)

def mtsVctUInt8Base_ClassServices():
  """mtsVctUInt8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt8Base_ClassServices()

class mtsVctUInt8(mtsVctUInt8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt8_Data_get, _cisstMultiTaskPython.mtsVctUInt8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt8)> self) -> mtsVctUInt8
        __init__(mtsGenericObjectProxy<(vctUInt8)> self, mtsVctUInt8 other) -> mtsVctUInt8
        __init__(mtsGenericObjectProxy<(vctUInt8)> self, mtsGenericObjectProxy< vctUInt8 >::value_type const & data) -> mtsVctUInt8
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt8 self) -> mtsGenericObjectProxy< vctUInt8 >::value_type
        GetData(mtsVctUInt8 self) -> mtsGenericObjectProxy< vctUInt8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt8 self) -> vctUInt8"""
        return _cisstMultiTaskPython.mtsVctUInt8_GetDataCopy(self)

mtsVctUInt8_swigregister = _cisstMultiTaskPython.mtsVctUInt8_swigregister
mtsVctUInt8_swigregister(mtsVctUInt8)

def mtsVctUInt8_ClassServices():
  """mtsVctUInt8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt8_ClassServices()

class mtsVctUInt9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUInt9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt9Base self) -> mtsGenericObjectProxyBase< vctUInt9 >::value_type
        GetData(mtsVctUInt9Base self) -> mtsGenericObjectProxyBase< vctUInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUInt9Base self, mtsVctUInt9Base other)"""
        return _cisstMultiTaskPython.mtsVctUInt9Base_Assign(self, *args)

mtsVctUInt9Base_swigregister = _cisstMultiTaskPython.mtsVctUInt9Base_swigregister
mtsVctUInt9Base_swigregister(mtsVctUInt9Base)

def mtsVctUInt9Base_ClassServices():
  """mtsVctUInt9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt9Base_ClassServices()

class mtsVctUInt9(mtsVctUInt9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUInt9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUInt9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUInt9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUInt9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUInt9_Data_get, _cisstMultiTaskPython.mtsVctUInt9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUInt9)> self) -> mtsVctUInt9
        __init__(mtsGenericObjectProxy<(vctUInt9)> self, mtsVctUInt9 other) -> mtsVctUInt9
        __init__(mtsGenericObjectProxy<(vctUInt9)> self, mtsGenericObjectProxy< vctUInt9 >::value_type const & data) -> mtsVctUInt9
        """
        this = _cisstMultiTaskPython.new_mtsVctUInt9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUInt9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUInt9 self) -> mtsGenericObjectProxy< vctUInt9 >::value_type
        GetData(mtsVctUInt9 self) -> mtsGenericObjectProxy< vctUInt9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUInt9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUInt9 self) -> vctUInt9"""
        return _cisstMultiTaskPython.mtsVctUInt9_GetDataCopy(self)

mtsVctUInt9_swigregister = _cisstMultiTaskPython.mtsVctUInt9_swigregister
mtsVctUInt9_swigregister(mtsVctUInt9)

def mtsVctUInt9_ClassServices():
  """mtsVctUInt9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUInt9_ClassServices()

class mtsVctShort1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort1Base self) -> mtsGenericObjectProxyBase< vctShort1 >::value_type
        GetData(mtsVctShort1Base self) -> mtsGenericObjectProxyBase< vctShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort1Base self, mtsVctShort1Base other)"""
        return _cisstMultiTaskPython.mtsVctShort1Base_Assign(self, *args)

mtsVctShort1Base_swigregister = _cisstMultiTaskPython.mtsVctShort1Base_swigregister
mtsVctShort1Base_swigregister(mtsVctShort1Base)

def mtsVctShort1Base_ClassServices():
  """mtsVctShort1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort1Base_ClassServices()

class mtsVctShort1(mtsVctShort1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort1_Data_get, _cisstMultiTaskPython.mtsVctShort1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort1)> self) -> mtsVctShort1
        __init__(mtsGenericObjectProxy<(vctShort1)> self, mtsVctShort1 other) -> mtsVctShort1
        __init__(mtsGenericObjectProxy<(vctShort1)> self, mtsGenericObjectProxy< vctShort1 >::value_type const & data) -> mtsVctShort1
        """
        this = _cisstMultiTaskPython.new_mtsVctShort1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort1 self) -> mtsGenericObjectProxy< vctShort1 >::value_type
        GetData(mtsVctShort1 self) -> mtsGenericObjectProxy< vctShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort1 self) -> vctShort1"""
        return _cisstMultiTaskPython.mtsVctShort1_GetDataCopy(self)

mtsVctShort1_swigregister = _cisstMultiTaskPython.mtsVctShort1_swigregister
mtsVctShort1_swigregister(mtsVctShort1)

def mtsVctShort1_ClassServices():
  """mtsVctShort1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort1_ClassServices()

class mtsVctShort2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort2Base self) -> mtsGenericObjectProxyBase< vctShort2 >::value_type
        GetData(mtsVctShort2Base self) -> mtsGenericObjectProxyBase< vctShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort2Base self, mtsVctShort2Base other)"""
        return _cisstMultiTaskPython.mtsVctShort2Base_Assign(self, *args)

mtsVctShort2Base_swigregister = _cisstMultiTaskPython.mtsVctShort2Base_swigregister
mtsVctShort2Base_swigregister(mtsVctShort2Base)

def mtsVctShort2Base_ClassServices():
  """mtsVctShort2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort2Base_ClassServices()

class mtsVctShort2(mtsVctShort2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort2_Data_get, _cisstMultiTaskPython.mtsVctShort2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort2)> self) -> mtsVctShort2
        __init__(mtsGenericObjectProxy<(vctShort2)> self, mtsVctShort2 other) -> mtsVctShort2
        __init__(mtsGenericObjectProxy<(vctShort2)> self, mtsGenericObjectProxy< vctShort2 >::value_type const & data) -> mtsVctShort2
        """
        this = _cisstMultiTaskPython.new_mtsVctShort2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort2 self) -> mtsGenericObjectProxy< vctShort2 >::value_type
        GetData(mtsVctShort2 self) -> mtsGenericObjectProxy< vctShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort2 self) -> vctShort2"""
        return _cisstMultiTaskPython.mtsVctShort2_GetDataCopy(self)

mtsVctShort2_swigregister = _cisstMultiTaskPython.mtsVctShort2_swigregister
mtsVctShort2_swigregister(mtsVctShort2)

def mtsVctShort2_ClassServices():
  """mtsVctShort2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort2_ClassServices()

class mtsVctShort3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort3Base self) -> mtsGenericObjectProxyBase< vctShort3 >::value_type
        GetData(mtsVctShort3Base self) -> mtsGenericObjectProxyBase< vctShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort3Base self, mtsVctShort3Base other)"""
        return _cisstMultiTaskPython.mtsVctShort3Base_Assign(self, *args)

mtsVctShort3Base_swigregister = _cisstMultiTaskPython.mtsVctShort3Base_swigregister
mtsVctShort3Base_swigregister(mtsVctShort3Base)

def mtsVctShort3Base_ClassServices():
  """mtsVctShort3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort3Base_ClassServices()

class mtsVctShort3(mtsVctShort3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort3_Data_get, _cisstMultiTaskPython.mtsVctShort3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort3)> self) -> mtsVctShort3
        __init__(mtsGenericObjectProxy<(vctShort3)> self, mtsVctShort3 other) -> mtsVctShort3
        __init__(mtsGenericObjectProxy<(vctShort3)> self, mtsGenericObjectProxy< vctShort3 >::value_type const & data) -> mtsVctShort3
        """
        this = _cisstMultiTaskPython.new_mtsVctShort3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort3 self) -> mtsGenericObjectProxy< vctShort3 >::value_type
        GetData(mtsVctShort3 self) -> mtsGenericObjectProxy< vctShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort3 self) -> vctShort3"""
        return _cisstMultiTaskPython.mtsVctShort3_GetDataCopy(self)

mtsVctShort3_swigregister = _cisstMultiTaskPython.mtsVctShort3_swigregister
mtsVctShort3_swigregister(mtsVctShort3)

def mtsVctShort3_ClassServices():
  """mtsVctShort3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort3_ClassServices()

class mtsVctShort4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort4Base self) -> mtsGenericObjectProxyBase< vctShort4 >::value_type
        GetData(mtsVctShort4Base self) -> mtsGenericObjectProxyBase< vctShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort4Base self, mtsVctShort4Base other)"""
        return _cisstMultiTaskPython.mtsVctShort4Base_Assign(self, *args)

mtsVctShort4Base_swigregister = _cisstMultiTaskPython.mtsVctShort4Base_swigregister
mtsVctShort4Base_swigregister(mtsVctShort4Base)

def mtsVctShort4Base_ClassServices():
  """mtsVctShort4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort4Base_ClassServices()

class mtsVctShort4(mtsVctShort4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort4_Data_get, _cisstMultiTaskPython.mtsVctShort4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort4)> self) -> mtsVctShort4
        __init__(mtsGenericObjectProxy<(vctShort4)> self, mtsVctShort4 other) -> mtsVctShort4
        __init__(mtsGenericObjectProxy<(vctShort4)> self, mtsGenericObjectProxy< vctShort4 >::value_type const & data) -> mtsVctShort4
        """
        this = _cisstMultiTaskPython.new_mtsVctShort4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort4 self) -> mtsGenericObjectProxy< vctShort4 >::value_type
        GetData(mtsVctShort4 self) -> mtsGenericObjectProxy< vctShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort4 self) -> vctShort4"""
        return _cisstMultiTaskPython.mtsVctShort4_GetDataCopy(self)

mtsVctShort4_swigregister = _cisstMultiTaskPython.mtsVctShort4_swigregister
mtsVctShort4_swigregister(mtsVctShort4)

def mtsVctShort4_ClassServices():
  """mtsVctShort4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort4_ClassServices()

class mtsVctShort5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort5Base self) -> mtsGenericObjectProxyBase< vctShort5 >::value_type
        GetData(mtsVctShort5Base self) -> mtsGenericObjectProxyBase< vctShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort5Base self, mtsVctShort5Base other)"""
        return _cisstMultiTaskPython.mtsVctShort5Base_Assign(self, *args)

mtsVctShort5Base_swigregister = _cisstMultiTaskPython.mtsVctShort5Base_swigregister
mtsVctShort5Base_swigregister(mtsVctShort5Base)

def mtsVctShort5Base_ClassServices():
  """mtsVctShort5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort5Base_ClassServices()

class mtsVctShort5(mtsVctShort5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort5_Data_get, _cisstMultiTaskPython.mtsVctShort5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort5)> self) -> mtsVctShort5
        __init__(mtsGenericObjectProxy<(vctShort5)> self, mtsVctShort5 other) -> mtsVctShort5
        __init__(mtsGenericObjectProxy<(vctShort5)> self, mtsGenericObjectProxy< vctShort5 >::value_type const & data) -> mtsVctShort5
        """
        this = _cisstMultiTaskPython.new_mtsVctShort5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort5 self) -> mtsGenericObjectProxy< vctShort5 >::value_type
        GetData(mtsVctShort5 self) -> mtsGenericObjectProxy< vctShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort5 self) -> vctShort5"""
        return _cisstMultiTaskPython.mtsVctShort5_GetDataCopy(self)

mtsVctShort5_swigregister = _cisstMultiTaskPython.mtsVctShort5_swigregister
mtsVctShort5_swigregister(mtsVctShort5)

def mtsVctShort5_ClassServices():
  """mtsVctShort5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort5_ClassServices()

class mtsVctShort6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort6Base self) -> mtsGenericObjectProxyBase< vctShort6 >::value_type
        GetData(mtsVctShort6Base self) -> mtsGenericObjectProxyBase< vctShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort6Base self, mtsVctShort6Base other)"""
        return _cisstMultiTaskPython.mtsVctShort6Base_Assign(self, *args)

mtsVctShort6Base_swigregister = _cisstMultiTaskPython.mtsVctShort6Base_swigregister
mtsVctShort6Base_swigregister(mtsVctShort6Base)

def mtsVctShort6Base_ClassServices():
  """mtsVctShort6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort6Base_ClassServices()

class mtsVctShort6(mtsVctShort6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort6_Data_get, _cisstMultiTaskPython.mtsVctShort6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort6)> self) -> mtsVctShort6
        __init__(mtsGenericObjectProxy<(vctShort6)> self, mtsVctShort6 other) -> mtsVctShort6
        __init__(mtsGenericObjectProxy<(vctShort6)> self, mtsGenericObjectProxy< vctShort6 >::value_type const & data) -> mtsVctShort6
        """
        this = _cisstMultiTaskPython.new_mtsVctShort6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort6 self) -> mtsGenericObjectProxy< vctShort6 >::value_type
        GetData(mtsVctShort6 self) -> mtsGenericObjectProxy< vctShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort6 self) -> vctShort6"""
        return _cisstMultiTaskPython.mtsVctShort6_GetDataCopy(self)

mtsVctShort6_swigregister = _cisstMultiTaskPython.mtsVctShort6_swigregister
mtsVctShort6_swigregister(mtsVctShort6)

def mtsVctShort6_ClassServices():
  """mtsVctShort6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort6_ClassServices()

class mtsVctShort7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort7Base self) -> mtsGenericObjectProxyBase< vctShort7 >::value_type
        GetData(mtsVctShort7Base self) -> mtsGenericObjectProxyBase< vctShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort7Base self, mtsVctShort7Base other)"""
        return _cisstMultiTaskPython.mtsVctShort7Base_Assign(self, *args)

mtsVctShort7Base_swigregister = _cisstMultiTaskPython.mtsVctShort7Base_swigregister
mtsVctShort7Base_swigregister(mtsVctShort7Base)

def mtsVctShort7Base_ClassServices():
  """mtsVctShort7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort7Base_ClassServices()

class mtsVctShort7(mtsVctShort7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort7_Data_get, _cisstMultiTaskPython.mtsVctShort7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort7)> self) -> mtsVctShort7
        __init__(mtsGenericObjectProxy<(vctShort7)> self, mtsVctShort7 other) -> mtsVctShort7
        __init__(mtsGenericObjectProxy<(vctShort7)> self, mtsGenericObjectProxy< vctShort7 >::value_type const & data) -> mtsVctShort7
        """
        this = _cisstMultiTaskPython.new_mtsVctShort7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort7 self) -> mtsGenericObjectProxy< vctShort7 >::value_type
        GetData(mtsVctShort7 self) -> mtsGenericObjectProxy< vctShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort7 self) -> vctShort7"""
        return _cisstMultiTaskPython.mtsVctShort7_GetDataCopy(self)

mtsVctShort7_swigregister = _cisstMultiTaskPython.mtsVctShort7_swigregister
mtsVctShort7_swigregister(mtsVctShort7)

def mtsVctShort7_ClassServices():
  """mtsVctShort7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort7_ClassServices()

class mtsVctShort8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort8Base self) -> mtsGenericObjectProxyBase< vctShort8 >::value_type
        GetData(mtsVctShort8Base self) -> mtsGenericObjectProxyBase< vctShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort8Base self, mtsVctShort8Base other)"""
        return _cisstMultiTaskPython.mtsVctShort8Base_Assign(self, *args)

mtsVctShort8Base_swigregister = _cisstMultiTaskPython.mtsVctShort8Base_swigregister
mtsVctShort8Base_swigregister(mtsVctShort8Base)

def mtsVctShort8Base_ClassServices():
  """mtsVctShort8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort8Base_ClassServices()

class mtsVctShort8(mtsVctShort8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort8_Data_get, _cisstMultiTaskPython.mtsVctShort8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort8)> self) -> mtsVctShort8
        __init__(mtsGenericObjectProxy<(vctShort8)> self, mtsVctShort8 other) -> mtsVctShort8
        __init__(mtsGenericObjectProxy<(vctShort8)> self, mtsGenericObjectProxy< vctShort8 >::value_type const & data) -> mtsVctShort8
        """
        this = _cisstMultiTaskPython.new_mtsVctShort8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort8 self) -> mtsGenericObjectProxy< vctShort8 >::value_type
        GetData(mtsVctShort8 self) -> mtsGenericObjectProxy< vctShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort8 self) -> vctShort8"""
        return _cisstMultiTaskPython.mtsVctShort8_GetDataCopy(self)

mtsVctShort8_swigregister = _cisstMultiTaskPython.mtsVctShort8_swigregister
mtsVctShort8_swigregister(mtsVctShort8)

def mtsVctShort8_ClassServices():
  """mtsVctShort8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort8_ClassServices()

class mtsVctShort9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShort9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort9Base self) -> mtsGenericObjectProxyBase< vctShort9 >::value_type
        GetData(mtsVctShort9Base self) -> mtsGenericObjectProxyBase< vctShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShort9Base self, mtsVctShort9Base other)"""
        return _cisstMultiTaskPython.mtsVctShort9Base_Assign(self, *args)

mtsVctShort9Base_swigregister = _cisstMultiTaskPython.mtsVctShort9Base_swigregister
mtsVctShort9Base_swigregister(mtsVctShort9Base)

def mtsVctShort9Base_ClassServices():
  """mtsVctShort9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort9Base_ClassServices()

class mtsVctShort9(mtsVctShort9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctShort9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShort9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShort9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShort9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShort9_Data_get, _cisstMultiTaskPython.mtsVctShort9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShort9)> self) -> mtsVctShort9
        __init__(mtsGenericObjectProxy<(vctShort9)> self, mtsVctShort9 other) -> mtsVctShort9
        __init__(mtsGenericObjectProxy<(vctShort9)> self, mtsGenericObjectProxy< vctShort9 >::value_type const & data) -> mtsVctShort9
        """
        this = _cisstMultiTaskPython.new_mtsVctShort9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShort9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShort9 self) -> mtsGenericObjectProxy< vctShort9 >::value_type
        GetData(mtsVctShort9 self) -> mtsGenericObjectProxy< vctShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShort9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShort9 self) -> vctShort9"""
        return _cisstMultiTaskPython.mtsVctShort9_GetDataCopy(self)

mtsVctShort9_swigregister = _cisstMultiTaskPython.mtsVctShort9_swigregister
mtsVctShort9_swigregister(mtsVctShort9)

def mtsVctShort9_ClassServices():
  """mtsVctShort9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShort9_ClassServices()

class mtsVctUShort1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort1Base self) -> mtsGenericObjectProxyBase< vctUShort1 >::value_type
        GetData(mtsVctUShort1Base self) -> mtsGenericObjectProxyBase< vctUShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort1Base self, mtsVctUShort1Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort1Base_Assign(self, *args)

mtsVctUShort1Base_swigregister = _cisstMultiTaskPython.mtsVctUShort1Base_swigregister
mtsVctUShort1Base_swigregister(mtsVctUShort1Base)

def mtsVctUShort1Base_ClassServices():
  """mtsVctUShort1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort1Base_ClassServices()

class mtsVctUShort1(mtsVctUShort1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort1_Data_get, _cisstMultiTaskPython.mtsVctUShort1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort1)> self) -> mtsVctUShort1
        __init__(mtsGenericObjectProxy<(vctUShort1)> self, mtsVctUShort1 other) -> mtsVctUShort1
        __init__(mtsGenericObjectProxy<(vctUShort1)> self, mtsGenericObjectProxy< vctUShort1 >::value_type const & data) -> mtsVctUShort1
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort1 self) -> mtsGenericObjectProxy< vctUShort1 >::value_type
        GetData(mtsVctUShort1 self) -> mtsGenericObjectProxy< vctUShort1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort1 self) -> vctUShort1"""
        return _cisstMultiTaskPython.mtsVctUShort1_GetDataCopy(self)

mtsVctUShort1_swigregister = _cisstMultiTaskPython.mtsVctUShort1_swigregister
mtsVctUShort1_swigregister(mtsVctUShort1)

def mtsVctUShort1_ClassServices():
  """mtsVctUShort1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort1_ClassServices()

class mtsVctUShort2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort2Base self) -> mtsGenericObjectProxyBase< vctUShort2 >::value_type
        GetData(mtsVctUShort2Base self) -> mtsGenericObjectProxyBase< vctUShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort2Base self, mtsVctUShort2Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort2Base_Assign(self, *args)

mtsVctUShort2Base_swigregister = _cisstMultiTaskPython.mtsVctUShort2Base_swigregister
mtsVctUShort2Base_swigregister(mtsVctUShort2Base)

def mtsVctUShort2Base_ClassServices():
  """mtsVctUShort2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort2Base_ClassServices()

class mtsVctUShort2(mtsVctUShort2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort2_Data_get, _cisstMultiTaskPython.mtsVctUShort2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort2)> self) -> mtsVctUShort2
        __init__(mtsGenericObjectProxy<(vctUShort2)> self, mtsVctUShort2 other) -> mtsVctUShort2
        __init__(mtsGenericObjectProxy<(vctUShort2)> self, mtsGenericObjectProxy< vctUShort2 >::value_type const & data) -> mtsVctUShort2
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort2 self) -> mtsGenericObjectProxy< vctUShort2 >::value_type
        GetData(mtsVctUShort2 self) -> mtsGenericObjectProxy< vctUShort2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort2 self) -> vctUShort2"""
        return _cisstMultiTaskPython.mtsVctUShort2_GetDataCopy(self)

mtsVctUShort2_swigregister = _cisstMultiTaskPython.mtsVctUShort2_swigregister
mtsVctUShort2_swigregister(mtsVctUShort2)

def mtsVctUShort2_ClassServices():
  """mtsVctUShort2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort2_ClassServices()

class mtsVctUShort3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort3Base self) -> mtsGenericObjectProxyBase< vctUShort3 >::value_type
        GetData(mtsVctUShort3Base self) -> mtsGenericObjectProxyBase< vctUShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort3Base self, mtsVctUShort3Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort3Base_Assign(self, *args)

mtsVctUShort3Base_swigregister = _cisstMultiTaskPython.mtsVctUShort3Base_swigregister
mtsVctUShort3Base_swigregister(mtsVctUShort3Base)

def mtsVctUShort3Base_ClassServices():
  """mtsVctUShort3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort3Base_ClassServices()

class mtsVctUShort3(mtsVctUShort3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort3_Data_get, _cisstMultiTaskPython.mtsVctUShort3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort3)> self) -> mtsVctUShort3
        __init__(mtsGenericObjectProxy<(vctUShort3)> self, mtsVctUShort3 other) -> mtsVctUShort3
        __init__(mtsGenericObjectProxy<(vctUShort3)> self, mtsGenericObjectProxy< vctUShort3 >::value_type const & data) -> mtsVctUShort3
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort3 self) -> mtsGenericObjectProxy< vctUShort3 >::value_type
        GetData(mtsVctUShort3 self) -> mtsGenericObjectProxy< vctUShort3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort3 self) -> vctUShort3"""
        return _cisstMultiTaskPython.mtsVctUShort3_GetDataCopy(self)

mtsVctUShort3_swigregister = _cisstMultiTaskPython.mtsVctUShort3_swigregister
mtsVctUShort3_swigregister(mtsVctUShort3)

def mtsVctUShort3_ClassServices():
  """mtsVctUShort3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort3_ClassServices()

class mtsVctUShort4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort4Base self) -> mtsGenericObjectProxyBase< vctUShort4 >::value_type
        GetData(mtsVctUShort4Base self) -> mtsGenericObjectProxyBase< vctUShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort4Base self, mtsVctUShort4Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort4Base_Assign(self, *args)

mtsVctUShort4Base_swigregister = _cisstMultiTaskPython.mtsVctUShort4Base_swigregister
mtsVctUShort4Base_swigregister(mtsVctUShort4Base)

def mtsVctUShort4Base_ClassServices():
  """mtsVctUShort4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort4Base_ClassServices()

class mtsVctUShort4(mtsVctUShort4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort4_Data_get, _cisstMultiTaskPython.mtsVctUShort4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort4)> self) -> mtsVctUShort4
        __init__(mtsGenericObjectProxy<(vctUShort4)> self, mtsVctUShort4 other) -> mtsVctUShort4
        __init__(mtsGenericObjectProxy<(vctUShort4)> self, mtsGenericObjectProxy< vctUShort4 >::value_type const & data) -> mtsVctUShort4
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort4 self) -> mtsGenericObjectProxy< vctUShort4 >::value_type
        GetData(mtsVctUShort4 self) -> mtsGenericObjectProxy< vctUShort4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort4 self) -> vctUShort4"""
        return _cisstMultiTaskPython.mtsVctUShort4_GetDataCopy(self)

mtsVctUShort4_swigregister = _cisstMultiTaskPython.mtsVctUShort4_swigregister
mtsVctUShort4_swigregister(mtsVctUShort4)

def mtsVctUShort4_ClassServices():
  """mtsVctUShort4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort4_ClassServices()

class mtsVctUShort5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort5Base self) -> mtsGenericObjectProxyBase< vctUShort5 >::value_type
        GetData(mtsVctUShort5Base self) -> mtsGenericObjectProxyBase< vctUShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort5Base self, mtsVctUShort5Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort5Base_Assign(self, *args)

mtsVctUShort5Base_swigregister = _cisstMultiTaskPython.mtsVctUShort5Base_swigregister
mtsVctUShort5Base_swigregister(mtsVctUShort5Base)

def mtsVctUShort5Base_ClassServices():
  """mtsVctUShort5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort5Base_ClassServices()

class mtsVctUShort5(mtsVctUShort5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort5_Data_get, _cisstMultiTaskPython.mtsVctUShort5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort5)> self) -> mtsVctUShort5
        __init__(mtsGenericObjectProxy<(vctUShort5)> self, mtsVctUShort5 other) -> mtsVctUShort5
        __init__(mtsGenericObjectProxy<(vctUShort5)> self, mtsGenericObjectProxy< vctUShort5 >::value_type const & data) -> mtsVctUShort5
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort5 self) -> mtsGenericObjectProxy< vctUShort5 >::value_type
        GetData(mtsVctUShort5 self) -> mtsGenericObjectProxy< vctUShort5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort5 self) -> vctUShort5"""
        return _cisstMultiTaskPython.mtsVctUShort5_GetDataCopy(self)

mtsVctUShort5_swigregister = _cisstMultiTaskPython.mtsVctUShort5_swigregister
mtsVctUShort5_swigregister(mtsVctUShort5)

def mtsVctUShort5_ClassServices():
  """mtsVctUShort5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort5_ClassServices()

class mtsVctUShort6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort6Base self) -> mtsGenericObjectProxyBase< vctUShort6 >::value_type
        GetData(mtsVctUShort6Base self) -> mtsGenericObjectProxyBase< vctUShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort6Base self, mtsVctUShort6Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort6Base_Assign(self, *args)

mtsVctUShort6Base_swigregister = _cisstMultiTaskPython.mtsVctUShort6Base_swigregister
mtsVctUShort6Base_swigregister(mtsVctUShort6Base)

def mtsVctUShort6Base_ClassServices():
  """mtsVctUShort6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort6Base_ClassServices()

class mtsVctUShort6(mtsVctUShort6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort6_Data_get, _cisstMultiTaskPython.mtsVctUShort6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort6)> self) -> mtsVctUShort6
        __init__(mtsGenericObjectProxy<(vctUShort6)> self, mtsVctUShort6 other) -> mtsVctUShort6
        __init__(mtsGenericObjectProxy<(vctUShort6)> self, mtsGenericObjectProxy< vctUShort6 >::value_type const & data) -> mtsVctUShort6
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort6 self) -> mtsGenericObjectProxy< vctUShort6 >::value_type
        GetData(mtsVctUShort6 self) -> mtsGenericObjectProxy< vctUShort6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort6 self) -> vctUShort6"""
        return _cisstMultiTaskPython.mtsVctUShort6_GetDataCopy(self)

mtsVctUShort6_swigregister = _cisstMultiTaskPython.mtsVctUShort6_swigregister
mtsVctUShort6_swigregister(mtsVctUShort6)

def mtsVctUShort6_ClassServices():
  """mtsVctUShort6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort6_ClassServices()

class mtsVctUShort7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort7Base self) -> mtsGenericObjectProxyBase< vctUShort7 >::value_type
        GetData(mtsVctUShort7Base self) -> mtsGenericObjectProxyBase< vctUShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort7Base self, mtsVctUShort7Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort7Base_Assign(self, *args)

mtsVctUShort7Base_swigregister = _cisstMultiTaskPython.mtsVctUShort7Base_swigregister
mtsVctUShort7Base_swigregister(mtsVctUShort7Base)

def mtsVctUShort7Base_ClassServices():
  """mtsVctUShort7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort7Base_ClassServices()

class mtsVctUShort7(mtsVctUShort7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort7_Data_get, _cisstMultiTaskPython.mtsVctUShort7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort7)> self) -> mtsVctUShort7
        __init__(mtsGenericObjectProxy<(vctUShort7)> self, mtsVctUShort7 other) -> mtsVctUShort7
        __init__(mtsGenericObjectProxy<(vctUShort7)> self, mtsGenericObjectProxy< vctUShort7 >::value_type const & data) -> mtsVctUShort7
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort7 self) -> mtsGenericObjectProxy< vctUShort7 >::value_type
        GetData(mtsVctUShort7 self) -> mtsGenericObjectProxy< vctUShort7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort7 self) -> vctUShort7"""
        return _cisstMultiTaskPython.mtsVctUShort7_GetDataCopy(self)

mtsVctUShort7_swigregister = _cisstMultiTaskPython.mtsVctUShort7_swigregister
mtsVctUShort7_swigregister(mtsVctUShort7)

def mtsVctUShort7_ClassServices():
  """mtsVctUShort7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort7_ClassServices()

class mtsVctUShort8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort8Base self) -> mtsGenericObjectProxyBase< vctUShort8 >::value_type
        GetData(mtsVctUShort8Base self) -> mtsGenericObjectProxyBase< vctUShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort8Base self, mtsVctUShort8Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort8Base_Assign(self, *args)

mtsVctUShort8Base_swigregister = _cisstMultiTaskPython.mtsVctUShort8Base_swigregister
mtsVctUShort8Base_swigregister(mtsVctUShort8Base)

def mtsVctUShort8Base_ClassServices():
  """mtsVctUShort8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort8Base_ClassServices()

class mtsVctUShort8(mtsVctUShort8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort8_Data_get, _cisstMultiTaskPython.mtsVctUShort8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort8)> self) -> mtsVctUShort8
        __init__(mtsGenericObjectProxy<(vctUShort8)> self, mtsVctUShort8 other) -> mtsVctUShort8
        __init__(mtsGenericObjectProxy<(vctUShort8)> self, mtsGenericObjectProxy< vctUShort8 >::value_type const & data) -> mtsVctUShort8
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort8 self) -> mtsGenericObjectProxy< vctUShort8 >::value_type
        GetData(mtsVctUShort8 self) -> mtsGenericObjectProxy< vctUShort8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort8 self) -> vctUShort8"""
        return _cisstMultiTaskPython.mtsVctUShort8_GetDataCopy(self)

mtsVctUShort8_swigregister = _cisstMultiTaskPython.mtsVctUShort8_swigregister
mtsVctUShort8_swigregister(mtsVctUShort8)

def mtsVctUShort8_ClassServices():
  """mtsVctUShort8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort8_ClassServices()

class mtsVctUShort9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShort9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort9Base self) -> mtsGenericObjectProxyBase< vctUShort9 >::value_type
        GetData(mtsVctUShort9Base self) -> mtsGenericObjectProxyBase< vctUShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShort9Base self, mtsVctUShort9Base other)"""
        return _cisstMultiTaskPython.mtsVctUShort9Base_Assign(self, *args)

mtsVctUShort9Base_swigregister = _cisstMultiTaskPython.mtsVctUShort9Base_swigregister
mtsVctUShort9Base_swigregister(mtsVctUShort9Base)

def mtsVctUShort9Base_ClassServices():
  """mtsVctUShort9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort9Base_ClassServices()

class mtsVctUShort9(mtsVctUShort9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShort9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShort9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShort9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShort9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShort9_Data_get, _cisstMultiTaskPython.mtsVctUShort9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShort9)> self) -> mtsVctUShort9
        __init__(mtsGenericObjectProxy<(vctUShort9)> self, mtsVctUShort9 other) -> mtsVctUShort9
        __init__(mtsGenericObjectProxy<(vctUShort9)> self, mtsGenericObjectProxy< vctUShort9 >::value_type const & data) -> mtsVctUShort9
        """
        this = _cisstMultiTaskPython.new_mtsVctUShort9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShort9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShort9 self) -> mtsGenericObjectProxy< vctUShort9 >::value_type
        GetData(mtsVctUShort9 self) -> mtsGenericObjectProxy< vctUShort9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShort9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShort9 self) -> vctUShort9"""
        return _cisstMultiTaskPython.mtsVctUShort9_GetDataCopy(self)

mtsVctUShort9_swigregister = _cisstMultiTaskPython.mtsVctUShort9_swigregister
mtsVctUShort9_swigregister(mtsVctUShort9)

def mtsVctUShort9_ClassServices():
  """mtsVctUShort9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShort9_ClassServices()

class mtsVctChar1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar1Base self) -> mtsGenericObjectProxyBase< vctChar1 >::value_type
        GetData(mtsVctChar1Base self) -> mtsGenericObjectProxyBase< vctChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar1Base self, mtsVctChar1Base other)"""
        return _cisstMultiTaskPython.mtsVctChar1Base_Assign(self, *args)

mtsVctChar1Base_swigregister = _cisstMultiTaskPython.mtsVctChar1Base_swigregister
mtsVctChar1Base_swigregister(mtsVctChar1Base)

def mtsVctChar1Base_ClassServices():
  """mtsVctChar1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar1Base_ClassServices()

class mtsVctChar1(mtsVctChar1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar1_Data_get, _cisstMultiTaskPython.mtsVctChar1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar1)> self) -> mtsVctChar1
        __init__(mtsGenericObjectProxy<(vctChar1)> self, mtsVctChar1 other) -> mtsVctChar1
        __init__(mtsGenericObjectProxy<(vctChar1)> self, mtsGenericObjectProxy< vctChar1 >::value_type const & data) -> mtsVctChar1
        """
        this = _cisstMultiTaskPython.new_mtsVctChar1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar1 self) -> mtsGenericObjectProxy< vctChar1 >::value_type
        GetData(mtsVctChar1 self) -> mtsGenericObjectProxy< vctChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar1 self) -> vctChar1"""
        return _cisstMultiTaskPython.mtsVctChar1_GetDataCopy(self)

mtsVctChar1_swigregister = _cisstMultiTaskPython.mtsVctChar1_swigregister
mtsVctChar1_swigregister(mtsVctChar1)

def mtsVctChar1_ClassServices():
  """mtsVctChar1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar1_ClassServices()

class mtsVctChar2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar2Base self) -> mtsGenericObjectProxyBase< vctChar2 >::value_type
        GetData(mtsVctChar2Base self) -> mtsGenericObjectProxyBase< vctChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar2Base self, mtsVctChar2Base other)"""
        return _cisstMultiTaskPython.mtsVctChar2Base_Assign(self, *args)

mtsVctChar2Base_swigregister = _cisstMultiTaskPython.mtsVctChar2Base_swigregister
mtsVctChar2Base_swigregister(mtsVctChar2Base)

def mtsVctChar2Base_ClassServices():
  """mtsVctChar2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar2Base_ClassServices()

class mtsVctChar2(mtsVctChar2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar2_Data_get, _cisstMultiTaskPython.mtsVctChar2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar2)> self) -> mtsVctChar2
        __init__(mtsGenericObjectProxy<(vctChar2)> self, mtsVctChar2 other) -> mtsVctChar2
        __init__(mtsGenericObjectProxy<(vctChar2)> self, mtsGenericObjectProxy< vctChar2 >::value_type const & data) -> mtsVctChar2
        """
        this = _cisstMultiTaskPython.new_mtsVctChar2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar2 self) -> mtsGenericObjectProxy< vctChar2 >::value_type
        GetData(mtsVctChar2 self) -> mtsGenericObjectProxy< vctChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar2 self) -> vctChar2"""
        return _cisstMultiTaskPython.mtsVctChar2_GetDataCopy(self)

mtsVctChar2_swigregister = _cisstMultiTaskPython.mtsVctChar2_swigregister
mtsVctChar2_swigregister(mtsVctChar2)

def mtsVctChar2_ClassServices():
  """mtsVctChar2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar2_ClassServices()

class mtsVctChar3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar3Base self) -> mtsGenericObjectProxyBase< vctChar3 >::value_type
        GetData(mtsVctChar3Base self) -> mtsGenericObjectProxyBase< vctChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar3Base self, mtsVctChar3Base other)"""
        return _cisstMultiTaskPython.mtsVctChar3Base_Assign(self, *args)

mtsVctChar3Base_swigregister = _cisstMultiTaskPython.mtsVctChar3Base_swigregister
mtsVctChar3Base_swigregister(mtsVctChar3Base)

def mtsVctChar3Base_ClassServices():
  """mtsVctChar3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar3Base_ClassServices()

class mtsVctChar3(mtsVctChar3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar3_Data_get, _cisstMultiTaskPython.mtsVctChar3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar3)> self) -> mtsVctChar3
        __init__(mtsGenericObjectProxy<(vctChar3)> self, mtsVctChar3 other) -> mtsVctChar3
        __init__(mtsGenericObjectProxy<(vctChar3)> self, mtsGenericObjectProxy< vctChar3 >::value_type const & data) -> mtsVctChar3
        """
        this = _cisstMultiTaskPython.new_mtsVctChar3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar3 self) -> mtsGenericObjectProxy< vctChar3 >::value_type
        GetData(mtsVctChar3 self) -> mtsGenericObjectProxy< vctChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar3 self) -> vctChar3"""
        return _cisstMultiTaskPython.mtsVctChar3_GetDataCopy(self)

mtsVctChar3_swigregister = _cisstMultiTaskPython.mtsVctChar3_swigregister
mtsVctChar3_swigregister(mtsVctChar3)

def mtsVctChar3_ClassServices():
  """mtsVctChar3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar3_ClassServices()

class mtsVctChar4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar4Base self) -> mtsGenericObjectProxyBase< vctChar4 >::value_type
        GetData(mtsVctChar4Base self) -> mtsGenericObjectProxyBase< vctChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar4Base self, mtsVctChar4Base other)"""
        return _cisstMultiTaskPython.mtsVctChar4Base_Assign(self, *args)

mtsVctChar4Base_swigregister = _cisstMultiTaskPython.mtsVctChar4Base_swigregister
mtsVctChar4Base_swigregister(mtsVctChar4Base)

def mtsVctChar4Base_ClassServices():
  """mtsVctChar4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar4Base_ClassServices()

class mtsVctChar4(mtsVctChar4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar4_Data_get, _cisstMultiTaskPython.mtsVctChar4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar4)> self) -> mtsVctChar4
        __init__(mtsGenericObjectProxy<(vctChar4)> self, mtsVctChar4 other) -> mtsVctChar4
        __init__(mtsGenericObjectProxy<(vctChar4)> self, mtsGenericObjectProxy< vctChar4 >::value_type const & data) -> mtsVctChar4
        """
        this = _cisstMultiTaskPython.new_mtsVctChar4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar4 self) -> mtsGenericObjectProxy< vctChar4 >::value_type
        GetData(mtsVctChar4 self) -> mtsGenericObjectProxy< vctChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar4 self) -> vctChar4"""
        return _cisstMultiTaskPython.mtsVctChar4_GetDataCopy(self)

mtsVctChar4_swigregister = _cisstMultiTaskPython.mtsVctChar4_swigregister
mtsVctChar4_swigregister(mtsVctChar4)

def mtsVctChar4_ClassServices():
  """mtsVctChar4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar4_ClassServices()

class mtsVctChar5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar5Base self) -> mtsGenericObjectProxyBase< vctChar5 >::value_type
        GetData(mtsVctChar5Base self) -> mtsGenericObjectProxyBase< vctChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar5Base self, mtsVctChar5Base other)"""
        return _cisstMultiTaskPython.mtsVctChar5Base_Assign(self, *args)

mtsVctChar5Base_swigregister = _cisstMultiTaskPython.mtsVctChar5Base_swigregister
mtsVctChar5Base_swigregister(mtsVctChar5Base)

def mtsVctChar5Base_ClassServices():
  """mtsVctChar5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar5Base_ClassServices()

class mtsVctChar5(mtsVctChar5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar5_Data_get, _cisstMultiTaskPython.mtsVctChar5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar5)> self) -> mtsVctChar5
        __init__(mtsGenericObjectProxy<(vctChar5)> self, mtsVctChar5 other) -> mtsVctChar5
        __init__(mtsGenericObjectProxy<(vctChar5)> self, mtsGenericObjectProxy< vctChar5 >::value_type const & data) -> mtsVctChar5
        """
        this = _cisstMultiTaskPython.new_mtsVctChar5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar5 self) -> mtsGenericObjectProxy< vctChar5 >::value_type
        GetData(mtsVctChar5 self) -> mtsGenericObjectProxy< vctChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar5 self) -> vctChar5"""
        return _cisstMultiTaskPython.mtsVctChar5_GetDataCopy(self)

mtsVctChar5_swigregister = _cisstMultiTaskPython.mtsVctChar5_swigregister
mtsVctChar5_swigregister(mtsVctChar5)

def mtsVctChar5_ClassServices():
  """mtsVctChar5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar5_ClassServices()

class mtsVctChar6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar6Base self) -> mtsGenericObjectProxyBase< vctChar6 >::value_type
        GetData(mtsVctChar6Base self) -> mtsGenericObjectProxyBase< vctChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar6Base self, mtsVctChar6Base other)"""
        return _cisstMultiTaskPython.mtsVctChar6Base_Assign(self, *args)

mtsVctChar6Base_swigregister = _cisstMultiTaskPython.mtsVctChar6Base_swigregister
mtsVctChar6Base_swigregister(mtsVctChar6Base)

def mtsVctChar6Base_ClassServices():
  """mtsVctChar6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar6Base_ClassServices()

class mtsVctChar6(mtsVctChar6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar6_Data_get, _cisstMultiTaskPython.mtsVctChar6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar6)> self) -> mtsVctChar6
        __init__(mtsGenericObjectProxy<(vctChar6)> self, mtsVctChar6 other) -> mtsVctChar6
        __init__(mtsGenericObjectProxy<(vctChar6)> self, mtsGenericObjectProxy< vctChar6 >::value_type const & data) -> mtsVctChar6
        """
        this = _cisstMultiTaskPython.new_mtsVctChar6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar6 self) -> mtsGenericObjectProxy< vctChar6 >::value_type
        GetData(mtsVctChar6 self) -> mtsGenericObjectProxy< vctChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar6 self) -> vctChar6"""
        return _cisstMultiTaskPython.mtsVctChar6_GetDataCopy(self)

mtsVctChar6_swigregister = _cisstMultiTaskPython.mtsVctChar6_swigregister
mtsVctChar6_swigregister(mtsVctChar6)

def mtsVctChar6_ClassServices():
  """mtsVctChar6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar6_ClassServices()

class mtsVctChar7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar7Base self) -> mtsGenericObjectProxyBase< vctChar7 >::value_type
        GetData(mtsVctChar7Base self) -> mtsGenericObjectProxyBase< vctChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar7Base self, mtsVctChar7Base other)"""
        return _cisstMultiTaskPython.mtsVctChar7Base_Assign(self, *args)

mtsVctChar7Base_swigregister = _cisstMultiTaskPython.mtsVctChar7Base_swigregister
mtsVctChar7Base_swigregister(mtsVctChar7Base)

def mtsVctChar7Base_ClassServices():
  """mtsVctChar7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar7Base_ClassServices()

class mtsVctChar7(mtsVctChar7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar7_Data_get, _cisstMultiTaskPython.mtsVctChar7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar7)> self) -> mtsVctChar7
        __init__(mtsGenericObjectProxy<(vctChar7)> self, mtsVctChar7 other) -> mtsVctChar7
        __init__(mtsGenericObjectProxy<(vctChar7)> self, mtsGenericObjectProxy< vctChar7 >::value_type const & data) -> mtsVctChar7
        """
        this = _cisstMultiTaskPython.new_mtsVctChar7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar7 self) -> mtsGenericObjectProxy< vctChar7 >::value_type
        GetData(mtsVctChar7 self) -> mtsGenericObjectProxy< vctChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar7 self) -> vctChar7"""
        return _cisstMultiTaskPython.mtsVctChar7_GetDataCopy(self)

mtsVctChar7_swigregister = _cisstMultiTaskPython.mtsVctChar7_swigregister
mtsVctChar7_swigregister(mtsVctChar7)

def mtsVctChar7_ClassServices():
  """mtsVctChar7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar7_ClassServices()

class mtsVctChar8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar8Base self) -> mtsGenericObjectProxyBase< vctChar8 >::value_type
        GetData(mtsVctChar8Base self) -> mtsGenericObjectProxyBase< vctChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar8Base self, mtsVctChar8Base other)"""
        return _cisstMultiTaskPython.mtsVctChar8Base_Assign(self, *args)

mtsVctChar8Base_swigregister = _cisstMultiTaskPython.mtsVctChar8Base_swigregister
mtsVctChar8Base_swigregister(mtsVctChar8Base)

def mtsVctChar8Base_ClassServices():
  """mtsVctChar8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar8Base_ClassServices()

class mtsVctChar8(mtsVctChar8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar8_Data_get, _cisstMultiTaskPython.mtsVctChar8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar8)> self) -> mtsVctChar8
        __init__(mtsGenericObjectProxy<(vctChar8)> self, mtsVctChar8 other) -> mtsVctChar8
        __init__(mtsGenericObjectProxy<(vctChar8)> self, mtsGenericObjectProxy< vctChar8 >::value_type const & data) -> mtsVctChar8
        """
        this = _cisstMultiTaskPython.new_mtsVctChar8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar8 self) -> mtsGenericObjectProxy< vctChar8 >::value_type
        GetData(mtsVctChar8 self) -> mtsGenericObjectProxy< vctChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar8 self) -> vctChar8"""
        return _cisstMultiTaskPython.mtsVctChar8_GetDataCopy(self)

mtsVctChar8_swigregister = _cisstMultiTaskPython.mtsVctChar8_swigregister
mtsVctChar8_swigregister(mtsVctChar8)

def mtsVctChar8_ClassServices():
  """mtsVctChar8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar8_ClassServices()

class mtsVctChar9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctChar9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar9Base self) -> mtsGenericObjectProxyBase< vctChar9 >::value_type
        GetData(mtsVctChar9Base self) -> mtsGenericObjectProxyBase< vctChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctChar9Base self, mtsVctChar9Base other)"""
        return _cisstMultiTaskPython.mtsVctChar9Base_Assign(self, *args)

mtsVctChar9Base_swigregister = _cisstMultiTaskPython.mtsVctChar9Base_swigregister
mtsVctChar9Base_swigregister(mtsVctChar9Base)

def mtsVctChar9Base_ClassServices():
  """mtsVctChar9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar9Base_ClassServices()

class mtsVctChar9(mtsVctChar9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctChar9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctChar9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctChar9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctChar9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctChar9_Data_get, _cisstMultiTaskPython.mtsVctChar9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctChar9)> self) -> mtsVctChar9
        __init__(mtsGenericObjectProxy<(vctChar9)> self, mtsVctChar9 other) -> mtsVctChar9
        __init__(mtsGenericObjectProxy<(vctChar9)> self, mtsGenericObjectProxy< vctChar9 >::value_type const & data) -> mtsVctChar9
        """
        this = _cisstMultiTaskPython.new_mtsVctChar9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctChar9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctChar9 self) -> mtsGenericObjectProxy< vctChar9 >::value_type
        GetData(mtsVctChar9 self) -> mtsGenericObjectProxy< vctChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctChar9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctChar9 self) -> vctChar9"""
        return _cisstMultiTaskPython.mtsVctChar9_GetDataCopy(self)

mtsVctChar9_swigregister = _cisstMultiTaskPython.mtsVctChar9_swigregister
mtsVctChar9_swigregister(mtsVctChar9)

def mtsVctChar9_ClassServices():
  """mtsVctChar9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctChar9_ClassServices()

class mtsVctUChar1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar1Base self) -> mtsGenericObjectProxyBase< vctUChar1 >::value_type
        GetData(mtsVctUChar1Base self) -> mtsGenericObjectProxyBase< vctUChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar1Base self, mtsVctUChar1Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar1Base_Assign(self, *args)

mtsVctUChar1Base_swigregister = _cisstMultiTaskPython.mtsVctUChar1Base_swigregister
mtsVctUChar1Base_swigregister(mtsVctUChar1Base)

def mtsVctUChar1Base_ClassServices():
  """mtsVctUChar1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar1Base_ClassServices()

class mtsVctUChar1(mtsVctUChar1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar1_Data_get, _cisstMultiTaskPython.mtsVctUChar1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar1)> self) -> mtsVctUChar1
        __init__(mtsGenericObjectProxy<(vctUChar1)> self, mtsVctUChar1 other) -> mtsVctUChar1
        __init__(mtsGenericObjectProxy<(vctUChar1)> self, mtsGenericObjectProxy< vctUChar1 >::value_type const & data) -> mtsVctUChar1
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar1 self) -> mtsGenericObjectProxy< vctUChar1 >::value_type
        GetData(mtsVctUChar1 self) -> mtsGenericObjectProxy< vctUChar1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar1 self) -> vctUChar1"""
        return _cisstMultiTaskPython.mtsVctUChar1_GetDataCopy(self)

mtsVctUChar1_swigregister = _cisstMultiTaskPython.mtsVctUChar1_swigregister
mtsVctUChar1_swigregister(mtsVctUChar1)

def mtsVctUChar1_ClassServices():
  """mtsVctUChar1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar1_ClassServices()

class mtsVctUChar2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar2Base self) -> mtsGenericObjectProxyBase< vctUChar2 >::value_type
        GetData(mtsVctUChar2Base self) -> mtsGenericObjectProxyBase< vctUChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar2Base self, mtsVctUChar2Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar2Base_Assign(self, *args)

mtsVctUChar2Base_swigregister = _cisstMultiTaskPython.mtsVctUChar2Base_swigregister
mtsVctUChar2Base_swigregister(mtsVctUChar2Base)

def mtsVctUChar2Base_ClassServices():
  """mtsVctUChar2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar2Base_ClassServices()

class mtsVctUChar2(mtsVctUChar2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar2_Data_get, _cisstMultiTaskPython.mtsVctUChar2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar2)> self) -> mtsVctUChar2
        __init__(mtsGenericObjectProxy<(vctUChar2)> self, mtsVctUChar2 other) -> mtsVctUChar2
        __init__(mtsGenericObjectProxy<(vctUChar2)> self, mtsGenericObjectProxy< vctUChar2 >::value_type const & data) -> mtsVctUChar2
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar2 self) -> mtsGenericObjectProxy< vctUChar2 >::value_type
        GetData(mtsVctUChar2 self) -> mtsGenericObjectProxy< vctUChar2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar2 self) -> vctUChar2"""
        return _cisstMultiTaskPython.mtsVctUChar2_GetDataCopy(self)

mtsVctUChar2_swigregister = _cisstMultiTaskPython.mtsVctUChar2_swigregister
mtsVctUChar2_swigregister(mtsVctUChar2)

def mtsVctUChar2_ClassServices():
  """mtsVctUChar2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar2_ClassServices()

class mtsVctUChar3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar3Base self) -> mtsGenericObjectProxyBase< vctUChar3 >::value_type
        GetData(mtsVctUChar3Base self) -> mtsGenericObjectProxyBase< vctUChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar3Base self, mtsVctUChar3Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar3Base_Assign(self, *args)

mtsVctUChar3Base_swigregister = _cisstMultiTaskPython.mtsVctUChar3Base_swigregister
mtsVctUChar3Base_swigregister(mtsVctUChar3Base)

def mtsVctUChar3Base_ClassServices():
  """mtsVctUChar3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar3Base_ClassServices()

class mtsVctUChar3(mtsVctUChar3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar3_Data_get, _cisstMultiTaskPython.mtsVctUChar3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar3)> self) -> mtsVctUChar3
        __init__(mtsGenericObjectProxy<(vctUChar3)> self, mtsVctUChar3 other) -> mtsVctUChar3
        __init__(mtsGenericObjectProxy<(vctUChar3)> self, mtsGenericObjectProxy< vctUChar3 >::value_type const & data) -> mtsVctUChar3
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar3 self) -> mtsGenericObjectProxy< vctUChar3 >::value_type
        GetData(mtsVctUChar3 self) -> mtsGenericObjectProxy< vctUChar3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar3 self) -> vctUChar3"""
        return _cisstMultiTaskPython.mtsVctUChar3_GetDataCopy(self)

mtsVctUChar3_swigregister = _cisstMultiTaskPython.mtsVctUChar3_swigregister
mtsVctUChar3_swigregister(mtsVctUChar3)

def mtsVctUChar3_ClassServices():
  """mtsVctUChar3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar3_ClassServices()

class mtsVctUChar4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar4Base self) -> mtsGenericObjectProxyBase< vctUChar4 >::value_type
        GetData(mtsVctUChar4Base self) -> mtsGenericObjectProxyBase< vctUChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar4Base self, mtsVctUChar4Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar4Base_Assign(self, *args)

mtsVctUChar4Base_swigregister = _cisstMultiTaskPython.mtsVctUChar4Base_swigregister
mtsVctUChar4Base_swigregister(mtsVctUChar4Base)

def mtsVctUChar4Base_ClassServices():
  """mtsVctUChar4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar4Base_ClassServices()

class mtsVctUChar4(mtsVctUChar4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar4_Data_get, _cisstMultiTaskPython.mtsVctUChar4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar4)> self) -> mtsVctUChar4
        __init__(mtsGenericObjectProxy<(vctUChar4)> self, mtsVctUChar4 other) -> mtsVctUChar4
        __init__(mtsGenericObjectProxy<(vctUChar4)> self, mtsGenericObjectProxy< vctUChar4 >::value_type const & data) -> mtsVctUChar4
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar4 self) -> mtsGenericObjectProxy< vctUChar4 >::value_type
        GetData(mtsVctUChar4 self) -> mtsGenericObjectProxy< vctUChar4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar4 self) -> vctUChar4"""
        return _cisstMultiTaskPython.mtsVctUChar4_GetDataCopy(self)

mtsVctUChar4_swigregister = _cisstMultiTaskPython.mtsVctUChar4_swigregister
mtsVctUChar4_swigregister(mtsVctUChar4)

def mtsVctUChar4_ClassServices():
  """mtsVctUChar4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar4_ClassServices()

class mtsVctUChar5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar5Base self) -> mtsGenericObjectProxyBase< vctUChar5 >::value_type
        GetData(mtsVctUChar5Base self) -> mtsGenericObjectProxyBase< vctUChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar5Base self, mtsVctUChar5Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar5Base_Assign(self, *args)

mtsVctUChar5Base_swigregister = _cisstMultiTaskPython.mtsVctUChar5Base_swigregister
mtsVctUChar5Base_swigregister(mtsVctUChar5Base)

def mtsVctUChar5Base_ClassServices():
  """mtsVctUChar5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar5Base_ClassServices()

class mtsVctUChar5(mtsVctUChar5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar5_Data_get, _cisstMultiTaskPython.mtsVctUChar5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar5)> self) -> mtsVctUChar5
        __init__(mtsGenericObjectProxy<(vctUChar5)> self, mtsVctUChar5 other) -> mtsVctUChar5
        __init__(mtsGenericObjectProxy<(vctUChar5)> self, mtsGenericObjectProxy< vctUChar5 >::value_type const & data) -> mtsVctUChar5
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar5 self) -> mtsGenericObjectProxy< vctUChar5 >::value_type
        GetData(mtsVctUChar5 self) -> mtsGenericObjectProxy< vctUChar5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar5 self) -> vctUChar5"""
        return _cisstMultiTaskPython.mtsVctUChar5_GetDataCopy(self)

mtsVctUChar5_swigregister = _cisstMultiTaskPython.mtsVctUChar5_swigregister
mtsVctUChar5_swigregister(mtsVctUChar5)

def mtsVctUChar5_ClassServices():
  """mtsVctUChar5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar5_ClassServices()

class mtsVctUChar6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar6Base self) -> mtsGenericObjectProxyBase< vctUChar6 >::value_type
        GetData(mtsVctUChar6Base self) -> mtsGenericObjectProxyBase< vctUChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar6Base self, mtsVctUChar6Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar6Base_Assign(self, *args)

mtsVctUChar6Base_swigregister = _cisstMultiTaskPython.mtsVctUChar6Base_swigregister
mtsVctUChar6Base_swigregister(mtsVctUChar6Base)

def mtsVctUChar6Base_ClassServices():
  """mtsVctUChar6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar6Base_ClassServices()

class mtsVctUChar6(mtsVctUChar6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar6_Data_get, _cisstMultiTaskPython.mtsVctUChar6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar6)> self) -> mtsVctUChar6
        __init__(mtsGenericObjectProxy<(vctUChar6)> self, mtsVctUChar6 other) -> mtsVctUChar6
        __init__(mtsGenericObjectProxy<(vctUChar6)> self, mtsGenericObjectProxy< vctUChar6 >::value_type const & data) -> mtsVctUChar6
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar6 self) -> mtsGenericObjectProxy< vctUChar6 >::value_type
        GetData(mtsVctUChar6 self) -> mtsGenericObjectProxy< vctUChar6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar6 self) -> vctUChar6"""
        return _cisstMultiTaskPython.mtsVctUChar6_GetDataCopy(self)

mtsVctUChar6_swigregister = _cisstMultiTaskPython.mtsVctUChar6_swigregister
mtsVctUChar6_swigregister(mtsVctUChar6)

def mtsVctUChar6_ClassServices():
  """mtsVctUChar6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar6_ClassServices()

class mtsVctUChar7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar7Base self) -> mtsGenericObjectProxyBase< vctUChar7 >::value_type
        GetData(mtsVctUChar7Base self) -> mtsGenericObjectProxyBase< vctUChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar7Base self, mtsVctUChar7Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar7Base_Assign(self, *args)

mtsVctUChar7Base_swigregister = _cisstMultiTaskPython.mtsVctUChar7Base_swigregister
mtsVctUChar7Base_swigregister(mtsVctUChar7Base)

def mtsVctUChar7Base_ClassServices():
  """mtsVctUChar7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar7Base_ClassServices()

class mtsVctUChar7(mtsVctUChar7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar7_Data_get, _cisstMultiTaskPython.mtsVctUChar7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar7)> self) -> mtsVctUChar7
        __init__(mtsGenericObjectProxy<(vctUChar7)> self, mtsVctUChar7 other) -> mtsVctUChar7
        __init__(mtsGenericObjectProxy<(vctUChar7)> self, mtsGenericObjectProxy< vctUChar7 >::value_type const & data) -> mtsVctUChar7
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar7 self) -> mtsGenericObjectProxy< vctUChar7 >::value_type
        GetData(mtsVctUChar7 self) -> mtsGenericObjectProxy< vctUChar7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar7 self) -> vctUChar7"""
        return _cisstMultiTaskPython.mtsVctUChar7_GetDataCopy(self)

mtsVctUChar7_swigregister = _cisstMultiTaskPython.mtsVctUChar7_swigregister
mtsVctUChar7_swigregister(mtsVctUChar7)

def mtsVctUChar7_ClassServices():
  """mtsVctUChar7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar7_ClassServices()

class mtsVctUChar8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar8Base self) -> mtsGenericObjectProxyBase< vctUChar8 >::value_type
        GetData(mtsVctUChar8Base self) -> mtsGenericObjectProxyBase< vctUChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar8Base self, mtsVctUChar8Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar8Base_Assign(self, *args)

mtsVctUChar8Base_swigregister = _cisstMultiTaskPython.mtsVctUChar8Base_swigregister
mtsVctUChar8Base_swigregister(mtsVctUChar8Base)

def mtsVctUChar8Base_ClassServices():
  """mtsVctUChar8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar8Base_ClassServices()

class mtsVctUChar8(mtsVctUChar8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar8_Data_get, _cisstMultiTaskPython.mtsVctUChar8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar8)> self) -> mtsVctUChar8
        __init__(mtsGenericObjectProxy<(vctUChar8)> self, mtsVctUChar8 other) -> mtsVctUChar8
        __init__(mtsGenericObjectProxy<(vctUChar8)> self, mtsGenericObjectProxy< vctUChar8 >::value_type const & data) -> mtsVctUChar8
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar8 self) -> mtsGenericObjectProxy< vctUChar8 >::value_type
        GetData(mtsVctUChar8 self) -> mtsGenericObjectProxy< vctUChar8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar8 self) -> vctUChar8"""
        return _cisstMultiTaskPython.mtsVctUChar8_GetDataCopy(self)

mtsVctUChar8_swigregister = _cisstMultiTaskPython.mtsVctUChar8_swigregister
mtsVctUChar8_swigregister(mtsVctUChar8)

def mtsVctUChar8_ClassServices():
  """mtsVctUChar8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar8_ClassServices()

class mtsVctUChar9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUChar9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar9Base self) -> mtsGenericObjectProxyBase< vctUChar9 >::value_type
        GetData(mtsVctUChar9Base self) -> mtsGenericObjectProxyBase< vctUChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUChar9Base self, mtsVctUChar9Base other)"""
        return _cisstMultiTaskPython.mtsVctUChar9Base_Assign(self, *args)

mtsVctUChar9Base_swigregister = _cisstMultiTaskPython.mtsVctUChar9Base_swigregister
mtsVctUChar9Base_swigregister(mtsVctUChar9Base)

def mtsVctUChar9Base_ClassServices():
  """mtsVctUChar9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar9Base_ClassServices()

class mtsVctUChar9(mtsVctUChar9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctUChar9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUChar9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUChar9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUChar9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUChar9_Data_get, _cisstMultiTaskPython.mtsVctUChar9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUChar9)> self) -> mtsVctUChar9
        __init__(mtsGenericObjectProxy<(vctUChar9)> self, mtsVctUChar9 other) -> mtsVctUChar9
        __init__(mtsGenericObjectProxy<(vctUChar9)> self, mtsGenericObjectProxy< vctUChar9 >::value_type const & data) -> mtsVctUChar9
        """
        this = _cisstMultiTaskPython.new_mtsVctUChar9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUChar9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUChar9 self) -> mtsGenericObjectProxy< vctUChar9 >::value_type
        GetData(mtsVctUChar9 self) -> mtsGenericObjectProxy< vctUChar9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUChar9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUChar9 self) -> vctUChar9"""
        return _cisstMultiTaskPython.mtsVctUChar9_GetDataCopy(self)

mtsVctUChar9_swigregister = _cisstMultiTaskPython.mtsVctUChar9_swigregister
mtsVctUChar9_swigregister(mtsVctUChar9)

def mtsVctUChar9_ClassServices():
  """mtsVctUChar9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUChar9_ClassServices()

class mtsVctBool1Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool1Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool1Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool1Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool1Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool1Base self) -> mtsGenericObjectProxyBase< vctBool1 >::value_type
        GetData(mtsVctBool1Base self) -> mtsGenericObjectProxyBase< vctBool1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool1Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool1Base self, mtsVctBool1Base other)"""
        return _cisstMultiTaskPython.mtsVctBool1Base_Assign(self, *args)

mtsVctBool1Base_swigregister = _cisstMultiTaskPython.mtsVctBool1Base_swigregister
mtsVctBool1Base_swigregister(mtsVctBool1Base)

def mtsVctBool1Base_ClassServices():
  """mtsVctBool1Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool1Base_ClassServices()

class mtsVctBool1(mtsVctBool1Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool1_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool1_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool1_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool1_Data_get, _cisstMultiTaskPython.mtsVctBool1_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool1)> self) -> mtsVctBool1
        __init__(mtsGenericObjectProxy<(vctBool1)> self, mtsVctBool1 other) -> mtsVctBool1
        __init__(mtsGenericObjectProxy<(vctBool1)> self, mtsGenericObjectProxy< vctBool1 >::value_type const & data) -> mtsVctBool1
        """
        this = _cisstMultiTaskPython.new_mtsVctBool1(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool1
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool1 self) -> mtsGenericObjectProxy< vctBool1 >::value_type
        GetData(mtsVctBool1 self) -> mtsGenericObjectProxy< vctBool1 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool1_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool1 self) -> vctBool1"""
        return _cisstMultiTaskPython.mtsVctBool1_GetDataCopy(self)

mtsVctBool1_swigregister = _cisstMultiTaskPython.mtsVctBool1_swigregister
mtsVctBool1_swigregister(mtsVctBool1)

def mtsVctBool1_ClassServices():
  """mtsVctBool1_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool1_ClassServices()

class mtsVctBool2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool2Base self) -> mtsGenericObjectProxyBase< vctBool2 >::value_type
        GetData(mtsVctBool2Base self) -> mtsGenericObjectProxyBase< vctBool2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool2Base self, mtsVctBool2Base other)"""
        return _cisstMultiTaskPython.mtsVctBool2Base_Assign(self, *args)

mtsVctBool2Base_swigregister = _cisstMultiTaskPython.mtsVctBool2Base_swigregister
mtsVctBool2Base_swigregister(mtsVctBool2Base)

def mtsVctBool2Base_ClassServices():
  """mtsVctBool2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool2Base_ClassServices()

class mtsVctBool2(mtsVctBool2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool2_Data_get, _cisstMultiTaskPython.mtsVctBool2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool2)> self) -> mtsVctBool2
        __init__(mtsGenericObjectProxy<(vctBool2)> self, mtsVctBool2 other) -> mtsVctBool2
        __init__(mtsGenericObjectProxy<(vctBool2)> self, mtsGenericObjectProxy< vctBool2 >::value_type const & data) -> mtsVctBool2
        """
        this = _cisstMultiTaskPython.new_mtsVctBool2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool2 self) -> mtsGenericObjectProxy< vctBool2 >::value_type
        GetData(mtsVctBool2 self) -> mtsGenericObjectProxy< vctBool2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool2 self) -> vctBool2"""
        return _cisstMultiTaskPython.mtsVctBool2_GetDataCopy(self)

mtsVctBool2_swigregister = _cisstMultiTaskPython.mtsVctBool2_swigregister
mtsVctBool2_swigregister(mtsVctBool2)

def mtsVctBool2_ClassServices():
  """mtsVctBool2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool2_ClassServices()

class mtsVctBool3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool3Base self) -> mtsGenericObjectProxyBase< vctBool3 >::value_type
        GetData(mtsVctBool3Base self) -> mtsGenericObjectProxyBase< vctBool3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool3Base self, mtsVctBool3Base other)"""
        return _cisstMultiTaskPython.mtsVctBool3Base_Assign(self, *args)

mtsVctBool3Base_swigregister = _cisstMultiTaskPython.mtsVctBool3Base_swigregister
mtsVctBool3Base_swigregister(mtsVctBool3Base)

def mtsVctBool3Base_ClassServices():
  """mtsVctBool3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool3Base_ClassServices()

class mtsVctBool3(mtsVctBool3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool3_Data_get, _cisstMultiTaskPython.mtsVctBool3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool3)> self) -> mtsVctBool3
        __init__(mtsGenericObjectProxy<(vctBool3)> self, mtsVctBool3 other) -> mtsVctBool3
        __init__(mtsGenericObjectProxy<(vctBool3)> self, mtsGenericObjectProxy< vctBool3 >::value_type const & data) -> mtsVctBool3
        """
        this = _cisstMultiTaskPython.new_mtsVctBool3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool3 self) -> mtsGenericObjectProxy< vctBool3 >::value_type
        GetData(mtsVctBool3 self) -> mtsGenericObjectProxy< vctBool3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool3 self) -> vctBool3"""
        return _cisstMultiTaskPython.mtsVctBool3_GetDataCopy(self)

mtsVctBool3_swigregister = _cisstMultiTaskPython.mtsVctBool3_swigregister
mtsVctBool3_swigregister(mtsVctBool3)

def mtsVctBool3_ClassServices():
  """mtsVctBool3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool3_ClassServices()

class mtsVctBool4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool4Base self) -> mtsGenericObjectProxyBase< vctBool4 >::value_type
        GetData(mtsVctBool4Base self) -> mtsGenericObjectProxyBase< vctBool4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool4Base self, mtsVctBool4Base other)"""
        return _cisstMultiTaskPython.mtsVctBool4Base_Assign(self, *args)

mtsVctBool4Base_swigregister = _cisstMultiTaskPython.mtsVctBool4Base_swigregister
mtsVctBool4Base_swigregister(mtsVctBool4Base)

def mtsVctBool4Base_ClassServices():
  """mtsVctBool4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool4Base_ClassServices()

class mtsVctBool4(mtsVctBool4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool4_Data_get, _cisstMultiTaskPython.mtsVctBool4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool4)> self) -> mtsVctBool4
        __init__(mtsGenericObjectProxy<(vctBool4)> self, mtsVctBool4 other) -> mtsVctBool4
        __init__(mtsGenericObjectProxy<(vctBool4)> self, mtsGenericObjectProxy< vctBool4 >::value_type const & data) -> mtsVctBool4
        """
        this = _cisstMultiTaskPython.new_mtsVctBool4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool4 self) -> mtsGenericObjectProxy< vctBool4 >::value_type
        GetData(mtsVctBool4 self) -> mtsGenericObjectProxy< vctBool4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool4 self) -> vctBool4"""
        return _cisstMultiTaskPython.mtsVctBool4_GetDataCopy(self)

mtsVctBool4_swigregister = _cisstMultiTaskPython.mtsVctBool4_swigregister
mtsVctBool4_swigregister(mtsVctBool4)

def mtsVctBool4_ClassServices():
  """mtsVctBool4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool4_ClassServices()

class mtsVctBool5Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool5Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool5Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool5Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool5Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool5Base self) -> mtsGenericObjectProxyBase< vctBool5 >::value_type
        GetData(mtsVctBool5Base self) -> mtsGenericObjectProxyBase< vctBool5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool5Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool5Base self, mtsVctBool5Base other)"""
        return _cisstMultiTaskPython.mtsVctBool5Base_Assign(self, *args)

mtsVctBool5Base_swigregister = _cisstMultiTaskPython.mtsVctBool5Base_swigregister
mtsVctBool5Base_swigregister(mtsVctBool5Base)

def mtsVctBool5Base_ClassServices():
  """mtsVctBool5Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool5Base_ClassServices()

class mtsVctBool5(mtsVctBool5Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool5)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool5_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool5_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool5_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool5_Data_get, _cisstMultiTaskPython.mtsVctBool5_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool5)> self) -> mtsVctBool5
        __init__(mtsGenericObjectProxy<(vctBool5)> self, mtsVctBool5 other) -> mtsVctBool5
        __init__(mtsGenericObjectProxy<(vctBool5)> self, mtsGenericObjectProxy< vctBool5 >::value_type const & data) -> mtsVctBool5
        """
        this = _cisstMultiTaskPython.new_mtsVctBool5(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool5
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool5 self) -> mtsGenericObjectProxy< vctBool5 >::value_type
        GetData(mtsVctBool5 self) -> mtsGenericObjectProxy< vctBool5 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool5_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool5 self) -> vctBool5"""
        return _cisstMultiTaskPython.mtsVctBool5_GetDataCopy(self)

mtsVctBool5_swigregister = _cisstMultiTaskPython.mtsVctBool5_swigregister
mtsVctBool5_swigregister(mtsVctBool5)

def mtsVctBool5_ClassServices():
  """mtsVctBool5_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool5_ClassServices()

class mtsVctBool6Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool6Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool6Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool6Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool6Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool6Base self) -> mtsGenericObjectProxyBase< vctBool6 >::value_type
        GetData(mtsVctBool6Base self) -> mtsGenericObjectProxyBase< vctBool6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool6Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool6Base self, mtsVctBool6Base other)"""
        return _cisstMultiTaskPython.mtsVctBool6Base_Assign(self, *args)

mtsVctBool6Base_swigregister = _cisstMultiTaskPython.mtsVctBool6Base_swigregister
mtsVctBool6Base_swigregister(mtsVctBool6Base)

def mtsVctBool6Base_ClassServices():
  """mtsVctBool6Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool6Base_ClassServices()

class mtsVctBool6(mtsVctBool6Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool6)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool6_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool6_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool6_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool6_Data_get, _cisstMultiTaskPython.mtsVctBool6_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool6)> self) -> mtsVctBool6
        __init__(mtsGenericObjectProxy<(vctBool6)> self, mtsVctBool6 other) -> mtsVctBool6
        __init__(mtsGenericObjectProxy<(vctBool6)> self, mtsGenericObjectProxy< vctBool6 >::value_type const & data) -> mtsVctBool6
        """
        this = _cisstMultiTaskPython.new_mtsVctBool6(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool6
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool6 self) -> mtsGenericObjectProxy< vctBool6 >::value_type
        GetData(mtsVctBool6 self) -> mtsGenericObjectProxy< vctBool6 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool6_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool6 self) -> vctBool6"""
        return _cisstMultiTaskPython.mtsVctBool6_GetDataCopy(self)

mtsVctBool6_swigregister = _cisstMultiTaskPython.mtsVctBool6_swigregister
mtsVctBool6_swigregister(mtsVctBool6)

def mtsVctBool6_ClassServices():
  """mtsVctBool6_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool6_ClassServices()

class mtsVctBool7Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool7Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool7Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool7Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool7Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool7Base self) -> mtsGenericObjectProxyBase< vctBool7 >::value_type
        GetData(mtsVctBool7Base self) -> mtsGenericObjectProxyBase< vctBool7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool7Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool7Base self, mtsVctBool7Base other)"""
        return _cisstMultiTaskPython.mtsVctBool7Base_Assign(self, *args)

mtsVctBool7Base_swigregister = _cisstMultiTaskPython.mtsVctBool7Base_swigregister
mtsVctBool7Base_swigregister(mtsVctBool7Base)

def mtsVctBool7Base_ClassServices():
  """mtsVctBool7Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool7Base_ClassServices()

class mtsVctBool7(mtsVctBool7Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool7)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool7_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool7_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool7_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool7_Data_get, _cisstMultiTaskPython.mtsVctBool7_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool7)> self) -> mtsVctBool7
        __init__(mtsGenericObjectProxy<(vctBool7)> self, mtsVctBool7 other) -> mtsVctBool7
        __init__(mtsGenericObjectProxy<(vctBool7)> self, mtsGenericObjectProxy< vctBool7 >::value_type const & data) -> mtsVctBool7
        """
        this = _cisstMultiTaskPython.new_mtsVctBool7(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool7
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool7 self) -> mtsGenericObjectProxy< vctBool7 >::value_type
        GetData(mtsVctBool7 self) -> mtsGenericObjectProxy< vctBool7 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool7_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool7 self) -> vctBool7"""
        return _cisstMultiTaskPython.mtsVctBool7_GetDataCopy(self)

mtsVctBool7_swigregister = _cisstMultiTaskPython.mtsVctBool7_swigregister
mtsVctBool7_swigregister(mtsVctBool7)

def mtsVctBool7_ClassServices():
  """mtsVctBool7_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool7_ClassServices()

class mtsVctBool8Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool8Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool8Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool8Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool8Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool8Base self) -> mtsGenericObjectProxyBase< vctBool8 >::value_type
        GetData(mtsVctBool8Base self) -> mtsGenericObjectProxyBase< vctBool8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool8Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool8Base self, mtsVctBool8Base other)"""
        return _cisstMultiTaskPython.mtsVctBool8Base_Assign(self, *args)

mtsVctBool8Base_swigregister = _cisstMultiTaskPython.mtsVctBool8Base_swigregister
mtsVctBool8Base_swigregister(mtsVctBool8Base)

def mtsVctBool8Base_ClassServices():
  """mtsVctBool8Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool8Base_ClassServices()

class mtsVctBool8(mtsVctBool8Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool8)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool8_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool8_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool8_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool8_Data_get, _cisstMultiTaskPython.mtsVctBool8_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool8)> self) -> mtsVctBool8
        __init__(mtsGenericObjectProxy<(vctBool8)> self, mtsVctBool8 other) -> mtsVctBool8
        __init__(mtsGenericObjectProxy<(vctBool8)> self, mtsGenericObjectProxy< vctBool8 >::value_type const & data) -> mtsVctBool8
        """
        this = _cisstMultiTaskPython.new_mtsVctBool8(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool8
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool8 self) -> mtsGenericObjectProxy< vctBool8 >::value_type
        GetData(mtsVctBool8 self) -> mtsGenericObjectProxy< vctBool8 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool8_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool8 self) -> vctBool8"""
        return _cisstMultiTaskPython.mtsVctBool8_GetDataCopy(self)

mtsVctBool8_swigregister = _cisstMultiTaskPython.mtsVctBool8_swigregister
mtsVctBool8_swigregister(mtsVctBool8)

def mtsVctBool8_ClassServices():
  """mtsVctBool8_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool8_ClassServices()

class mtsVctBool9Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBool9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool9Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool9Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool9Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool9Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool9Base self) -> mtsGenericObjectProxyBase< vctBool9 >::value_type
        GetData(mtsVctBool9Base self) -> mtsGenericObjectProxyBase< vctBool9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool9Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBool9Base self, mtsVctBool9Base other)"""
        return _cisstMultiTaskPython.mtsVctBool9Base_Assign(self, *args)

mtsVctBool9Base_swigregister = _cisstMultiTaskPython.mtsVctBool9Base_swigregister
mtsVctBool9Base_swigregister(mtsVctBool9Base)

def mtsVctBool9Base_ClassServices():
  """mtsVctBool9Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool9Base_ClassServices()

class mtsVctBool9(mtsVctBool9Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctBool9)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBool9_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBool9_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBool9_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBool9_Data_get, _cisstMultiTaskPython.mtsVctBool9_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBool9)> self) -> mtsVctBool9
        __init__(mtsGenericObjectProxy<(vctBool9)> self, mtsVctBool9 other) -> mtsVctBool9
        __init__(mtsGenericObjectProxy<(vctBool9)> self, mtsGenericObjectProxy< vctBool9 >::value_type const & data) -> mtsVctBool9
        """
        this = _cisstMultiTaskPython.new_mtsVctBool9(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBool9
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBool9 self) -> mtsGenericObjectProxy< vctBool9 >::value_type
        GetData(mtsVctBool9 self) -> mtsGenericObjectProxy< vctBool9 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBool9_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBool9 self) -> vctBool9"""
        return _cisstMultiTaskPython.mtsVctBool9_GetDataCopy(self)

mtsVctBool9_swigregister = _cisstMultiTaskPython.mtsVctBool9_swigregister
mtsVctBool9_swigregister(mtsVctBool9)

def mtsVctBool9_ClassServices():
  """mtsVctBool9_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBool9_ClassServices()

class mtsVct2x2Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct2x2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2x2Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct2x2Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2x2Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2x2Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct2x2Base self) -> mtsGenericObjectProxyBase< vct2x2 >::value_type
        GetData(mtsVct2x2Base self) -> mtsGenericObjectProxyBase< vct2x2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2x2Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct2x2Base self, mtsVct2x2Base other)"""
        return _cisstMultiTaskPython.mtsVct2x2Base_Assign(self, *args)

mtsVct2x2Base_swigregister = _cisstMultiTaskPython.mtsVct2x2Base_swigregister
mtsVct2x2Base_swigregister(mtsVct2x2Base)

def mtsVct2x2Base_ClassServices():
  """mtsVct2x2Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct2x2Base_ClassServices()

class mtsVct2x2(mtsVct2x2Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct2x2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct2x2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct2x2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct2x2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct2x2_Data_get, _cisstMultiTaskPython.mtsVct2x2_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct2x2)> self) -> mtsVct2x2
        __init__(mtsGenericObjectProxy<(vct2x2)> self, mtsVct2x2 other) -> mtsVct2x2
        __init__(mtsGenericObjectProxy<(vct2x2)> self, mtsGenericObjectProxy< vct2x2 >::value_type const & data) -> mtsVct2x2
        """
        this = _cisstMultiTaskPython.new_mtsVct2x2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct2x2
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct2x2 self) -> mtsGenericObjectProxy< vct2x2 >::value_type
        GetData(mtsVct2x2 self) -> mtsGenericObjectProxy< vct2x2 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct2x2_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct2x2 self) -> vct2x2"""
        return _cisstMultiTaskPython.mtsVct2x2_GetDataCopy(self)

mtsVct2x2_swigregister = _cisstMultiTaskPython.mtsVct2x2_swigregister
mtsVct2x2_swigregister(mtsVct2x2)

def mtsVct2x2_ClassServices():
  """mtsVct2x2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct2x2_ClassServices()

class mtsVct3x3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct3x3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3x3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct3x3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3x3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3x3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct3x3Base self) -> mtsGenericObjectProxyBase< vct3x3 >::value_type
        GetData(mtsVct3x3Base self) -> mtsGenericObjectProxyBase< vct3x3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3x3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct3x3Base self, mtsVct3x3Base other)"""
        return _cisstMultiTaskPython.mtsVct3x3Base_Assign(self, *args)

mtsVct3x3Base_swigregister = _cisstMultiTaskPython.mtsVct3x3Base_swigregister
mtsVct3x3Base_swigregister(mtsVct3x3Base)

def mtsVct3x3Base_ClassServices():
  """mtsVct3x3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct3x3Base_ClassServices()

class mtsVct3x3(mtsVct3x3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct3x3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct3x3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct3x3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct3x3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct3x3_Data_get, _cisstMultiTaskPython.mtsVct3x3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct3x3)> self) -> mtsVct3x3
        __init__(mtsGenericObjectProxy<(vct3x3)> self, mtsVct3x3 other) -> mtsVct3x3
        __init__(mtsGenericObjectProxy<(vct3x3)> self, mtsGenericObjectProxy< vct3x3 >::value_type const & data) -> mtsVct3x3
        """
        this = _cisstMultiTaskPython.new_mtsVct3x3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct3x3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct3x3 self) -> mtsGenericObjectProxy< vct3x3 >::value_type
        GetData(mtsVct3x3 self) -> mtsGenericObjectProxy< vct3x3 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct3x3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct3x3 self) -> vct3x3"""
        return _cisstMultiTaskPython.mtsVct3x3_GetDataCopy(self)

mtsVct3x3_swigregister = _cisstMultiTaskPython.mtsVct3x3_swigregister
mtsVct3x3_swigregister(mtsVct3x3)

def mtsVct3x3_ClassServices():
  """mtsVct3x3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct3x3_ClassServices()

class mtsVct4x4Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vct4x4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4x4Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct4x4Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4x4Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4x4Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct4x4Base self) -> mtsGenericObjectProxyBase< vct4x4 >::value_type
        GetData(mtsVct4x4Base self) -> mtsGenericObjectProxyBase< vct4x4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4x4Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVct4x4Base self, mtsVct4x4Base other)"""
        return _cisstMultiTaskPython.mtsVct4x4Base_Assign(self, *args)

mtsVct4x4Base_swigregister = _cisstMultiTaskPython.mtsVct4x4Base_swigregister
mtsVct4x4Base_swigregister(mtsVct4x4Base)

def mtsVct4x4Base_ClassServices():
  """mtsVct4x4Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct4x4Base_ClassServices()

class mtsVct4x4(mtsVct4x4Base):
    """Proxy of C++ mtsGenericObjectProxy<(vct4x4)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVct4x4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVct4x4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVct4x4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVct4x4_Data_get, _cisstMultiTaskPython.mtsVct4x4_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vct4x4)> self) -> mtsVct4x4
        __init__(mtsGenericObjectProxy<(vct4x4)> self, mtsVct4x4 other) -> mtsVct4x4
        __init__(mtsGenericObjectProxy<(vct4x4)> self, mtsGenericObjectProxy< vct4x4 >::value_type const & data) -> mtsVct4x4
        """
        this = _cisstMultiTaskPython.new_mtsVct4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVct4x4
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVct4x4 self) -> mtsGenericObjectProxy< vct4x4 >::value_type
        GetData(mtsVct4x4 self) -> mtsGenericObjectProxy< vct4x4 >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVct4x4_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVct4x4 self) -> vct4x4"""
        return _cisstMultiTaskPython.mtsVct4x4_GetDataCopy(self)

mtsVct4x4_swigregister = _cisstMultiTaskPython.mtsVct4x4_swigregister
mtsVct4x4_swigregister(mtsVct4x4)

def mtsVct4x4_ClassServices():
  """mtsVct4x4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVct4x4_ClassServices()

class mtsVctMatRot3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctMatRot3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctMatRot3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctMatRot3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctMatRot3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctMatRot3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctMatRot3Base self) -> mtsGenericObjectProxyBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type
        GetData(mtsVctMatRot3Base self) -> mtsGenericObjectProxyBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctMatRot3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctMatRot3Base self, mtsVctMatRot3Base other)"""
        return _cisstMultiTaskPython.mtsVctMatRot3Base_Assign(self, *args)

mtsVctMatRot3Base_swigregister = _cisstMultiTaskPython.mtsVctMatRot3Base_swigregister
mtsVctMatRot3Base_swigregister(mtsVctMatRot3Base)

def mtsVctMatRot3Base_ClassServices():
  """mtsVctMatRot3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctMatRot3Base_ClassServices()

class mtsVctMatRot3(mtsVctMatRot3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctMatRot3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctMatRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctMatRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctMatRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctMatRot3_Data_get, _cisstMultiTaskPython.mtsVctMatRot3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctMatRot3)> self) -> mtsVctMatRot3
        __init__(mtsGenericObjectProxy<(vctMatRot3)> self, mtsVctMatRot3 other) -> mtsVctMatRot3
        __init__(mtsGenericObjectProxy<(vctMatRot3)> self, mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type const & data) -> mtsVctMatRot3
        """
        this = _cisstMultiTaskPython.new_mtsVctMatRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctMatRot3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctMatRot3 self) -> mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type
        GetData(mtsVctMatRot3 self) -> mtsGenericObjectProxy< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctMatRot3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctMatRot3 self) -> vctMatRot3"""
        return _cisstMultiTaskPython.mtsVctMatRot3_GetDataCopy(self)

mtsVctMatRot3_swigregister = _cisstMultiTaskPython.mtsVctMatRot3_swigregister
mtsVctMatRot3_swigregister(mtsVctMatRot3)

def mtsVctMatRot3_ClassServices():
  """mtsVctMatRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctMatRot3_ClassServices()

class mtsVctFrm3Base(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFrm3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFrm3Base_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFrm3Base_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFrm3Base_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFrm3Base
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFrm3Base self) -> vctFrm3
        GetData(mtsVctFrm3Base self) -> vctFrm3
        """
        return _cisstMultiTaskPython.mtsVctFrm3Base_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFrm3Base self, mtsVctFrm3Base other)"""
        return _cisstMultiTaskPython.mtsVctFrm3Base_Assign(self, *args)

mtsVctFrm3Base_swigregister = _cisstMultiTaskPython.mtsVctFrm3Base_swigregister
mtsVctFrm3Base_swigregister(mtsVctFrm3Base)

def mtsVctFrm3Base_ClassServices():
  """mtsVctFrm3Base_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFrm3Base_ClassServices()

class mtsVctFrm3(mtsVctFrm3Base):
    """Proxy of C++ mtsGenericObjectProxy<(vctFrm3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFrm3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFrm3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFrm3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFrm3_Data_get, _cisstMultiTaskPython.mtsVctFrm3_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFrm3)> self) -> mtsVctFrm3
        __init__(mtsGenericObjectProxy<(vctFrm3)> self, mtsVctFrm3 other) -> mtsVctFrm3
        __init__(mtsGenericObjectProxy<(vctFrm3)> self, vctFrm3 data) -> mtsVctFrm3
        """
        this = _cisstMultiTaskPython.new_mtsVctFrm3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFrm3
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFrm3 self) -> vctFrm3
        GetData(mtsVctFrm3 self) -> vctFrm3
        """
        return _cisstMultiTaskPython.mtsVctFrm3_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFrm3 self) -> vctFrm3"""
        return _cisstMultiTaskPython.mtsVctFrm3_GetDataCopy(self)

mtsVctFrm3_swigregister = _cisstMultiTaskPython.mtsVctFrm3_swigregister
mtsVctFrm3_swigregister(mtsVctFrm3)

def mtsVctFrm3_ClassServices():
  """mtsVctFrm3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFrm3_ClassServices()

class mtsVctDoubleVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctDoubleVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctDoubleVecBase self) -> mtsGenericObjectProxyBase< vctDoubleVec >::value_type
        GetData(mtsVctDoubleVecBase self) -> mtsGenericObjectProxyBase< vctDoubleVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctDoubleVecBase self, mtsVctDoubleVecBase other)"""
        return _cisstMultiTaskPython.mtsVctDoubleVecBase_Assign(self, *args)

mtsVctDoubleVecBase_swigregister = _cisstMultiTaskPython.mtsVctDoubleVecBase_swigregister
mtsVctDoubleVecBase_swigregister(mtsVctDoubleVecBase)

def mtsVctDoubleVecBase_ClassServices():
  """mtsVctDoubleVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctDoubleVecBase_ClassServices()

class mtsVctDoubleVec(mtsVctDoubleVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctDoubleVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctDoubleVec_Data_get, _cisstMultiTaskPython.mtsVctDoubleVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctDoubleVec)> self) -> mtsVctDoubleVec
        __init__(mtsGenericObjectProxy<(vctDoubleVec)> self, mtsVctDoubleVec other) -> mtsVctDoubleVec
        __init__(mtsGenericObjectProxy<(vctDoubleVec)> self, mtsGenericObjectProxy< vctDoubleVec >::value_type const & data) -> mtsVctDoubleVec
        """
        this = _cisstMultiTaskPython.new_mtsVctDoubleVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctDoubleVec self) -> mtsGenericObjectProxy< vctDoubleVec >::value_type
        GetData(mtsVctDoubleVec self) -> mtsGenericObjectProxy< vctDoubleVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctDoubleVec self) -> vctDoubleVec"""
        return _cisstMultiTaskPython.mtsVctDoubleVec_GetDataCopy(self)

mtsVctDoubleVec_swigregister = _cisstMultiTaskPython.mtsVctDoubleVec_swigregister
mtsVctDoubleVec_swigregister(mtsVctDoubleVec)

def mtsVctDoubleVec_ClassServices():
  """mtsVctDoubleVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctDoubleVec_ClassServices()

class mtsVctFloatVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloatVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloatVecBase self) -> mtsGenericObjectProxyBase< vctFloatVec >::value_type
        GetData(mtsVctFloatVecBase self) -> mtsGenericObjectProxyBase< vctFloatVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloatVecBase self, mtsVctFloatVecBase other)"""
        return _cisstMultiTaskPython.mtsVctFloatVecBase_Assign(self, *args)

mtsVctFloatVecBase_swigregister = _cisstMultiTaskPython.mtsVctFloatVecBase_swigregister
mtsVctFloatVecBase_swigregister(mtsVctFloatVecBase)

def mtsVctFloatVecBase_ClassServices():
  """mtsVctFloatVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloatVecBase_ClassServices()

class mtsVctFloatVec(mtsVctFloatVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloatVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloatVec_Data_get, _cisstMultiTaskPython.mtsVctFloatVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloatVec)> self) -> mtsVctFloatVec
        __init__(mtsGenericObjectProxy<(vctFloatVec)> self, mtsVctFloatVec other) -> mtsVctFloatVec
        __init__(mtsGenericObjectProxy<(vctFloatVec)> self, mtsGenericObjectProxy< vctFloatVec >::value_type const & data) -> mtsVctFloatVec
        """
        this = _cisstMultiTaskPython.new_mtsVctFloatVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloatVec self) -> mtsGenericObjectProxy< vctFloatVec >::value_type
        GetData(mtsVctFloatVec self) -> mtsGenericObjectProxy< vctFloatVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloatVec self) -> vctFloatVec"""
        return _cisstMultiTaskPython.mtsVctFloatVec_GetDataCopy(self)

mtsVctFloatVec_swigregister = _cisstMultiTaskPython.mtsVctFloatVec_swigregister
mtsVctFloatVec_swigregister(mtsVctFloatVec)

def mtsVctFloatVec_ClassServices():
  """mtsVctFloatVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloatVec_ClassServices()

class mtsVctIntVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctIntVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctIntVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctIntVecBase self) -> mtsGenericObjectProxyBase< vctIntVec >::value_type
        GetData(mtsVctIntVecBase self) -> mtsGenericObjectProxyBase< vctIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctIntVecBase self, mtsVctIntVecBase other)"""
        return _cisstMultiTaskPython.mtsVctIntVecBase_Assign(self, *args)

mtsVctIntVecBase_swigregister = _cisstMultiTaskPython.mtsVctIntVecBase_swigregister
mtsVctIntVecBase_swigregister(mtsVctIntVecBase)

def mtsVctIntVecBase_ClassServices():
  """mtsVctIntVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctIntVecBase_ClassServices()

class mtsVctIntVec(mtsVctIntVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctIntVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctIntVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctIntVec_Data_get, _cisstMultiTaskPython.mtsVctIntVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctIntVec)> self) -> mtsVctIntVec
        __init__(mtsGenericObjectProxy<(vctIntVec)> self, mtsVctIntVec other) -> mtsVctIntVec
        __init__(mtsGenericObjectProxy<(vctIntVec)> self, mtsGenericObjectProxy< vctIntVec >::value_type const & data) -> mtsVctIntVec
        """
        this = _cisstMultiTaskPython.new_mtsVctIntVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctIntVec self) -> mtsGenericObjectProxy< vctIntVec >::value_type
        GetData(mtsVctIntVec self) -> mtsGenericObjectProxy< vctIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctIntVec self) -> vctIntVec"""
        return _cisstMultiTaskPython.mtsVctIntVec_GetDataCopy(self)

mtsVctIntVec_swigregister = _cisstMultiTaskPython.mtsVctIntVec_swigregister
mtsVctIntVec_swigregister(mtsVctIntVec)

def mtsVctIntVec_ClassServices():
  """mtsVctIntVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctIntVec_ClassServices()

class mtsVctUIntVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUIntVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUIntVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUIntVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUIntVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUIntVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUIntVecBase self) -> mtsGenericObjectProxyBase< vctUIntVec >::value_type
        GetData(mtsVctUIntVecBase self) -> mtsGenericObjectProxyBase< vctUIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUIntVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUIntVecBase self, mtsVctUIntVecBase other)"""
        return _cisstMultiTaskPython.mtsVctUIntVecBase_Assign(self, *args)

mtsVctUIntVecBase_swigregister = _cisstMultiTaskPython.mtsVctUIntVecBase_swigregister
mtsVctUIntVecBase_swigregister(mtsVctUIntVecBase)

def mtsVctUIntVecBase_ClassServices():
  """mtsVctUIntVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUIntVecBase_ClassServices()

class mtsVctUIntVec(mtsVctUIntVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctUIntVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUIntVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUIntVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUIntVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUIntVec_Data_get, _cisstMultiTaskPython.mtsVctUIntVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUIntVec)> self) -> mtsVctUIntVec
        __init__(mtsGenericObjectProxy<(vctUIntVec)> self, mtsVctUIntVec other) -> mtsVctUIntVec
        __init__(mtsGenericObjectProxy<(vctUIntVec)> self, mtsGenericObjectProxy< vctUIntVec >::value_type const & data) -> mtsVctUIntVec
        """
        this = _cisstMultiTaskPython.new_mtsVctUIntVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUIntVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUIntVec self) -> mtsGenericObjectProxy< vctUIntVec >::value_type
        GetData(mtsVctUIntVec self) -> mtsGenericObjectProxy< vctUIntVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUIntVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUIntVec self) -> vctUIntVec"""
        return _cisstMultiTaskPython.mtsVctUIntVec_GetDataCopy(self)

mtsVctUIntVec_swigregister = _cisstMultiTaskPython.mtsVctUIntVec_swigregister
mtsVctUIntVec_swigregister(mtsVctUIntVec)

def mtsVctUIntVec_ClassServices():
  """mtsVctUIntVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUIntVec_ClassServices()

class mtsVctCharVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctCharVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctCharVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctCharVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctCharVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctCharVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctCharVecBase self) -> mtsGenericObjectProxyBase< vctCharVec >::value_type
        GetData(mtsVctCharVecBase self) -> mtsGenericObjectProxyBase< vctCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctCharVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctCharVecBase self, mtsVctCharVecBase other)"""
        return _cisstMultiTaskPython.mtsVctCharVecBase_Assign(self, *args)

mtsVctCharVecBase_swigregister = _cisstMultiTaskPython.mtsVctCharVecBase_swigregister
mtsVctCharVecBase_swigregister(mtsVctCharVecBase)

def mtsVctCharVecBase_ClassServices():
  """mtsVctCharVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctCharVecBase_ClassServices()

class mtsVctCharVec(mtsVctCharVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctCharVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctCharVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctCharVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctCharVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctCharVec_Data_get, _cisstMultiTaskPython.mtsVctCharVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctCharVec)> self) -> mtsVctCharVec
        __init__(mtsGenericObjectProxy<(vctCharVec)> self, mtsVctCharVec other) -> mtsVctCharVec
        __init__(mtsGenericObjectProxy<(vctCharVec)> self, mtsGenericObjectProxy< vctCharVec >::value_type const & data) -> mtsVctCharVec
        """
        this = _cisstMultiTaskPython.new_mtsVctCharVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctCharVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctCharVec self) -> mtsGenericObjectProxy< vctCharVec >::value_type
        GetData(mtsVctCharVec self) -> mtsGenericObjectProxy< vctCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctCharVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctCharVec self) -> vctCharVec"""
        return _cisstMultiTaskPython.mtsVctCharVec_GetDataCopy(self)

mtsVctCharVec_swigregister = _cisstMultiTaskPython.mtsVctCharVec_swigregister
mtsVctCharVec_swigregister(mtsVctCharVec)

def mtsVctCharVec_ClassServices():
  """mtsVctCharVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctCharVec_ClassServices()

class mtsVctUCharVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUCharVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUCharVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUCharVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUCharVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUCharVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUCharVecBase self) -> mtsGenericObjectProxyBase< vctUCharVec >::value_type
        GetData(mtsVctUCharVecBase self) -> mtsGenericObjectProxyBase< vctUCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUCharVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUCharVecBase self, mtsVctUCharVecBase other)"""
        return _cisstMultiTaskPython.mtsVctUCharVecBase_Assign(self, *args)

mtsVctUCharVecBase_swigregister = _cisstMultiTaskPython.mtsVctUCharVecBase_swigregister
mtsVctUCharVecBase_swigregister(mtsVctUCharVecBase)

def mtsVctUCharVecBase_ClassServices():
  """mtsVctUCharVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUCharVecBase_ClassServices()

class mtsVctUCharVec(mtsVctUCharVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctUCharVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUCharVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUCharVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUCharVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUCharVec_Data_get, _cisstMultiTaskPython.mtsVctUCharVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUCharVec)> self) -> mtsVctUCharVec
        __init__(mtsGenericObjectProxy<(vctUCharVec)> self, mtsVctUCharVec other) -> mtsVctUCharVec
        __init__(mtsGenericObjectProxy<(vctUCharVec)> self, mtsGenericObjectProxy< vctUCharVec >::value_type const & data) -> mtsVctUCharVec
        """
        this = _cisstMultiTaskPython.new_mtsVctUCharVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUCharVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUCharVec self) -> mtsGenericObjectProxy< vctUCharVec >::value_type
        GetData(mtsVctUCharVec self) -> mtsGenericObjectProxy< vctUCharVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUCharVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUCharVec self) -> vctUCharVec"""
        return _cisstMultiTaskPython.mtsVctUCharVec_GetDataCopy(self)

mtsVctUCharVec_swigregister = _cisstMultiTaskPython.mtsVctUCharVec_swigregister
mtsVctUCharVec_swigregister(mtsVctUCharVec)

def mtsVctUCharVec_ClassServices():
  """mtsVctUCharVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUCharVec_ClassServices()

class mtsVctBoolVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctBoolVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBoolVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBoolVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBoolVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBoolVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBoolVecBase self) -> mtsGenericObjectProxyBase< vctBoolVec >::value_type
        GetData(mtsVctBoolVecBase self) -> mtsGenericObjectProxyBase< vctBoolVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBoolVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctBoolVecBase self, mtsVctBoolVecBase other)"""
        return _cisstMultiTaskPython.mtsVctBoolVecBase_Assign(self, *args)

mtsVctBoolVecBase_swigregister = _cisstMultiTaskPython.mtsVctBoolVecBase_swigregister
mtsVctBoolVecBase_swigregister(mtsVctBoolVecBase)

def mtsVctBoolVecBase_ClassServices():
  """mtsVctBoolVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBoolVecBase_ClassServices()

class mtsVctBoolVec(mtsVctBoolVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctBoolVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctBoolVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctBoolVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctBoolVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctBoolVec_Data_get, _cisstMultiTaskPython.mtsVctBoolVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctBoolVec)> self) -> mtsVctBoolVec
        __init__(mtsGenericObjectProxy<(vctBoolVec)> self, mtsVctBoolVec other) -> mtsVctBoolVec
        __init__(mtsGenericObjectProxy<(vctBoolVec)> self, mtsGenericObjectProxy< vctBoolVec >::value_type const & data) -> mtsVctBoolVec
        """
        this = _cisstMultiTaskPython.new_mtsVctBoolVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctBoolVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctBoolVec self) -> mtsGenericObjectProxy< vctBoolVec >::value_type
        GetData(mtsVctBoolVec self) -> mtsGenericObjectProxy< vctBoolVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctBoolVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctBoolVec self) -> vctBoolVec"""
        return _cisstMultiTaskPython.mtsVctBoolVec_GetDataCopy(self)

mtsVctBoolVec_swigregister = _cisstMultiTaskPython.mtsVctBoolVec_swigregister
mtsVctBoolVec_swigregister(mtsVctBoolVec)

def mtsVctBoolVec_ClassServices():
  """mtsVctBoolVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctBoolVec_ClassServices()

class mtsVctShortVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctShortVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShortVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShortVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShortVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShortVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShortVecBase self) -> mtsGenericObjectProxyBase< vctShortVec >::value_type
        GetData(mtsVctShortVecBase self) -> mtsGenericObjectProxyBase< vctShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShortVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctShortVecBase self, mtsVctShortVecBase other)"""
        return _cisstMultiTaskPython.mtsVctShortVecBase_Assign(self, *args)

mtsVctShortVecBase_swigregister = _cisstMultiTaskPython.mtsVctShortVecBase_swigregister
mtsVctShortVecBase_swigregister(mtsVctShortVecBase)

def mtsVctShortVecBase_ClassServices():
  """mtsVctShortVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShortVecBase_ClassServices()

class mtsVctShortVec(mtsVctShortVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctShortVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctShortVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctShortVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctShortVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctShortVec_Data_get, _cisstMultiTaskPython.mtsVctShortVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctShortVec)> self) -> mtsVctShortVec
        __init__(mtsGenericObjectProxy<(vctShortVec)> self, mtsVctShortVec other) -> mtsVctShortVec
        __init__(mtsGenericObjectProxy<(vctShortVec)> self, mtsGenericObjectProxy< vctShortVec >::value_type const & data) -> mtsVctShortVec
        """
        this = _cisstMultiTaskPython.new_mtsVctShortVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctShortVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctShortVec self) -> mtsGenericObjectProxy< vctShortVec >::value_type
        GetData(mtsVctShortVec self) -> mtsGenericObjectProxy< vctShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctShortVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctShortVec self) -> vctShortVec"""
        return _cisstMultiTaskPython.mtsVctShortVec_GetDataCopy(self)

mtsVctShortVec_swigregister = _cisstMultiTaskPython.mtsVctShortVec_swigregister
mtsVctShortVec_swigregister(mtsVctShortVec)

def mtsVctShortVec_ClassServices():
  """mtsVctShortVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctShortVec_ClassServices()

class mtsVctUShortVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctUShortVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShortVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShortVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShortVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShortVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShortVecBase self) -> mtsGenericObjectProxyBase< vctUShortVec >::value_type
        GetData(mtsVctUShortVecBase self) -> mtsGenericObjectProxyBase< vctUShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShortVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctUShortVecBase self, mtsVctUShortVecBase other)"""
        return _cisstMultiTaskPython.mtsVctUShortVecBase_Assign(self, *args)

mtsVctUShortVecBase_swigregister = _cisstMultiTaskPython.mtsVctUShortVecBase_swigregister
mtsVctUShortVecBase_swigregister(mtsVctUShortVecBase)

def mtsVctUShortVecBase_ClassServices():
  """mtsVctUShortVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShortVecBase_ClassServices()

class mtsVctUShortVec(mtsVctUShortVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctUShortVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctUShortVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctUShortVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctUShortVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctUShortVec_Data_get, _cisstMultiTaskPython.mtsVctUShortVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctUShortVec)> self) -> mtsVctUShortVec
        __init__(mtsGenericObjectProxy<(vctUShortVec)> self, mtsVctUShortVec other) -> mtsVctUShortVec
        __init__(mtsGenericObjectProxy<(vctUShortVec)> self, mtsGenericObjectProxy< vctUShortVec >::value_type const & data) -> mtsVctUShortVec
        """
        this = _cisstMultiTaskPython.new_mtsVctUShortVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctUShortVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctUShortVec self) -> mtsGenericObjectProxy< vctUShortVec >::value_type
        GetData(mtsVctUShortVec self) -> mtsGenericObjectProxy< vctUShortVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctUShortVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctUShortVec self) -> vctUShortVec"""
        return _cisstMultiTaskPython.mtsVctUShortVec_GetDataCopy(self)

mtsVctUShortVec_swigregister = _cisstMultiTaskPython.mtsVctUShortVec_swigregister
mtsVctUShortVec_swigregister(mtsVctUShortVec)

def mtsVctUShortVec_ClassServices():
  """mtsVctUShortVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctUShortVec_ClassServices()

class mtsVctLongVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctLongVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLongVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLongVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLongVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLongVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLongVecBase self) -> mtsGenericObjectProxyBase< vctLongVec >::value_type
        GetData(mtsVctLongVecBase self) -> mtsGenericObjectProxyBase< vctLongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLongVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctLongVecBase self, mtsVctLongVecBase other)"""
        return _cisstMultiTaskPython.mtsVctLongVecBase_Assign(self, *args)

mtsVctLongVecBase_swigregister = _cisstMultiTaskPython.mtsVctLongVecBase_swigregister
mtsVctLongVecBase_swigregister(mtsVctLongVecBase)

def mtsVctLongVecBase_ClassServices():
  """mtsVctLongVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLongVecBase_ClassServices()

class mtsVctLongVec(mtsVctLongVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctLongVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctLongVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctLongVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctLongVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctLongVec_Data_get, _cisstMultiTaskPython.mtsVctLongVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctLongVec)> self) -> mtsVctLongVec
        __init__(mtsGenericObjectProxy<(vctLongVec)> self, mtsVctLongVec other) -> mtsVctLongVec
        __init__(mtsGenericObjectProxy<(vctLongVec)> self, mtsGenericObjectProxy< vctLongVec >::value_type const & data) -> mtsVctLongVec
        """
        this = _cisstMultiTaskPython.new_mtsVctLongVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctLongVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctLongVec self) -> mtsGenericObjectProxy< vctLongVec >::value_type
        GetData(mtsVctLongVec self) -> mtsGenericObjectProxy< vctLongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctLongVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctLongVec self) -> vctLongVec"""
        return _cisstMultiTaskPython.mtsVctLongVec_GetDataCopy(self)

mtsVctLongVec_swigregister = _cisstMultiTaskPython.mtsVctLongVec_swigregister
mtsVctLongVec_swigregister(mtsVctLongVec)

def mtsVctLongVec_ClassServices():
  """mtsVctLongVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctLongVec_ClassServices()

class mtsVctULongVecBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctULongVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULongVecBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULongVecBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULongVecBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULongVecBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULongVecBase self) -> mtsGenericObjectProxyBase< vctULongVec >::value_type
        GetData(mtsVctULongVecBase self) -> mtsGenericObjectProxyBase< vctULongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULongVecBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctULongVecBase self, mtsVctULongVecBase other)"""
        return _cisstMultiTaskPython.mtsVctULongVecBase_Assign(self, *args)

mtsVctULongVecBase_swigregister = _cisstMultiTaskPython.mtsVctULongVecBase_swigregister
mtsVctULongVecBase_swigregister(mtsVctULongVecBase)

def mtsVctULongVecBase_ClassServices():
  """mtsVctULongVecBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULongVecBase_ClassServices()

class mtsVctULongVec(mtsVctULongVecBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctULongVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctULongVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctULongVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctULongVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctULongVec_Data_get, _cisstMultiTaskPython.mtsVctULongVec_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctULongVec)> self) -> mtsVctULongVec
        __init__(mtsGenericObjectProxy<(vctULongVec)> self, mtsVctULongVec other) -> mtsVctULongVec
        __init__(mtsGenericObjectProxy<(vctULongVec)> self, mtsGenericObjectProxy< vctULongVec >::value_type const & data) -> mtsVctULongVec
        """
        this = _cisstMultiTaskPython.new_mtsVctULongVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctULongVec
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctULongVec self) -> mtsGenericObjectProxy< vctULongVec >::value_type
        GetData(mtsVctULongVec self) -> mtsGenericObjectProxy< vctULongVec >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctULongVec_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctULongVec self) -> vctULongVec"""
        return _cisstMultiTaskPython.mtsVctULongVec_GetDataCopy(self)

mtsVctULongVec_swigregister = _cisstMultiTaskPython.mtsVctULongVec_swigregister
mtsVctULongVec_swigregister(mtsVctULongVec)

def mtsVctULongVec_ClassServices():
  """mtsVctULongVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctULongVec_ClassServices()

class mtsVctDoubleMatBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctDoubleMat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleMatBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleMatBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleMatBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleMatBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctDoubleMatBase self) -> mtsGenericObjectProxyBase< vctDoubleMat >::value_type
        GetData(mtsVctDoubleMatBase self) -> mtsGenericObjectProxyBase< vctDoubleMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleMatBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctDoubleMatBase self, mtsVctDoubleMatBase other)"""
        return _cisstMultiTaskPython.mtsVctDoubleMatBase_Assign(self, *args)

mtsVctDoubleMatBase_swigregister = _cisstMultiTaskPython.mtsVctDoubleMatBase_swigregister
mtsVctDoubleMatBase_swigregister(mtsVctDoubleMatBase)

def mtsVctDoubleMatBase_ClassServices():
  """mtsVctDoubleMatBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctDoubleMatBase_ClassServices()

class mtsVctDoubleMat(mtsVctDoubleMatBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctDoubleMat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctDoubleMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctDoubleMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctDoubleMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctDoubleMat_Data_get, _cisstMultiTaskPython.mtsVctDoubleMat_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctDoubleMat)> self) -> mtsVctDoubleMat
        __init__(mtsGenericObjectProxy<(vctDoubleMat)> self, mtsVctDoubleMat other) -> mtsVctDoubleMat
        __init__(mtsGenericObjectProxy<(vctDoubleMat)> self, mtsGenericObjectProxy< vctDoubleMat >::value_type const & data) -> mtsVctDoubleMat
        """
        this = _cisstMultiTaskPython.new_mtsVctDoubleMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctDoubleMat
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctDoubleMat self) -> mtsGenericObjectProxy< vctDoubleMat >::value_type
        GetData(mtsVctDoubleMat self) -> mtsGenericObjectProxy< vctDoubleMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctDoubleMat_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctDoubleMat self) -> vctDoubleMat"""
        return _cisstMultiTaskPython.mtsVctDoubleMat_GetDataCopy(self)

mtsVctDoubleMat_swigregister = _cisstMultiTaskPython.mtsVctDoubleMat_swigregister
mtsVctDoubleMat_swigregister(mtsVctDoubleMat)

def mtsVctDoubleMat_ClassServices():
  """mtsVctDoubleMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctDoubleMat_ClassServices()

class mtsVctFloatMatBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctFloatMat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatMatBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatMatBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatMatBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatMatBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloatMatBase self) -> mtsGenericObjectProxyBase< vctFloatMat >::value_type
        GetData(mtsVctFloatMatBase self) -> mtsGenericObjectProxyBase< vctFloatMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatMatBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctFloatMatBase self, mtsVctFloatMatBase other)"""
        return _cisstMultiTaskPython.mtsVctFloatMatBase_Assign(self, *args)

mtsVctFloatMatBase_swigregister = _cisstMultiTaskPython.mtsVctFloatMatBase_swigregister
mtsVctFloatMatBase_swigregister(mtsVctFloatMatBase)

def mtsVctFloatMatBase_ClassServices():
  """mtsVctFloatMatBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloatMatBase_ClassServices()

class mtsVctFloatMat(mtsVctFloatMatBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctFloatMat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctFloatMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctFloatMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctFloatMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctFloatMat_Data_get, _cisstMultiTaskPython.mtsVctFloatMat_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctFloatMat)> self) -> mtsVctFloatMat
        __init__(mtsGenericObjectProxy<(vctFloatMat)> self, mtsVctFloatMat other) -> mtsVctFloatMat
        __init__(mtsGenericObjectProxy<(vctFloatMat)> self, mtsGenericObjectProxy< vctFloatMat >::value_type const & data) -> mtsVctFloatMat
        """
        this = _cisstMultiTaskPython.new_mtsVctFloatMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctFloatMat
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctFloatMat self) -> mtsGenericObjectProxy< vctFloatMat >::value_type
        GetData(mtsVctFloatMat self) -> mtsGenericObjectProxy< vctFloatMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctFloatMat_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctFloatMat self) -> vctFloatMat"""
        return _cisstMultiTaskPython.mtsVctFloatMat_GetDataCopy(self)

mtsVctFloatMat_swigregister = _cisstMultiTaskPython.mtsVctFloatMat_swigregister
mtsVctFloatMat_swigregister(mtsVctFloatMat)

def mtsVctFloatMat_ClassServices():
  """mtsVctFloatMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctFloatMat_ClassServices()

class mtsVctIntMatBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(vctIntMat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntMatBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctIntMatBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntMatBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntMatBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctIntMatBase self) -> mtsGenericObjectProxyBase< vctIntMat >::value_type
        GetData(mtsVctIntMatBase self) -> mtsGenericObjectProxyBase< vctIntMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntMatBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsVctIntMatBase self, mtsVctIntMatBase other)"""
        return _cisstMultiTaskPython.mtsVctIntMatBase_Assign(self, *args)

mtsVctIntMatBase_swigregister = _cisstMultiTaskPython.mtsVctIntMatBase_swigregister
mtsVctIntMatBase_swigregister(mtsVctIntMatBase)

def mtsVctIntMatBase_ClassServices():
  """mtsVctIntMatBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctIntMatBase_ClassServices()

class mtsVctIntMat(mtsVctIntMatBase):
    """Proxy of C++ mtsGenericObjectProxy<(vctIntMat)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsVctIntMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsVctIntMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsVctIntMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsVctIntMat_Data_get, _cisstMultiTaskPython.mtsVctIntMat_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(vctIntMat)> self) -> mtsVctIntMat
        __init__(mtsGenericObjectProxy<(vctIntMat)> self, mtsVctIntMat other) -> mtsVctIntMat
        __init__(mtsGenericObjectProxy<(vctIntMat)> self, mtsGenericObjectProxy< vctIntMat >::value_type const & data) -> mtsVctIntMat
        """
        this = _cisstMultiTaskPython.new_mtsVctIntMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsVctIntMat
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsVctIntMat self) -> mtsGenericObjectProxy< vctIntMat >::value_type
        GetData(mtsVctIntMat self) -> mtsGenericObjectProxy< vctIntMat >::value_type const &
        """
        return _cisstMultiTaskPython.mtsVctIntMat_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsVctIntMat self) -> vctIntMat"""
        return _cisstMultiTaskPython.mtsVctIntMat_GetDataCopy(self)

mtsVctIntMat_swigregister = _cisstMultiTaskPython.mtsVctIntMat_swigregister
mtsVctIntMat_swigregister(mtsVctIntMat)

def mtsVctIntMat_ClassServices():
  """mtsVctIntMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsVctIntMat_ClassServices()

class mtsDescriptionComponent(object):
    """Proxy of C++ mtsDescriptionComponent class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponent
    __del__ = lambda self : None;
    ProcessName = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponent_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionComponent_ProcessName_set)
    ComponentName = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponent_ComponentName_get, _cisstMultiTaskPython.mtsDescriptionComponent_ComponentName_set)
    ClassName = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponent_ClassName_get, _cisstMultiTaskPython.mtsDescriptionComponent_ClassName_set)
    ConstructorArgSerialized = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponent_ConstructorArgSerialized_get, _cisstMultiTaskPython.mtsDescriptionComponent_ConstructorArgSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsDescriptionComponent self) -> mtsDescriptionComponent
        __init__(mtsDescriptionComponent self, mtsDescriptionComponent other) -> mtsDescriptionComponent
        __init__(mtsDescriptionComponent self, std::string const & processName, std::string const & componentName) -> mtsDescriptionComponent
        __init__(mtsDescriptionComponent self, std::string const & newProcessName, std::string const & newComponentName, std::string const & newClassName, 
            std::string const & newConstructorArgSerialized) -> mtsDescriptionComponent
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionComponent(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsDescriptionComponent self, mtsDescriptionComponent source)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsDescriptionComponent self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsDescriptionComponent self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsDescriptionComponent self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsDescriptionComponent self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsDescriptionComponent self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsDescriptionComponent self, char const delimiter=',') -> std::string
        SerializeDescription(mtsDescriptionComponent self) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsDescriptionComponent self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsDescriptionComponent self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponent_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsDescriptionComponent self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponent___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsDescriptionComponent self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsDescriptionComponent self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsDescriptionComponent self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsDescriptionComponent self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsDescriptionComponent self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionComponent_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsDescriptionComponent self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsDescriptionComponent self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponent_DeSerializeTextJSON(self, *args)

mtsDescriptionComponent_swigregister = _cisstMultiTaskPython.mtsDescriptionComponent_swigregister
mtsDescriptionComponent_swigregister(mtsDescriptionComponent)

class mtsDescriptionComponentClass(object):
    """Proxy of C++ mtsDescriptionComponentClass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClass
    __del__ = lambda self : None;
    ClassName = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponentClass_ClassName_get, _cisstMultiTaskPython.mtsDescriptionComponentClass_ClassName_set)
    ArgType = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponentClass_ArgType_get, _cisstMultiTaskPython.mtsDescriptionComponentClass_ArgType_set)
    ArgTypeId = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponentClass_ArgTypeId_get, _cisstMultiTaskPython.mtsDescriptionComponentClass_ArgTypeId_set)
    def __init__(self, *args): 
        """
        __init__(mtsDescriptionComponentClass self) -> mtsDescriptionComponentClass
        __init__(mtsDescriptionComponentClass self, mtsDescriptionComponentClass other) -> mtsDescriptionComponentClass
        __init__(mtsDescriptionComponentClass self, std::string const & newClassName, std::string const & newArgType, std::string const & newArgTypeId) -> mtsDescriptionComponentClass
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionComponentClass(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsDescriptionComponentClass self, mtsDescriptionComponentClass source)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsDescriptionComponentClass self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsDescriptionComponentClass self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsDescriptionComponentClass self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsDescriptionComponentClass self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsDescriptionComponentClass self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsDescriptionComponentClass self, char const delimiter=',') -> std::string
        SerializeDescription(mtsDescriptionComponentClass self) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsDescriptionComponentClass self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsDescriptionComponentClass self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsDescriptionComponentClass self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsDescriptionComponentClass self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsDescriptionComponentClass self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsDescriptionComponentClass self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsDescriptionComponentClass self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsDescriptionComponentClass self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsDescriptionComponentClass self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsDescriptionComponentClass self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClass_DeSerializeTextJSON(self, *args)

mtsDescriptionComponentClass_swigregister = _cisstMultiTaskPython.mtsDescriptionComponentClass_swigregister
mtsDescriptionComponentClass_swigregister(mtsDescriptionComponentClass)

class mtsDescriptionInterface(object):
    """Proxy of C++ mtsDescriptionInterface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionInterface
    __del__ = lambda self : None;
    ProcessName = _swig_property(_cisstMultiTaskPython.mtsDescriptionInterface_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionInterface_ProcessName_set)
    ComponentName = _swig_property(_cisstMultiTaskPython.mtsDescriptionInterface_ComponentName_get, _cisstMultiTaskPython.mtsDescriptionInterface_ComponentName_set)
    InterfaceRequiredNames = _swig_property(_cisstMultiTaskPython.mtsDescriptionInterface_InterfaceRequiredNames_get, _cisstMultiTaskPython.mtsDescriptionInterface_InterfaceRequiredNames_set)
    InterfaceProvidedNames = _swig_property(_cisstMultiTaskPython.mtsDescriptionInterface_InterfaceProvidedNames_get, _cisstMultiTaskPython.mtsDescriptionInterface_InterfaceProvidedNames_set)
    def __init__(self, *args): 
        """
        __init__(mtsDescriptionInterface self) -> mtsDescriptionInterface
        __init__(mtsDescriptionInterface self, mtsDescriptionInterface other) -> mtsDescriptionInterface
        __init__(mtsDescriptionInterface self, std::string const & newProcessName, std::string const & newComponentName, mtsStringVector newInterfaceRequiredNames, 
            mtsStringVector newInterfaceProvidedNames) -> mtsDescriptionInterface
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsDescriptionInterface self, mtsDescriptionInterface source)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsDescriptionInterface self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsDescriptionInterface self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsDescriptionInterface self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsDescriptionInterface self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsDescriptionInterface self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsDescriptionInterface self, char const delimiter=',') -> std::string
        SerializeDescription(mtsDescriptionInterface self) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsDescriptionInterface self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsDescriptionInterface self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionInterface_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsDescriptionInterface self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionInterface___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsDescriptionInterface self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsDescriptionInterface self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsDescriptionInterface self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsDescriptionInterface self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsDescriptionInterface self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionInterface_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsDescriptionInterface self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsDescriptionInterface self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionInterface_DeSerializeTextJSON(self, *args)

mtsDescriptionInterface_swigregister = _cisstMultiTaskPython.mtsDescriptionInterface_swigregister
mtsDescriptionInterface_swigregister(mtsDescriptionInterface)

class mtsDescriptionIntefaceFullName(object):
    """Proxy of C++ mtsDescriptionIntefaceFullName class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionIntefaceFullName
    __del__ = lambda self : None;
    ProcessName = _swig_property(_cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ProcessName_set)
    ComponentName = _swig_property(_cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ComponentName_get, _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ComponentName_set)
    InterfaceName = _swig_property(_cisstMultiTaskPython.mtsDescriptionIntefaceFullName_InterfaceName_get, _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_InterfaceName_set)
    def __init__(self, *args): 
        """
        __init__(mtsDescriptionIntefaceFullName self) -> mtsDescriptionIntefaceFullName
        __init__(mtsDescriptionIntefaceFullName self, mtsDescriptionIntefaceFullName other) -> mtsDescriptionIntefaceFullName
        __init__(mtsDescriptionIntefaceFullName self, std::string const & newProcessName, std::string const & newComponentName, std::string const & newInterfaceName) -> mtsDescriptionIntefaceFullName
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionIntefaceFullName(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsDescriptionIntefaceFullName self, mtsDescriptionIntefaceFullName source)"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsDescriptionIntefaceFullName self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsDescriptionIntefaceFullName self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsDescriptionIntefaceFullName self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsDescriptionIntefaceFullName self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsDescriptionIntefaceFullName self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsDescriptionIntefaceFullName self, char const delimiter=',') -> std::string
        SerializeDescription(mtsDescriptionIntefaceFullName self) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsDescriptionIntefaceFullName self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsDescriptionIntefaceFullName self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsDescriptionIntefaceFullName self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsDescriptionIntefaceFullName self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsDescriptionIntefaceFullName self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsDescriptionIntefaceFullName self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsDescriptionIntefaceFullName self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsDescriptionIntefaceFullName self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsDescriptionIntefaceFullName self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsDescriptionIntefaceFullName self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_DeSerializeTextJSON(self, *args)

mtsDescriptionIntefaceFullName_swigregister = _cisstMultiTaskPython.mtsDescriptionIntefaceFullName_swigregister
mtsDescriptionIntefaceFullName_swigregister(mtsDescriptionIntefaceFullName)

class mtsDescriptionConnection(object):
    """Proxy of C++ mtsDescriptionConnection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnection
    __del__ = lambda self : None;
    Client = _swig_property(_cisstMultiTaskPython.mtsDescriptionConnection_Client_get, _cisstMultiTaskPython.mtsDescriptionConnection_Client_set)
    Server = _swig_property(_cisstMultiTaskPython.mtsDescriptionConnection_Server_get, _cisstMultiTaskPython.mtsDescriptionConnection_Server_set)
    ConnectionID = _swig_property(_cisstMultiTaskPython.mtsDescriptionConnection_ConnectionID_get, _cisstMultiTaskPython.mtsDescriptionConnection_ConnectionID_set)
    def Init(self):
        """Init(mtsDescriptionConnection self)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_Init(self)

    def __init__(self, *args): 
        """
        __init__(mtsDescriptionConnection self) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, mtsDescriptionConnection other) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName, 
            ConnectionIDType const connectionId=InvalidConnectionID) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, std::string const & clientProcessName, std::string const & clientComponentName, std::string const & clientInterfaceRequiredName, 
            std::string const & serverProcessName, 
            std::string const & serverComponentName, std::string const & serverInterfaceProvidedName) -> mtsDescriptionConnection
        __init__(mtsDescriptionConnection self, mtsDescriptionIntefaceFullName newClient, mtsDescriptionIntefaceFullName newServer, 
            ConnectionIDType const & newConnectionID) -> mtsDescriptionConnection
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsDescriptionConnection self, mtsDescriptionConnection source)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsDescriptionConnection self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsDescriptionConnection self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsDescriptionConnection self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsDescriptionConnection self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsDescriptionConnection self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsDescriptionConnection self, char const delimiter=',') -> std::string
        SerializeDescription(mtsDescriptionConnection self) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsDescriptionConnection self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsDescriptionConnection self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnection_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsDescriptionConnection self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionConnection___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsDescriptionConnection self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsDescriptionConnection self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsDescriptionConnection self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsDescriptionConnection self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsDescriptionConnection self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionConnection_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsDescriptionConnection self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsDescriptionConnection self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionConnection_DeSerializeTextJSON(self, *args)

mtsDescriptionConnection_swigregister = _cisstMultiTaskPython.mtsDescriptionConnection_swigregister
mtsDescriptionConnection_swigregister(mtsDescriptionConnection)

class mtsComponentStatusControl(object):
    """Proxy of C++ mtsComponentStatusControl class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStatusControl
    __del__ = lambda self : None;
    COMPONENT_START = _cisstMultiTaskPython.mtsComponentStatusControl_COMPONENT_START
    COMPONENT_STOP = _cisstMultiTaskPython.mtsComponentStatusControl_COMPONENT_STOP
    COMPONENT_RESUME = _cisstMultiTaskPython.mtsComponentStatusControl_COMPONENT_RESUME
    def ComponentStatusCommandToString(*args):
        """ComponentStatusCommandToString(mtsComponentStatusControl::ComponentStatusCommand const & value) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandToString(*args)

    ComponentStatusCommandToString = staticmethod(ComponentStatusCommandToString)
    def ComponentStatusCommandFromString(*args):
        """ComponentStatusCommandFromString(std::string const & value) -> mtsComponentStatusControl::ComponentStatusCommand"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandFromString(*args)

    ComponentStatusCommandFromString = staticmethod(ComponentStatusCommandFromString)
    def ComponentStatusCommandVectorInt():
        """ComponentStatusCommandVectorInt() -> std::vector< int,std::allocator< int > > const &"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorInt()

    ComponentStatusCommandVectorInt = staticmethod(ComponentStatusCommandVectorInt)
    def ComponentStatusCommandVectorString():
        """ComponentStatusCommandVectorString() -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorString()

    ComponentStatusCommandVectorString = staticmethod(ComponentStatusCommandVectorString)
    ProcessName = _swig_property(_cisstMultiTaskPython.mtsComponentStatusControl_ProcessName_get, _cisstMultiTaskPython.mtsComponentStatusControl_ProcessName_set)
    ComponentName = _swig_property(_cisstMultiTaskPython.mtsComponentStatusControl_ComponentName_get, _cisstMultiTaskPython.mtsComponentStatusControl_ComponentName_set)
    DelayInSecond = _swig_property(_cisstMultiTaskPython.mtsComponentStatusControl_DelayInSecond_get, _cisstMultiTaskPython.mtsComponentStatusControl_DelayInSecond_set)
    Command = _swig_property(_cisstMultiTaskPython.mtsComponentStatusControl_Command_get, _cisstMultiTaskPython.mtsComponentStatusControl_Command_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentStatusControl self) -> mtsComponentStatusControl
        __init__(mtsComponentStatusControl self, mtsComponentStatusControl other) -> mtsComponentStatusControl
        __init__(mtsComponentStatusControl self, std::string const & newProcessName, std::string const & newComponentName, double const & newDelayInSecond, 
            mtsComponentStatusControl::ComponentStatusCommand const & newCommand) -> mtsComponentStatusControl
        """
        this = _cisstMultiTaskPython.new_mtsComponentStatusControl(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsComponentStatusControl self, mtsComponentStatusControl source)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsComponentStatusControl self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsComponentStatusControl self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsComponentStatusControl self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsComponentStatusControl self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsComponentStatusControl self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsComponentStatusControl self, char const delimiter=',') -> std::string
        SerializeDescription(mtsComponentStatusControl self) -> std::string
        """
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsComponentStatusControl self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsComponentStatusControl self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsComponentStatusControl_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsComponentStatusControl self) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStatusControl___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsComponentStatusControl self) -> bool"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsComponentStatusControl self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsComponentStatusControl self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsComponentStatusControl self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsComponentStatusControl self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsComponentStatusControl_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsComponentStatusControl self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsComponentStatusControl self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStatusControl_DeSerializeTextJSON(self, *args)

mtsComponentStatusControl_swigregister = _cisstMultiTaskPython.mtsComponentStatusControl_swigregister
mtsComponentStatusControl_swigregister(mtsComponentStatusControl)

def mtsComponentStatusControl_ComponentStatusCommandToString(*args):
  """mtsComponentStatusControl_ComponentStatusCommandToString(mtsComponentStatusControl::ComponentStatusCommand const & value) -> std::string"""
  return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandToString(*args)

def mtsComponentStatusControl_ComponentStatusCommandFromString(*args):
  """mtsComponentStatusControl_ComponentStatusCommandFromString(std::string const & value) -> mtsComponentStatusControl::ComponentStatusCommand"""
  return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandFromString(*args)

def mtsComponentStatusControl_ComponentStatusCommandVectorInt():
  """mtsComponentStatusControl_ComponentStatusCommandVectorInt() -> std::vector< int,std::allocator< int > > const &"""
  return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorInt()

def mtsComponentStatusControl_ComponentStatusCommandVectorString():
  """mtsComponentStatusControl_ComponentStatusCommandVectorString() -> mtsStringVector"""
  return _cisstMultiTaskPython.mtsComponentStatusControl_ComponentStatusCommandVectorString()


def cmnDataHumanReadable_mtsComponentStatusControl_ComponentStatusCommand(*args):
  """cmnDataHumanReadable_mtsComponentStatusControl_ComponentStatusCommand(mtsComponentStatusControl::ComponentStatusCommand const & data) -> std::string"""
  return _cisstMultiTaskPython.cmnDataHumanReadable_mtsComponentStatusControl_ComponentStatusCommand(*args)
class mtsComponentStateChange(object):
    """Proxy of C++ mtsComponentStateChange class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStateChange
    __del__ = lambda self : None;
    ProcessName = _swig_property(_cisstMultiTaskPython.mtsComponentStateChange_ProcessName_get, _cisstMultiTaskPython.mtsComponentStateChange_ProcessName_set)
    ComponentName = _swig_property(_cisstMultiTaskPython.mtsComponentStateChange_ComponentName_get, _cisstMultiTaskPython.mtsComponentStateChange_ComponentName_set)
    NewState = _swig_property(_cisstMultiTaskPython.mtsComponentStateChange_NewState_get, _cisstMultiTaskPython.mtsComponentStateChange_NewState_set)
    def __init__(self, *args): 
        """
        __init__(mtsComponentStateChange self) -> mtsComponentStateChange
        __init__(mtsComponentStateChange self, mtsComponentStateChange other) -> mtsComponentStateChange
        __init__(mtsComponentStateChange self, std::string const & newProcessName, std::string const & newComponentName, mtsComponentState newNewState) -> mtsComponentStateChange
        """
        this = _cisstMultiTaskPython.new_mtsComponentStateChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsComponentStateChange self, mtsComponentStateChange source)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsComponentStateChange self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsComponentStateChange self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsComponentStateChange self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsComponentStateChange self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsComponentStateChange self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsComponentStateChange self, char const delimiter=',') -> std::string
        SerializeDescription(mtsComponentStateChange self) -> std::string
        """
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsComponentStateChange self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsComponentStateChange self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsComponentStateChange_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsComponentStateChange self) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentStateChange___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsComponentStateChange self) -> bool"""
        return _cisstMultiTaskPython.mtsComponentStateChange_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsComponentStateChange self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponentStateChange_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsComponentStateChange self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsComponentStateChange_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsComponentStateChange self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsComponentStateChange self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsComponentStateChange_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsComponentStateChange self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsComponentStateChange self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentStateChange_DeSerializeTextJSON(self, *args)

mtsComponentStateChange_swigregister = _cisstMultiTaskPython.mtsComponentStateChange_swigregister
mtsComponentStateChange_swigregister(mtsComponentStateChange)

class mtsDescriptionLoadLibrary(object):
    """Proxy of C++ mtsDescriptionLoadLibrary class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionLoadLibrary
    __del__ = lambda self : None;
    ProcessName = _swig_property(_cisstMultiTaskPython.mtsDescriptionLoadLibrary_ProcessName_get, _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ProcessName_set)
    LibraryName = _swig_property(_cisstMultiTaskPython.mtsDescriptionLoadLibrary_LibraryName_get, _cisstMultiTaskPython.mtsDescriptionLoadLibrary_LibraryName_set)
    def __init__(self, *args): 
        """
        __init__(mtsDescriptionLoadLibrary self) -> mtsDescriptionLoadLibrary
        __init__(mtsDescriptionLoadLibrary self, mtsDescriptionLoadLibrary other) -> mtsDescriptionLoadLibrary
        __init__(mtsDescriptionLoadLibrary self, std::string const & newProcessName, std::string const & newLibraryName) -> mtsDescriptionLoadLibrary
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionLoadLibrary(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsDescriptionLoadLibrary self, mtsDescriptionLoadLibrary source)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsDescriptionLoadLibrary self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsDescriptionLoadLibrary self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsDescriptionLoadLibrary self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsDescriptionLoadLibrary self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsDescriptionLoadLibrary self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsDescriptionLoadLibrary self, char const delimiter=',') -> std::string
        SerializeDescription(mtsDescriptionLoadLibrary self) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsDescriptionLoadLibrary self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsDescriptionLoadLibrary self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsDescriptionLoadLibrary self) -> std::string"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsDescriptionLoadLibrary self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsDescriptionLoadLibrary self) -> size_t"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsDescriptionLoadLibrary self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsDescriptionLoadLibrary self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsDescriptionLoadLibrary self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsDescriptionLoadLibrary self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsDescriptionLoadLibrary self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsDescriptionLoadLibrary_DeSerializeTextJSON(self, *args)

mtsDescriptionLoadLibrary_swigregister = _cisstMultiTaskPython.mtsDescriptionLoadLibrary_swigregister
mtsDescriptionLoadLibrary_swigregister(mtsDescriptionLoadLibrary)

class mtsEndUserInterfaceArg(object):
    """Proxy of C++ mtsEndUserInterfaceArg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEndUserInterfaceArg
    __del__ = lambda self : None;
    OriginalInterface = _swig_property(_cisstMultiTaskPython.mtsEndUserInterfaceArg_OriginalInterface_get, _cisstMultiTaskPython.mtsEndUserInterfaceArg_OriginalInterface_set)
    UserName = _swig_property(_cisstMultiTaskPython.mtsEndUserInterfaceArg_UserName_get, _cisstMultiTaskPython.mtsEndUserInterfaceArg_UserName_set)
    EndUserInterface = _swig_property(_cisstMultiTaskPython.mtsEndUserInterfaceArg_EndUserInterface_get, _cisstMultiTaskPython.mtsEndUserInterfaceArg_EndUserInterface_set)
    def __init__(self, *args): 
        """
        __init__(mtsEndUserInterfaceArg self) -> mtsEndUserInterfaceArg
        __init__(mtsEndUserInterfaceArg self, mtsEndUserInterfaceArg other) -> mtsEndUserInterfaceArg
        __init__(mtsEndUserInterfaceArg self, size_t const & newOriginalInterface, std::string const & newUserName, size_t const & newEndUserInterface) -> mtsEndUserInterfaceArg
        """
        this = _cisstMultiTaskPython.new_mtsEndUserInterfaceArg(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsEndUserInterfaceArg self, mtsEndUserInterfaceArg source)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsEndUserInterfaceArg self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsEndUserInterfaceArg self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsEndUserInterfaceArg self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsEndUserInterfaceArg self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsEndUserInterfaceArg self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsEndUserInterfaceArg self, char const delimiter=',') -> std::string
        SerializeDescription(mtsEndUserInterfaceArg self) -> std::string
        """
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsEndUserInterfaceArg self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsEndUserInterfaceArg self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsEndUserInterfaceArg self) -> std::string"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsEndUserInterfaceArg self) -> bool"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsEndUserInterfaceArg self) -> size_t"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsEndUserInterfaceArg self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsEndUserInterfaceArg self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsEndUserInterfaceArg self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsEndUserInterfaceArg self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsEndUserInterfaceArg self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsEndUserInterfaceArg_DeSerializeTextJSON(self, *args)

mtsEndUserInterfaceArg_swigregister = _cisstMultiTaskPython.mtsEndUserInterfaceArg_swigregister
mtsEndUserInterfaceArg_swigregister(mtsEndUserInterfaceArg)

class mtsDescriptionConnectionVec(object):
    """Proxy of C++ std::vector<(mtsDescriptionConnection)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsDescriptionConnectionVec self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsDescriptionConnectionVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsDescriptionConnectionVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___bool__(self)

    def __len__(self):
        """__len__(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___len__(self)

    def pop(self):
        """pop(mtsDescriptionConnectionVec self) -> mtsDescriptionConnection"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j) -> mtsDescriptionConnectionVec"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j, 
            mtsDescriptionConnectionVec v=std::vector< mtsDescriptionConnection,std::allocator< mtsDescriptionConnection > >())
        __setslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, std::vector< mtsDescriptionConnection >::difference_type j)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i)
        __delitem__(mtsDescriptionConnectionVec self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsDescriptionConnectionVec self, PySliceObject * slice) -> mtsDescriptionConnectionVec
        __getitem__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i) -> mtsDescriptionConnection
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsDescriptionConnectionVec self, PySliceObject * slice, mtsDescriptionConnectionVec v)
        __setitem__(mtsDescriptionConnectionVec self, PySliceObject * slice)
        __setitem__(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::difference_type i, mtsDescriptionConnection x)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec___setitem__(self, *args)

    def append(self, *args):
        """append(mtsDescriptionConnectionVec self, mtsDescriptionConnection x)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_append(self, *args)

    def empty(self):
        """empty(mtsDescriptionConnectionVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_empty(self)

    def size(self):
        """size(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_size(self)

    def clear(self):
        """clear(mtsDescriptionConnectionVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_clear(self)

    def swap(self, *args):
        """swap(mtsDescriptionConnectionVec self, mtsDescriptionConnectionVec v)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::allocator_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_get_allocator(self)

    def begin(self):
        """begin(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_begin(self)

    def end(self):
        """end(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_end(self)

    def rbegin(self):
        """rbegin(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_rbegin(self)

    def rend(self):
        """rend(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_rend(self)

    def pop_back(self):
        """pop_back(mtsDescriptionConnectionVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator pos) -> std::vector< mtsDescriptionConnection >::iterator
        erase(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator first, std::vector< mtsDescriptionConnection >::iterator last) -> std::vector< mtsDescriptionConnection >::iterator
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsDescriptionConnection)> self) -> mtsDescriptionConnectionVec
        __init__(std::vector<(mtsDescriptionConnection)> self, mtsDescriptionConnectionVec arg2) -> mtsDescriptionConnectionVec
        __init__(std::vector<(mtsDescriptionConnection)> self, std::vector< mtsDescriptionConnection >::size_type size) -> mtsDescriptionConnectionVec
        __init__(std::vector<(mtsDescriptionConnection)> self, std::vector< mtsDescriptionConnection >::size_type size, mtsDescriptionConnection value) -> mtsDescriptionConnectionVec
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionConnectionVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsDescriptionConnectionVec self, mtsDescriptionConnection x)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_push_back(self, *args)

    def front(self):
        """front(mtsDescriptionConnectionVec self) -> mtsDescriptionConnection"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_front(self)

    def back(self):
        """back(mtsDescriptionConnectionVec self) -> mtsDescriptionConnection"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_back(self)

    def assign(self, *args):
        """assign(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type n, mtsDescriptionConnection x)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type new_size)
        resize(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type new_size, mtsDescriptionConnection x)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator pos, mtsDescriptionConnection x) -> std::vector< mtsDescriptionConnection >::iterator
        insert(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::iterator pos, std::vector< mtsDescriptionConnection >::size_type n, 
            mtsDescriptionConnection x)
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsDescriptionConnectionVec self, std::vector< mtsDescriptionConnection >::size_type n)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_reserve(self, *args)

    def capacity(self):
        """capacity(mtsDescriptionConnectionVec self) -> std::vector< mtsDescriptionConnection >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVec_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnectionVec
    __del__ = lambda self : None;
mtsDescriptionConnectionVec_swigregister = _cisstMultiTaskPython.mtsDescriptionConnectionVec_swigregister
mtsDescriptionConnectionVec_swigregister(mtsDescriptionConnectionVec)

class mtsDescriptionConnectionVecProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(mtsDescriptionConnectionVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnectionVecProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsDescriptionConnectionVecProxyBase self) -> mtsDescriptionConnectionVec
        GetData(mtsDescriptionConnectionVecProxyBase self) -> mtsDescriptionConnectionVec
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsDescriptionConnectionVecProxyBase self, mtsDescriptionConnectionVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_Assign(self, *args)

mtsDescriptionConnectionVecProxyBase_swigregister = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_swigregister
mtsDescriptionConnectionVecProxyBase_swigregister(mtsDescriptionConnectionVecProxyBase)

def mtsDescriptionConnectionVecProxyBase_ClassServices():
  """mtsDescriptionConnectionVecProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxyBase_ClassServices()

class mtsDescriptionConnectionVecProxy(mtsDescriptionConnectionVecProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(mtsDescriptionConnectionVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_Data_get, _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(mtsDescriptionConnectionVec)> self) -> mtsDescriptionConnectionVecProxy
        __init__(mtsGenericObjectProxy<(mtsDescriptionConnectionVec)> self, mtsDescriptionConnectionVecProxy other) -> mtsDescriptionConnectionVecProxy
        __init__(mtsGenericObjectProxy<(mtsDescriptionConnectionVec)> self, mtsDescriptionConnectionVec data) -> mtsDescriptionConnectionVecProxy
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionConnectionVecProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionConnectionVecProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVec
        GetData(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVec
        """
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsDescriptionConnectionVecProxy self) -> mtsDescriptionConnectionVec"""
        return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_GetDataCopy(self)

mtsDescriptionConnectionVecProxy_swigregister = _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_swigregister
mtsDescriptionConnectionVecProxy_swigregister(mtsDescriptionConnectionVecProxy)

def mtsDescriptionConnectionVecProxy_ClassServices():
  """mtsDescriptionConnectionVecProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDescriptionConnectionVecProxy_ClassServices()

class mtsDescriptionComponentClassVec(object):
    """Proxy of C++ std::vector<(mtsDescriptionComponentClass)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsDescriptionComponentClassVec self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsDescriptionComponentClassVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsDescriptionComponentClassVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___bool__(self)

    def __len__(self):
        """__len__(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___len__(self)

    def pop(self):
        """pop(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClass"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j) -> mtsDescriptionComponentClassVec"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j, 
            mtsDescriptionComponentClassVec v=std::vector< mtsDescriptionComponentClass,std::allocator< mtsDescriptionComponentClass > >())
        __setslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, std::vector< mtsDescriptionComponentClass >::difference_type j)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i)
        __delitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice) -> mtsDescriptionComponentClassVec
        __getitem__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i) -> mtsDescriptionComponentClass
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice, mtsDescriptionComponentClassVec v)
        __setitem__(mtsDescriptionComponentClassVec self, PySliceObject * slice)
        __setitem__(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::difference_type i, mtsDescriptionComponentClass x)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec___setitem__(self, *args)

    def append(self, *args):
        """append(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClass x)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_append(self, *args)

    def empty(self):
        """empty(mtsDescriptionComponentClassVec self) -> bool"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_empty(self)

    def size(self):
        """size(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_size(self)

    def clear(self):
        """clear(mtsDescriptionComponentClassVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_clear(self)

    def swap(self, *args):
        """swap(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClassVec v)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::allocator_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_get_allocator(self)

    def begin(self):
        """begin(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_begin(self)

    def end(self):
        """end(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_end(self)

    def rbegin(self):
        """rbegin(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_rbegin(self)

    def rend(self):
        """rend(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_rend(self)

    def pop_back(self):
        """pop_back(mtsDescriptionComponentClassVec self)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator pos) -> std::vector< mtsDescriptionComponentClass >::iterator
        erase(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator first, std::vector< mtsDescriptionComponentClass >::iterator last) -> std::vector< mtsDescriptionComponentClass >::iterator
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsDescriptionComponentClass)> self) -> mtsDescriptionComponentClassVec
        __init__(std::vector<(mtsDescriptionComponentClass)> self, mtsDescriptionComponentClassVec arg2) -> mtsDescriptionComponentClassVec
        __init__(std::vector<(mtsDescriptionComponentClass)> self, std::vector< mtsDescriptionComponentClass >::size_type size) -> mtsDescriptionComponentClassVec
        __init__(std::vector<(mtsDescriptionComponentClass)> self, std::vector< mtsDescriptionComponentClass >::size_type size, mtsDescriptionComponentClass value) -> mtsDescriptionComponentClassVec
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionComponentClassVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsDescriptionComponentClassVec self, mtsDescriptionComponentClass x)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_push_back(self, *args)

    def front(self):
        """front(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClass"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_front(self)

    def back(self):
        """back(mtsDescriptionComponentClassVec self) -> mtsDescriptionComponentClass"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_back(self)

    def assign(self, *args):
        """assign(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type n, mtsDescriptionComponentClass x)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type new_size)
        resize(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type new_size, mtsDescriptionComponentClass x)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator pos, mtsDescriptionComponentClass x) -> std::vector< mtsDescriptionComponentClass >::iterator
        insert(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::iterator pos, std::vector< mtsDescriptionComponentClass >::size_type n, 
            mtsDescriptionComponentClass x)
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsDescriptionComponentClassVec self, std::vector< mtsDescriptionComponentClass >::size_type n)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_reserve(self, *args)

    def capacity(self):
        """capacity(mtsDescriptionComponentClassVec self) -> std::vector< mtsDescriptionComponentClass >::size_type"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVec_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClassVec
    __del__ = lambda self : None;
mtsDescriptionComponentClassVec_swigregister = _cisstMultiTaskPython.mtsDescriptionComponentClassVec_swigregister
mtsDescriptionComponentClassVec_swigregister(mtsDescriptionComponentClassVec)

class mtsDescriptionComponentClassVecProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(mtsDescriptionComponentClassVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClassVecProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsDescriptionComponentClassVecProxyBase self) -> mtsDescriptionComponentClassVec
        GetData(mtsDescriptionComponentClassVecProxyBase self) -> mtsDescriptionComponentClassVec
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsDescriptionComponentClassVecProxyBase self, mtsDescriptionComponentClassVecProxyBase other)"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_Assign(self, *args)

mtsDescriptionComponentClassVecProxyBase_swigregister = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_swigregister
mtsDescriptionComponentClassVecProxyBase_swigregister(mtsDescriptionComponentClassVecProxyBase)

def mtsDescriptionComponentClassVecProxyBase_ClassServices():
  """mtsDescriptionComponentClassVecProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxyBase_ClassServices()

class mtsDescriptionComponentClassVecProxy(mtsDescriptionComponentClassVecProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(mtsDescriptionComponentClassVec)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_Data_get, _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(mtsDescriptionComponentClassVec)> self) -> mtsDescriptionComponentClassVecProxy
        __init__(mtsGenericObjectProxy<(mtsDescriptionComponentClassVec)> self, mtsDescriptionComponentClassVecProxy other) -> mtsDescriptionComponentClassVecProxy
        __init__(mtsGenericObjectProxy<(mtsDescriptionComponentClassVec)> self, mtsDescriptionComponentClassVec data) -> mtsDescriptionComponentClassVecProxy
        """
        this = _cisstMultiTaskPython.new_mtsDescriptionComponentClassVecProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDescriptionComponentClassVecProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVec
        GetData(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVec
        """
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsDescriptionComponentClassVecProxy self) -> mtsDescriptionComponentClassVec"""
        return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_GetDataCopy(self)

mtsDescriptionComponentClassVecProxy_swigregister = _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_swigregister
mtsDescriptionComponentClassVecProxy_swigregister(mtsDescriptionComponentClassVecProxy)

def mtsDescriptionComponentClassVecProxy_ClassServices():
  """mtsDescriptionComponentClassVecProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDescriptionComponentClassVecProxy_ClassServices()

class mtsComponentState(object):
    """Proxy of C++ mtsComponentState class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentState
    __del__ = lambda self : None;
    CONSTRUCTED = _cisstMultiTaskPython.mtsComponentState_CONSTRUCTED
    INITIALIZING = _cisstMultiTaskPython.mtsComponentState_INITIALIZING
    READY = _cisstMultiTaskPython.mtsComponentState_READY
    ACTIVE = _cisstMultiTaskPython.mtsComponentState_ACTIVE
    FINISHING = _cisstMultiTaskPython.mtsComponentState_FINISHING
    FINISHED = _cisstMultiTaskPython.mtsComponentState_FINISHED
    def EnumToString(*args):
        """EnumToString(mtsComponentState::Enum const & value) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentState_EnumToString(*args)

    EnumToString = staticmethod(EnumToString)
    def EnumFromString(*args):
        """EnumFromString(std::string const & value) -> mtsComponentState::Enum"""
        return _cisstMultiTaskPython.mtsComponentState_EnumFromString(*args)

    EnumFromString = staticmethod(EnumFromString)
    def EnumVectorInt():
        """EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
        return _cisstMultiTaskPython.mtsComponentState_EnumVectorInt()

    EnumVectorInt = staticmethod(EnumVectorInt)
    def EnumVectorString():
        """EnumVectorString() -> mtsStringVector"""
        return _cisstMultiTaskPython.mtsComponentState_EnumVectorString()

    EnumVectorString = staticmethod(EnumVectorString)
    def GetState(self, *args):
        """GetState(mtsComponentState self, mtsComponentState::Enum & placeHolder)"""
        return _cisstMultiTaskPython.mtsComponentState_GetState(self, *args)

    def SetState(self, *args):
        """SetState(mtsComponentState self, mtsComponentState::Enum const & newValue)"""
        return _cisstMultiTaskPython.mtsComponentState_SetState(self, *args)

    def State(self, *args):
        """
        State(mtsComponentState self) -> mtsComponentState::Enum const
        State(mtsComponentState self) -> mtsComponentState::Enum &
        """
        return _cisstMultiTaskPython.mtsComponentState_State(self, *args)

    def __eq__(self, *args):
        """__eq__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___lt__(self, *args)

    def __le__(self, *args):
        """__le__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___le__(self, *args)

    def __gt__(self, *args):
        """__gt__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___gt__(self, *args)

    def __ge__(self, *args):
        """__ge__(mtsComponentState self, mtsComponentState state) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState___ge__(self, *args)

    def __init__(self, *args): 
        """
        __init__(mtsComponentState self) -> mtsComponentState
        __init__(mtsComponentState self, mtsComponentState other) -> mtsComponentState
        __init__(mtsComponentState self, mtsComponentState::Enum const & newState) -> mtsComponentState
        """
        this = _cisstMultiTaskPython.new_mtsComponentState(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsComponentState self, mtsComponentState source)"""
        return _cisstMultiTaskPython.mtsComponentState_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsComponentState self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsComponentState_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsComponentState self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsComponentState_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsComponentState self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsComponentState self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsComponentState_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsComponentState self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsComponentState self, char const delimiter=',') -> std::string
        SerializeDescription(mtsComponentState self) -> std::string
        """
        return _cisstMultiTaskPython.mtsComponentState_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsComponentState self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsComponentState self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsComponentState_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsComponentState self) -> std::string"""
        return _cisstMultiTaskPython.mtsComponentState___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsComponentState self) -> bool"""
        return _cisstMultiTaskPython.mtsComponentState_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsComponentState self) -> size_t"""
        return _cisstMultiTaskPython.mtsComponentState_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsComponentState self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsComponentState_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsComponentState self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsComponentState self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsComponentState_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsComponentState self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentState_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsComponentState self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsComponentState_DeSerializeTextJSON(self, *args)

mtsComponentState_swigregister = _cisstMultiTaskPython.mtsComponentState_swigregister
mtsComponentState_swigregister(mtsComponentState)

def mtsComponentState_EnumToString(*args):
  """mtsComponentState_EnumToString(mtsComponentState::Enum const & value) -> std::string"""
  return _cisstMultiTaskPython.mtsComponentState_EnumToString(*args)

def mtsComponentState_EnumFromString(*args):
  """mtsComponentState_EnumFromString(std::string const & value) -> mtsComponentState::Enum"""
  return _cisstMultiTaskPython.mtsComponentState_EnumFromString(*args)

def mtsComponentState_EnumVectorInt():
  """mtsComponentState_EnumVectorInt() -> std::vector< int,std::allocator< int > > const &"""
  return _cisstMultiTaskPython.mtsComponentState_EnumVectorInt()

def mtsComponentState_EnumVectorString():
  """mtsComponentState_EnumVectorString() -> mtsStringVector"""
  return _cisstMultiTaskPython.mtsComponentState_EnumVectorString()


def cmnDataHumanReadable_mtsComponentState_Enum(*args):
  """cmnDataHumanReadable_mtsComponentState_Enum(mtsComponentState::Enum const & data) -> std::string"""
  return _cisstMultiTaskPython.cmnDataHumanReadable_mtsComponentState_Enum(*args)
class mtsComponentStateProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(mtsComponentState)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentStateProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentStateProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentStateProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStateProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsComponentStateProxyBase self) -> mtsComponentState
        GetData(mtsComponentStateProxyBase self) -> mtsComponentState
        """
        return _cisstMultiTaskPython.mtsComponentStateProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsComponentStateProxyBase self, mtsComponentStateProxyBase other)"""
        return _cisstMultiTaskPython.mtsComponentStateProxyBase_Assign(self, *args)

mtsComponentStateProxyBase_swigregister = _cisstMultiTaskPython.mtsComponentStateProxyBase_swigregister
mtsComponentStateProxyBase_swigregister(mtsComponentStateProxyBase)

def mtsComponentStateProxyBase_ClassServices():
  """mtsComponentStateProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentStateProxyBase_ClassServices()

class mtsComponentStateProxy(mtsComponentStateProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(mtsComponentState)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsComponentStateProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsComponentStateProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsComponentStateProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsComponentStateProxy_Data_get, _cisstMultiTaskPython.mtsComponentStateProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(mtsComponentState)> self) -> mtsComponentStateProxy
        __init__(mtsGenericObjectProxy<(mtsComponentState)> self, mtsComponentStateProxy other) -> mtsComponentStateProxy
        __init__(mtsGenericObjectProxy<(mtsComponentState)> self, mtsComponentState data) -> mtsComponentStateProxy
        """
        this = _cisstMultiTaskPython.new_mtsComponentStateProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsComponentStateProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsComponentStateProxy self) -> mtsComponentState
        GetData(mtsComponentStateProxy self) -> mtsComponentState
        """
        return _cisstMultiTaskPython.mtsComponentStateProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsComponentStateProxy self) -> mtsComponentState"""
        return _cisstMultiTaskPython.mtsComponentStateProxy_GetDataCopy(self)

mtsComponentStateProxy_swigregister = _cisstMultiTaskPython.mtsComponentStateProxy_swigregister
mtsComponentStateProxy_swigregister(mtsComponentStateProxy)

def mtsComponentStateProxy_ClassServices():
  """mtsComponentStateProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsComponentStateProxy_ClassServices()

class mtsCommandVoidDescription(object):
    """Proxy of C++ mtsCommandVoidDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoidDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsCommandVoidDescription_Name_get, _cisstMultiTaskPython.mtsCommandVoidDescription_Name_set)
    def __init__(self, *args): 
        """
        __init__(mtsCommandVoidDescription self) -> mtsCommandVoidDescription
        __init__(mtsCommandVoidDescription self, mtsCommandVoidDescription other) -> mtsCommandVoidDescription
        __init__(mtsCommandVoidDescription self, std::string const & newName) -> mtsCommandVoidDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandVoidDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsCommandVoidDescription self, mtsCommandVoidDescription source)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsCommandVoidDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsCommandVoidDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsCommandVoidDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsCommandVoidDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsCommandVoidDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsCommandVoidDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsCommandVoidDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsCommandVoidDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsCommandVoidDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsCommandVoidDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsCommandVoidDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsCommandVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsCommandVoidDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsCommandVoidDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsCommandVoidDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsCommandVoidDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandVoidDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsCommandVoidDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsCommandVoidDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidDescription_DeSerializeTextJSON(self, *args)

mtsCommandVoidDescription_swigregister = _cisstMultiTaskPython.mtsCommandVoidDescription_swigregister
mtsCommandVoidDescription_swigregister(mtsCommandVoidDescription)

class mtsCommandWriteDescription(object):
    """Proxy of C++ mtsCommandWriteDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsCommandWriteDescription_Name_get, _cisstMultiTaskPython.mtsCommandWriteDescription_Name_set)
    ArgumentPrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandWriteDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandWriteDescription_ArgumentPrototypeSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsCommandWriteDescription self) -> mtsCommandWriteDescription
        __init__(mtsCommandWriteDescription self, mtsCommandWriteDescription other) -> mtsCommandWriteDescription
        __init__(mtsCommandWriteDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized) -> mtsCommandWriteDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandWriteDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsCommandWriteDescription self, mtsCommandWriteDescription source)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsCommandWriteDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsCommandWriteDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsCommandWriteDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsCommandWriteDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsCommandWriteDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsCommandWriteDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsCommandWriteDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsCommandWriteDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsCommandWriteDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsCommandWriteDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsCommandWriteDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsCommandWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsCommandWriteDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsCommandWriteDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsCommandWriteDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsCommandWriteDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandWriteDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsCommandWriteDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsCommandWriteDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteDescription_DeSerializeTextJSON(self, *args)

mtsCommandWriteDescription_swigregister = _cisstMultiTaskPython.mtsCommandWriteDescription_swigregister
mtsCommandWriteDescription_swigregister(mtsCommandWriteDescription)

class mtsCommandReadDescription(object):
    """Proxy of C++ mtsCommandReadDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandReadDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsCommandReadDescription_Name_get, _cisstMultiTaskPython.mtsCommandReadDescription_Name_set)
    ArgumentPrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandReadDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandReadDescription_ArgumentPrototypeSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsCommandReadDescription self) -> mtsCommandReadDescription
        __init__(mtsCommandReadDescription self, mtsCommandReadDescription other) -> mtsCommandReadDescription
        __init__(mtsCommandReadDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized) -> mtsCommandReadDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandReadDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsCommandReadDescription self, mtsCommandReadDescription source)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsCommandReadDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsCommandReadDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsCommandReadDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsCommandReadDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsCommandReadDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsCommandReadDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsCommandReadDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsCommandReadDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsCommandReadDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsCommandReadDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsCommandReadDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandReadDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsCommandReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsCommandReadDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsCommandReadDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsCommandReadDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsCommandReadDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandReadDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsCommandReadDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsCommandReadDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandReadDescription_DeSerializeTextJSON(self, *args)

mtsCommandReadDescription_swigregister = _cisstMultiTaskPython.mtsCommandReadDescription_swigregister
mtsCommandReadDescription_swigregister(mtsCommandReadDescription)

class mtsCommandQualifiedReadDescription(object):
    """Proxy of C++ mtsCommandQualifiedReadDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandQualifiedReadDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Name_get, _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Name_set)
    Argument1PrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument1PrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument1PrototypeSerialized_set)
    Argument2PrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument2PrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Argument2PrototypeSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsCommandQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription
        __init__(mtsCommandQualifiedReadDescription self, mtsCommandQualifiedReadDescription other) -> mtsCommandQualifiedReadDescription
        __init__(mtsCommandQualifiedReadDescription self, std::string const & newName, std::string const & newArgument1PrototypeSerialized, 
            std::string const & newArgument2PrototypeSerialized) -> mtsCommandQualifiedReadDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandQualifiedReadDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsCommandQualifiedReadDescription self, mtsCommandQualifiedReadDescription source)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsCommandQualifiedReadDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsCommandQualifiedReadDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsCommandQualifiedReadDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsCommandQualifiedReadDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsCommandQualifiedReadDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsCommandQualifiedReadDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsCommandQualifiedReadDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsCommandQualifiedReadDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsCommandQualifiedReadDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsCommandQualifiedReadDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsCommandQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsCommandQualifiedReadDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsCommandQualifiedReadDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsCommandQualifiedReadDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsCommandQualifiedReadDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsCommandQualifiedReadDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsCommandQualifiedReadDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_DeSerializeTextJSON(self, *args)

mtsCommandQualifiedReadDescription_swigregister = _cisstMultiTaskPython.mtsCommandQualifiedReadDescription_swigregister
mtsCommandQualifiedReadDescription_swigregister(mtsCommandQualifiedReadDescription)

class mtsCommandVoidReturnDescription(object):
    """Proxy of C++ mtsCommandVoidReturnDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandVoidReturnDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsCommandVoidReturnDescription_Name_get, _cisstMultiTaskPython.mtsCommandVoidReturnDescription_Name_set)
    ResultPrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandVoidReturnDescription_ResultPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ResultPrototypeSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsCommandVoidReturnDescription self) -> mtsCommandVoidReturnDescription
        __init__(mtsCommandVoidReturnDescription self, mtsCommandVoidReturnDescription other) -> mtsCommandVoidReturnDescription
        __init__(mtsCommandVoidReturnDescription self, std::string const & newName, std::string const & newResultPrototypeSerialized) -> mtsCommandVoidReturnDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandVoidReturnDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsCommandVoidReturnDescription self, mtsCommandVoidReturnDescription source)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsCommandVoidReturnDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsCommandVoidReturnDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsCommandVoidReturnDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsCommandVoidReturnDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsCommandVoidReturnDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsCommandVoidReturnDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsCommandVoidReturnDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsCommandVoidReturnDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsCommandVoidReturnDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsCommandVoidReturnDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsCommandVoidReturnDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsCommandVoidReturnDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsCommandVoidReturnDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsCommandVoidReturnDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsCommandVoidReturnDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsCommandVoidReturnDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsCommandVoidReturnDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandVoidReturnDescription_DeSerializeTextJSON(self, *args)

mtsCommandVoidReturnDescription_swigregister = _cisstMultiTaskPython.mtsCommandVoidReturnDescription_swigregister
mtsCommandVoidReturnDescription_swigregister(mtsCommandVoidReturnDescription)

class mtsCommandWriteReturnDescription(object):
    """Proxy of C++ mtsCommandWriteReturnDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandWriteReturnDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsCommandWriteReturnDescription_Name_get, _cisstMultiTaskPython.mtsCommandWriteReturnDescription_Name_set)
    ArgumentPrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandWriteReturnDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ArgumentPrototypeSerialized_set)
    ResultPrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsCommandWriteReturnDescription_ResultPrototypeSerialized_get, _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ResultPrototypeSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsCommandWriteReturnDescription self) -> mtsCommandWriteReturnDescription
        __init__(mtsCommandWriteReturnDescription self, mtsCommandWriteReturnDescription other) -> mtsCommandWriteReturnDescription
        __init__(mtsCommandWriteReturnDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized, 
            std::string const & newResultPrototypeSerialized) -> mtsCommandWriteReturnDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandWriteReturnDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsCommandWriteReturnDescription self, mtsCommandWriteReturnDescription source)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsCommandWriteReturnDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsCommandWriteReturnDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsCommandWriteReturnDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsCommandWriteReturnDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsCommandWriteReturnDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsCommandWriteReturnDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsCommandWriteReturnDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsCommandWriteReturnDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsCommandWriteReturnDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsCommandWriteReturnDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsCommandWriteReturnDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsCommandWriteReturnDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsCommandWriteReturnDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsCommandWriteReturnDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsCommandWriteReturnDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsCommandWriteReturnDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsCommandWriteReturnDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsCommandWriteReturnDescription_DeSerializeTextJSON(self, *args)

mtsCommandWriteReturnDescription_swigregister = _cisstMultiTaskPython.mtsCommandWriteReturnDescription_swigregister
mtsCommandWriteReturnDescription_swigregister(mtsCommandWriteReturnDescription)

class mtsEventVoidDescription(object):
    """Proxy of C++ mtsEventVoidDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventVoidDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsEventVoidDescription_Name_get, _cisstMultiTaskPython.mtsEventVoidDescription_Name_set)
    def __init__(self, *args): 
        """
        __init__(mtsEventVoidDescription self) -> mtsEventVoidDescription
        __init__(mtsEventVoidDescription self, mtsEventVoidDescription other) -> mtsEventVoidDescription
        __init__(mtsEventVoidDescription self, std::string const & newName) -> mtsEventVoidDescription
        """
        this = _cisstMultiTaskPython.new_mtsEventVoidDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsEventVoidDescription self, mtsEventVoidDescription source)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsEventVoidDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsEventVoidDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsEventVoidDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsEventVoidDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsEventVoidDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsEventVoidDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsEventVoidDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsEventVoidDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsEventVoidDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsEventVoidDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsEventVoidDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsEventVoidDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsEventVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsEventVoidDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsEventVoidDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsEventVoidDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsEventVoidDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsEventVoidDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsEventVoidDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsEventVoidDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventVoidDescription_DeSerializeTextJSON(self, *args)

mtsEventVoidDescription_swigregister = _cisstMultiTaskPython.mtsEventVoidDescription_swigregister
mtsEventVoidDescription_swigregister(mtsEventVoidDescription)

class mtsEventWriteDescription(object):
    """Proxy of C++ mtsEventWriteDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventWriteDescription
    __del__ = lambda self : None;
    Name = _swig_property(_cisstMultiTaskPython.mtsEventWriteDescription_Name_get, _cisstMultiTaskPython.mtsEventWriteDescription_Name_set)
    ArgumentPrototypeSerialized = _swig_property(_cisstMultiTaskPython.mtsEventWriteDescription_ArgumentPrototypeSerialized_get, _cisstMultiTaskPython.mtsEventWriteDescription_ArgumentPrototypeSerialized_set)
    def __init__(self, *args): 
        """
        __init__(mtsEventWriteDescription self) -> mtsEventWriteDescription
        __init__(mtsEventWriteDescription self, mtsEventWriteDescription other) -> mtsEventWriteDescription
        __init__(mtsEventWriteDescription self, std::string const & newName, std::string const & newArgumentPrototypeSerialized) -> mtsEventWriteDescription
        """
        this = _cisstMultiTaskPython.new_mtsEventWriteDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def Copy(self, *args):
        """Copy(mtsEventWriteDescription self, mtsEventWriteDescription source)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsEventWriteDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsEventWriteDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsEventWriteDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsEventWriteDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsEventWriteDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsEventWriteDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsEventWriteDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsEventWriteDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsEventWriteDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsEventWriteDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsEventWriteDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsEventWriteDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsEventWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsEventWriteDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsEventWriteDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsEventWriteDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsEventWriteDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsEventWriteDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsEventWriteDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsEventWriteDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsEventWriteDescription_DeSerializeTextJSON(self, *args)

mtsEventWriteDescription_swigregister = _cisstMultiTaskPython.mtsEventWriteDescription_swigregister
mtsEventWriteDescription_swigregister(mtsEventWriteDescription)

class mtsInterfaceProvidedDescription(object):
    """Proxy of C++ mtsInterfaceProvidedDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsInterfaceProvidedDescription self) -> mtsInterfaceProvidedDescription
        __init__(mtsInterfaceProvidedDescription self, mtsInterfaceProvidedDescription other) -> mtsInterfaceProvidedDescription
        """
        this = _cisstMultiTaskPython.new_mtsInterfaceProvidedDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvidedDescription
    __del__ = lambda self : None;
    InterfaceName = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_InterfaceName_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_InterfaceName_set)
    CommandsVoid = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoid_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoid_set)
    CommandsWrite = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWrite_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWrite_set)
    CommandsRead = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsRead_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsRead_set)
    CommandsQualifiedRead = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsQualifiedRead_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsQualifiedRead_set)
    CommandsVoidReturn = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoidReturn_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsVoidReturn_set)
    CommandsWriteReturn = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWriteReturn_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_CommandsWriteReturn_set)
    EventsVoid = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsVoid_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsVoid_set)
    EventsWrite = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsWrite_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescription_EventsWrite_set)
    def Copy(self, *args):
        """Copy(mtsInterfaceProvidedDescription self, mtsInterfaceProvidedDescription source)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsInterfaceProvidedDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsInterfaceProvidedDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsInterfaceProvidedDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsInterfaceProvidedDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsInterfaceProvidedDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsInterfaceProvidedDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsInterfaceProvidedDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsInterfaceProvidedDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsInterfaceProvidedDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsInterfaceProvidedDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsInterfaceProvidedDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsInterfaceProvidedDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsInterfaceProvidedDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsInterfaceProvidedDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsInterfaceProvidedDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsInterfaceProvidedDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsInterfaceProvidedDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescription_DeSerializeTextJSON(self, *args)

mtsInterfaceProvidedDescription_swigregister = _cisstMultiTaskPython.mtsInterfaceProvidedDescription_swigregister
mtsInterfaceProvidedDescription_swigregister(mtsInterfaceProvidedDescription)

class mtsInterfaceRequiredDescription(object):
    """Proxy of C++ mtsInterfaceRequiredDescription class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(mtsInterfaceRequiredDescription self) -> mtsInterfaceRequiredDescription
        __init__(mtsInterfaceRequiredDescription self, mtsInterfaceRequiredDescription other) -> mtsInterfaceRequiredDescription
        """
        this = _cisstMultiTaskPython.new_mtsInterfaceRequiredDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequiredDescription
    __del__ = lambda self : None;
    InterfaceName = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_InterfaceName_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_InterfaceName_set)
    FunctionVoidNames = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidNames_set)
    FunctionWriteNames = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteNames_set)
    FunctionReadNames = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionReadNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionReadNames_set)
    FunctionQualifiedReadNames = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionQualifiedReadNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionQualifiedReadNames_set)
    FunctionVoidReturnNames = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidReturnNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionVoidReturnNames_set)
    FunctionWriteReturnNames = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteReturnNames_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_FunctionWriteReturnNames_set)
    EventHandlersVoid = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersVoid_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersVoid_set)
    EventHandlersWrite = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersWrite_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_EventHandlersWrite_set)
    IsRequired = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescription_IsRequired_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescription_IsRequired_set)
    def Copy(self, *args):
        """Copy(mtsInterfaceRequiredDescription self, mtsInterfaceRequiredDescription source)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_Copy(self, *args)

    def SerializeBinary(self, *args):
        """SerializeBinary(mtsInterfaceRequiredDescription self, ostream outputStream)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeBinary(self, *args)

    def DeSerializeBinary(self, *args):
        """DeSerializeBinary(mtsInterfaceRequiredDescription self, istream inputStream, cmnDataFormat const & localFormat, cmnDataFormat const & remoteFormat)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_DeSerializeBinary(self, *args)

    def SerializeText(self, *args):
        """
        SerializeText(mtsInterfaceRequiredDescription self, ostream outputStream, char const delimiter=',')
        SerializeText(mtsInterfaceRequiredDescription self, ostream outputStream)
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeText(self, *args)

    def SerializeDescription(self, delimiter=',', userDescription=""):
        """
        SerializeDescription(mtsInterfaceRequiredDescription self, char const delimiter=',', std::string const & userDescription="") -> std::string
        SerializeDescription(mtsInterfaceRequiredDescription self, char const delimiter=',') -> std::string
        SerializeDescription(mtsInterfaceRequiredDescription self) -> std::string
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeDescription(self, delimiter, userDescription)

    def DeSerializeText(self, *args):
        """
        DeSerializeText(mtsInterfaceRequiredDescription self, istream inputStream, char const delimiter=',')
        DeSerializeText(mtsInterfaceRequiredDescription self, istream inputStream)
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_DeSerializeText(self, *args)

    def __str__(self):
        """__str__(mtsInterfaceRequiredDescription self) -> std::string"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription___str__(self)

    def ScalarNumberIsFixed(self):
        """ScalarNumberIsFixed(mtsInterfaceRequiredDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_ScalarNumberIsFixed(self)

    def ScalarNumber(self):
        """ScalarNumber(mtsInterfaceRequiredDescription self) -> size_t"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_ScalarNumber(self)

    def Scalar(self, *args):
        """Scalar(mtsInterfaceRequiredDescription self, size_t const index) -> double"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_Scalar(self, *args)

    def ScalarDescription(self, *args):
        """
        ScalarDescription(mtsInterfaceRequiredDescription self, size_t const index, std::string const & userDescription="") -> std::string
        ScalarDescription(mtsInterfaceRequiredDescription self, size_t const index) -> std::string
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_ScalarDescription(self, *args)

    def SerializeTextJSON(self, *args):
        """SerializeTextJSON(mtsInterfaceRequiredDescription self, Json::Value & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_SerializeTextJSON(self, *args)

    def DeSerializeTextJSON(self, *args):
        """DeSerializeTextJSON(mtsInterfaceRequiredDescription self, Json::Value const & jsonValue)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescription_DeSerializeTextJSON(self, *args)

mtsInterfaceRequiredDescription_swigregister = _cisstMultiTaskPython.mtsInterfaceRequiredDescription_swigregister
mtsInterfaceRequiredDescription_swigregister(mtsInterfaceRequiredDescription)


def cmnSerializeRaw(*args):
  """
    cmnSerializeRaw(ostream outputStream, mtsExecutionResult object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionComponent object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionComponentClass object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionInterface object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionIntefaceFullName object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionConnection object)
    cmnSerializeRaw(ostream outputStream, mtsComponentStatusControl object)
    cmnSerializeRaw(ostream outputStream, mtsComponentStateChange object)
    cmnSerializeRaw(ostream outputStream, mtsDescriptionLoadLibrary object)
    cmnSerializeRaw(ostream outputStream, mtsEndUserInterfaceArg object)
    cmnSerializeRaw(ostream outputStream, mtsComponentState object)
    cmnSerializeRaw(ostream outputStream, mtsCommandVoidDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandWriteDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandReadDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandQualifiedReadDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandVoidReturnDescription object)
    cmnSerializeRaw(ostream outputStream, mtsCommandWriteReturnDescription object)
    cmnSerializeRaw(ostream outputStream, mtsEventVoidDescription object)
    cmnSerializeRaw(ostream outputStream, mtsEventWriteDescription object)
    cmnSerializeRaw(ostream outputStream, mtsInterfaceProvidedDescription object)
    cmnSerializeRaw(ostream outputStream, mtsInterfaceRequiredDescription object)
    """
  return _cisstMultiTaskPython.cmnSerializeRaw(*args)

def cmnDeSerializeRaw(*args):
  """
    cmnDeSerializeRaw(istream inputStream, mtsExecutionResult placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionComponent placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionComponentClass placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionInterface placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionIntefaceFullName placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionConnection placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsComponentStatusControl placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsComponentStateChange placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsDescriptionLoadLibrary placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsEndUserInterfaceArg placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsComponentState placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandVoidDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandWriteDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandReadDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandQualifiedReadDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandVoidReturnDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsCommandWriteReturnDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsEventVoidDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsEventWriteDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsInterfaceProvidedDescription placeHolder)
    cmnDeSerializeRaw(istream inputStream, mtsInterfaceRequiredDescription placeHolder)
    """
  return _cisstMultiTaskPython.cmnDeSerializeRaw(*args)
class mtsInterfaceProvidedDescriptionProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(mtsInterfaceProvidedDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvidedDescriptionProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsInterfaceProvidedDescriptionProxyBase self) -> mtsInterfaceProvidedDescription
        GetData(mtsInterfaceProvidedDescriptionProxyBase self) -> mtsInterfaceProvidedDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsInterfaceProvidedDescriptionProxyBase self, mtsInterfaceProvidedDescriptionProxyBase other)"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_Assign(self, *args)

mtsInterfaceProvidedDescriptionProxyBase_swigregister = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_swigregister
mtsInterfaceProvidedDescriptionProxyBase_swigregister(mtsInterfaceProvidedDescriptionProxyBase)

def mtsInterfaceProvidedDescriptionProxyBase_ClassServices():
  """mtsInterfaceProvidedDescriptionProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxyBase_ClassServices()

class mtsInterfaceProvidedDescriptionProxy(mtsInterfaceProvidedDescriptionProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(mtsInterfaceProvidedDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_Data_get, _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(mtsInterfaceProvidedDescription)> self) -> mtsInterfaceProvidedDescriptionProxy
        __init__(mtsGenericObjectProxy<(mtsInterfaceProvidedDescription)> self, mtsInterfaceProvidedDescriptionProxy other) -> mtsInterfaceProvidedDescriptionProxy
        __init__(mtsGenericObjectProxy<(mtsInterfaceProvidedDescription)> self, mtsInterfaceProvidedDescription data) -> mtsInterfaceProvidedDescriptionProxy
        """
        this = _cisstMultiTaskPython.new_mtsInterfaceProvidedDescriptionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceProvidedDescriptionProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescription
        GetData(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsInterfaceProvidedDescriptionProxy self) -> mtsInterfaceProvidedDescription"""
        return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_GetDataCopy(self)

mtsInterfaceProvidedDescriptionProxy_swigregister = _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_swigregister
mtsInterfaceProvidedDescriptionProxy_swigregister(mtsInterfaceProvidedDescriptionProxy)

def mtsInterfaceProvidedDescriptionProxy_ClassServices():
  """mtsInterfaceProvidedDescriptionProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInterfaceProvidedDescriptionProxy_ClassServices()

class mtsInterfaceRequiredDescriptionProxyBase(mtsGenericObject):
    """Proxy of C++ mtsGenericObjectProxyBase<(mtsInterfaceRequiredDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_ClassServices()

    ClassServices = staticmethod(ClassServices)
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequiredDescriptionProxyBase
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsInterfaceRequiredDescriptionProxyBase self) -> mtsInterfaceRequiredDescription
        GetData(mtsInterfaceRequiredDescriptionProxyBase self) -> mtsInterfaceRequiredDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_GetData(self, *args)

    def Assign(self, *args):
        """Assign(mtsInterfaceRequiredDescriptionProxyBase self, mtsInterfaceRequiredDescriptionProxyBase other)"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_Assign(self, *args)

mtsInterfaceRequiredDescriptionProxyBase_swigregister = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_swigregister
mtsInterfaceRequiredDescriptionProxyBase_swigregister(mtsInterfaceRequiredDescriptionProxyBase)

def mtsInterfaceRequiredDescriptionProxyBase_ClassServices():
  """mtsInterfaceRequiredDescriptionProxyBase_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxyBase_ClassServices()

class mtsInterfaceRequiredDescriptionProxy(mtsInterfaceRequiredDescriptionProxyBase):
    """Proxy of C++ mtsGenericObjectProxy<(mtsInterfaceRequiredDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_ClassServices()

    ClassServices = staticmethod(ClassServices)
    Data = _swig_property(_cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_Data_get, _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_Data_set)
    def __init__(self, *args): 
        """
        __init__(mtsGenericObjectProxy<(mtsInterfaceRequiredDescription)> self) -> mtsInterfaceRequiredDescriptionProxy
        __init__(mtsGenericObjectProxy<(mtsInterfaceRequiredDescription)> self, mtsInterfaceRequiredDescriptionProxy other) -> mtsInterfaceRequiredDescriptionProxy
        __init__(mtsGenericObjectProxy<(mtsInterfaceRequiredDescription)> self, mtsInterfaceRequiredDescription data) -> mtsInterfaceRequiredDescriptionProxy
        """
        this = _cisstMultiTaskPython.new_mtsInterfaceRequiredDescriptionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsInterfaceRequiredDescriptionProxy
    __del__ = lambda self : None;
    def GetData(self, *args):
        """
        GetData(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescription
        GetData(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescription
        """
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_GetData(self, *args)

    def GetDataCopy(self):
        """GetDataCopy(mtsInterfaceRequiredDescriptionProxy self) -> mtsInterfaceRequiredDescription"""
        return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_GetDataCopy(self)

mtsInterfaceRequiredDescriptionProxy_swigregister = _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_swigregister
mtsInterfaceRequiredDescriptionProxy_swigregister(mtsInterfaceRequiredDescriptionProxy)

def mtsInterfaceRequiredDescriptionProxy_ClassServices():
  """mtsInterfaceRequiredDescriptionProxy_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsInterfaceRequiredDescriptionProxy_ClassServices()

class mtsCommandsVoidDescription(object):
    """Proxy of C++ std::vector<(mtsCommandVoidDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsCommandsVoidDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsCommandsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsCommandsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___bool__(self)

    def __len__(self):
        """__len__(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___len__(self)

    def pop(self):
        """pop(mtsCommandsVoidDescription self) -> mtsCommandVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j) -> mtsCommandsVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j, 
            mtsCommandsVoidDescription v=std::vector< mtsCommandVoidDescription,std::allocator< mtsCommandVoidDescription > >())
        __setslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, std::vector< mtsCommandVoidDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i)
        __delitem__(mtsCommandsVoidDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsCommandsVoidDescription self, PySliceObject * slice) -> mtsCommandsVoidDescription
        __getitem__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i) -> mtsCommandVoidDescription
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsCommandsVoidDescription self, PySliceObject * slice, mtsCommandsVoidDescription v)
        __setitem__(mtsCommandsVoidDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::difference_type i, mtsCommandVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription___setitem__(self, *args)

    def append(self, *args):
        """append(mtsCommandsVoidDescription self, mtsCommandVoidDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_append(self, *args)

    def empty(self):
        """empty(mtsCommandsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_empty(self)

    def size(self):
        """size(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_size(self)

    def clear(self):
        """clear(mtsCommandsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_clear(self)

    def swap(self, *args):
        """swap(mtsCommandsVoidDescription self, mtsCommandsVoidDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_get_allocator(self)

    def begin(self):
        """begin(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_begin(self)

    def end(self):
        """end(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_end(self)

    def rbegin(self):
        """rbegin(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_rbegin(self)

    def rend(self):
        """rend(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_rend(self)

    def pop_back(self):
        """pop_back(mtsCommandsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator pos) -> std::vector< mtsCommandVoidDescription >::iterator
        erase(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator first, std::vector< mtsCommandVoidDescription >::iterator last) -> std::vector< mtsCommandVoidDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsCommandVoidDescription)> self) -> mtsCommandsVoidDescription
        __init__(std::vector<(mtsCommandVoidDescription)> self, mtsCommandsVoidDescription arg2) -> mtsCommandsVoidDescription
        __init__(std::vector<(mtsCommandVoidDescription)> self, std::vector< mtsCommandVoidDescription >::size_type size) -> mtsCommandsVoidDescription
        __init__(std::vector<(mtsCommandVoidDescription)> self, std::vector< mtsCommandVoidDescription >::size_type size, mtsCommandVoidDescription value) -> mtsCommandsVoidDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandsVoidDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsCommandsVoidDescription self, mtsCommandVoidDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_push_back(self, *args)

    def front(self):
        """front(mtsCommandsVoidDescription self) -> mtsCommandVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_front(self)

    def back(self):
        """back(mtsCommandsVoidDescription self) -> mtsCommandVoidDescription"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_back(self)

    def assign(self, *args):
        """assign(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type n, mtsCommandVoidDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type new_size)
        resize(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type new_size, mtsCommandVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator pos, mtsCommandVoidDescription x) -> std::vector< mtsCommandVoidDescription >::iterator
        insert(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::iterator pos, std::vector< mtsCommandVoidDescription >::size_type n, 
            mtsCommandVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsCommandsVoidDescription self, std::vector< mtsCommandVoidDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_reserve(self, *args)

    def capacity(self):
        """capacity(mtsCommandsVoidDescription self) -> std::vector< mtsCommandVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsVoidDescription_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsVoidDescription
    __del__ = lambda self : None;
mtsCommandsVoidDescription_swigregister = _cisstMultiTaskPython.mtsCommandsVoidDescription_swigregister
mtsCommandsVoidDescription_swigregister(mtsCommandsVoidDescription)

class mtsCommandsWriteDescription(object):
    """Proxy of C++ std::vector<(mtsCommandWriteDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsCommandsWriteDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsCommandsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsCommandsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___bool__(self)

    def __len__(self):
        """__len__(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___len__(self)

    def pop(self):
        """pop(mtsCommandsWriteDescription self) -> mtsCommandWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j) -> mtsCommandsWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j, 
            mtsCommandsWriteDescription v=std::vector< mtsCommandWriteDescription,std::allocator< mtsCommandWriteDescription > >())
        __setslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, std::vector< mtsCommandWriteDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i)
        __delitem__(mtsCommandsWriteDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsCommandsWriteDescription self, PySliceObject * slice) -> mtsCommandsWriteDescription
        __getitem__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i) -> mtsCommandWriteDescription
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsCommandsWriteDescription self, PySliceObject * slice, mtsCommandsWriteDescription v)
        __setitem__(mtsCommandsWriteDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::difference_type i, mtsCommandWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription___setitem__(self, *args)

    def append(self, *args):
        """append(mtsCommandsWriteDescription self, mtsCommandWriteDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_append(self, *args)

    def empty(self):
        """empty(mtsCommandsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_empty(self)

    def size(self):
        """size(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_size(self)

    def clear(self):
        """clear(mtsCommandsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_clear(self)

    def swap(self, *args):
        """swap(mtsCommandsWriteDescription self, mtsCommandsWriteDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_get_allocator(self)

    def begin(self):
        """begin(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_begin(self)

    def end(self):
        """end(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_end(self)

    def rbegin(self):
        """rbegin(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_rbegin(self)

    def rend(self):
        """rend(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_rend(self)

    def pop_back(self):
        """pop_back(mtsCommandsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator pos) -> std::vector< mtsCommandWriteDescription >::iterator
        erase(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator first, std::vector< mtsCommandWriteDescription >::iterator last) -> std::vector< mtsCommandWriteDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsCommandWriteDescription)> self) -> mtsCommandsWriteDescription
        __init__(std::vector<(mtsCommandWriteDescription)> self, mtsCommandsWriteDescription arg2) -> mtsCommandsWriteDescription
        __init__(std::vector<(mtsCommandWriteDescription)> self, std::vector< mtsCommandWriteDescription >::size_type size) -> mtsCommandsWriteDescription
        __init__(std::vector<(mtsCommandWriteDescription)> self, std::vector< mtsCommandWriteDescription >::size_type size, mtsCommandWriteDescription value) -> mtsCommandsWriteDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandsWriteDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsCommandsWriteDescription self, mtsCommandWriteDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_push_back(self, *args)

    def front(self):
        """front(mtsCommandsWriteDescription self) -> mtsCommandWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_front(self)

    def back(self):
        """back(mtsCommandsWriteDescription self) -> mtsCommandWriteDescription"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_back(self)

    def assign(self, *args):
        """assign(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type n, mtsCommandWriteDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type new_size)
        resize(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type new_size, mtsCommandWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator pos, mtsCommandWriteDescription x) -> std::vector< mtsCommandWriteDescription >::iterator
        insert(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::iterator pos, std::vector< mtsCommandWriteDescription >::size_type n, 
            mtsCommandWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsCommandsWriteDescription self, std::vector< mtsCommandWriteDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_reserve(self, *args)

    def capacity(self):
        """capacity(mtsCommandsWriteDescription self) -> std::vector< mtsCommandWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsWriteDescription_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsWriteDescription
    __del__ = lambda self : None;
mtsCommandsWriteDescription_swigregister = _cisstMultiTaskPython.mtsCommandsWriteDescription_swigregister
mtsCommandsWriteDescription_swigregister(mtsCommandsWriteDescription)

class mtsCommandsReadDescription(object):
    """Proxy of C++ std::vector<(mtsCommandReadDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsCommandsReadDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsCommandsReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsCommandsReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___bool__(self)

    def __len__(self):
        """__len__(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___len__(self)

    def pop(self):
        """pop(mtsCommandsReadDescription self) -> mtsCommandReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j) -> mtsCommandsReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j, 
            mtsCommandsReadDescription v=std::vector< mtsCommandReadDescription,std::allocator< mtsCommandReadDescription > >())
        __setslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, std::vector< mtsCommandReadDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i)
        __delitem__(mtsCommandsReadDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsCommandsReadDescription self, PySliceObject * slice) -> mtsCommandsReadDescription
        __getitem__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i) -> mtsCommandReadDescription
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsCommandsReadDescription self, PySliceObject * slice, mtsCommandsReadDescription v)
        __setitem__(mtsCommandsReadDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::difference_type i, mtsCommandReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription___setitem__(self, *args)

    def append(self, *args):
        """append(mtsCommandsReadDescription self, mtsCommandReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_append(self, *args)

    def empty(self):
        """empty(mtsCommandsReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_empty(self)

    def size(self):
        """size(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_size(self)

    def clear(self):
        """clear(mtsCommandsReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_clear(self)

    def swap(self, *args):
        """swap(mtsCommandsReadDescription self, mtsCommandsReadDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_get_allocator(self)

    def begin(self):
        """begin(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_begin(self)

    def end(self):
        """end(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_end(self)

    def rbegin(self):
        """rbegin(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_rbegin(self)

    def rend(self):
        """rend(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_rend(self)

    def pop_back(self):
        """pop_back(mtsCommandsReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator pos) -> std::vector< mtsCommandReadDescription >::iterator
        erase(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator first, std::vector< mtsCommandReadDescription >::iterator last) -> std::vector< mtsCommandReadDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsCommandReadDescription)> self) -> mtsCommandsReadDescription
        __init__(std::vector<(mtsCommandReadDescription)> self, mtsCommandsReadDescription arg2) -> mtsCommandsReadDescription
        __init__(std::vector<(mtsCommandReadDescription)> self, std::vector< mtsCommandReadDescription >::size_type size) -> mtsCommandsReadDescription
        __init__(std::vector<(mtsCommandReadDescription)> self, std::vector< mtsCommandReadDescription >::size_type size, mtsCommandReadDescription value) -> mtsCommandsReadDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandsReadDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsCommandsReadDescription self, mtsCommandReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_push_back(self, *args)

    def front(self):
        """front(mtsCommandsReadDescription self) -> mtsCommandReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_front(self)

    def back(self):
        """back(mtsCommandsReadDescription self) -> mtsCommandReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_back(self)

    def assign(self, *args):
        """assign(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type n, mtsCommandReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type new_size)
        resize(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type new_size, mtsCommandReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator pos, mtsCommandReadDescription x) -> std::vector< mtsCommandReadDescription >::iterator
        insert(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::iterator pos, std::vector< mtsCommandReadDescription >::size_type n, 
            mtsCommandReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsReadDescription_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsCommandsReadDescription self, std::vector< mtsCommandReadDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_reserve(self, *args)

    def capacity(self):
        """capacity(mtsCommandsReadDescription self) -> std::vector< mtsCommandReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsReadDescription_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsReadDescription
    __del__ = lambda self : None;
mtsCommandsReadDescription_swigregister = _cisstMultiTaskPython.mtsCommandsReadDescription_swigregister
mtsCommandsReadDescription_swigregister(mtsCommandsReadDescription)

class mtsCommandsQualifiedReadDescription(object):
    """Proxy of C++ std::vector<(mtsCommandQualifiedReadDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsCommandsQualifiedReadDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsCommandsQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsCommandsQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___bool__(self)

    def __len__(self):
        """__len__(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___len__(self)

    def pop(self):
        """pop(mtsCommandsQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j) -> mtsCommandsQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j, 
            mtsCommandsQualifiedReadDescription v=std::vector< mtsCommandQualifiedReadDescription,std::allocator< mtsCommandQualifiedReadDescription > >())
        __setslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, std::vector< mtsCommandQualifiedReadDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i)
        __delitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice) -> mtsCommandsQualifiedReadDescription
        __getitem__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i) -> mtsCommandQualifiedReadDescription
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice, mtsCommandsQualifiedReadDescription v)
        __setitem__(mtsCommandsQualifiedReadDescription self, PySliceObject * slice)
        __setitem__(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::difference_type i, mtsCommandQualifiedReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription___setitem__(self, *args)

    def append(self, *args):
        """append(mtsCommandsQualifiedReadDescription self, mtsCommandQualifiedReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_append(self, *args)

    def empty(self):
        """empty(mtsCommandsQualifiedReadDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_empty(self)

    def size(self):
        """size(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_size(self)

    def clear(self):
        """clear(mtsCommandsQualifiedReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_clear(self)

    def swap(self, *args):
        """swap(mtsCommandsQualifiedReadDescription self, mtsCommandsQualifiedReadDescription v)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_get_allocator(self)

    def begin(self):
        """begin(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_begin(self)

    def end(self):
        """end(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_end(self)

    def rbegin(self):
        """rbegin(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_rbegin(self)

    def rend(self):
        """rend(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_rend(self)

    def pop_back(self):
        """pop_back(mtsCommandsQualifiedReadDescription self)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator pos) -> std::vector< mtsCommandQualifiedReadDescription >::iterator
        erase(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator first, std::vector< mtsCommandQualifiedReadDescription >::iterator last) -> std::vector< mtsCommandQualifiedReadDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsCommandQualifiedReadDescription)> self) -> mtsCommandsQualifiedReadDescription
        __init__(std::vector<(mtsCommandQualifiedReadDescription)> self, mtsCommandsQualifiedReadDescription arg2) -> mtsCommandsQualifiedReadDescription
        __init__(std::vector<(mtsCommandQualifiedReadDescription)> self, std::vector< mtsCommandQualifiedReadDescription >::size_type size) -> mtsCommandsQualifiedReadDescription
        __init__(std::vector<(mtsCommandQualifiedReadDescription)> self, std::vector< mtsCommandQualifiedReadDescription >::size_type size, mtsCommandQualifiedReadDescription value) -> mtsCommandsQualifiedReadDescription
        """
        this = _cisstMultiTaskPython.new_mtsCommandsQualifiedReadDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsCommandsQualifiedReadDescription self, mtsCommandQualifiedReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_push_back(self, *args)

    def front(self):
        """front(mtsCommandsQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_front(self)

    def back(self):
        """back(mtsCommandsQualifiedReadDescription self) -> mtsCommandQualifiedReadDescription"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_back(self)

    def assign(self, *args):
        """assign(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type n, mtsCommandQualifiedReadDescription x)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type new_size)
        resize(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type new_size, mtsCommandQualifiedReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator pos, mtsCommandQualifiedReadDescription x) -> std::vector< mtsCommandQualifiedReadDescription >::iterator
        insert(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::iterator pos, std::vector< mtsCommandQualifiedReadDescription >::size_type n, 
            mtsCommandQualifiedReadDescription x)
        """
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsCommandsQualifiedReadDescription self, std::vector< mtsCommandQualifiedReadDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_reserve(self, *args)

    def capacity(self):
        """capacity(mtsCommandsQualifiedReadDescription self) -> std::vector< mtsCommandQualifiedReadDescription >::size_type"""
        return _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCommandsQualifiedReadDescription
    __del__ = lambda self : None;
mtsCommandsQualifiedReadDescription_swigregister = _cisstMultiTaskPython.mtsCommandsQualifiedReadDescription_swigregister
mtsCommandsQualifiedReadDescription_swigregister(mtsCommandsQualifiedReadDescription)

class mtsEventsVoidDescription(object):
    """Proxy of C++ std::vector<(mtsEventVoidDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsEventsVoidDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsEventsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsEventsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___bool__(self)

    def __len__(self):
        """__len__(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___len__(self)

    def pop(self):
        """pop(mtsEventsVoidDescription self) -> mtsEventVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j) -> mtsEventsVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j, 
            mtsEventsVoidDescription v=std::vector< mtsEventVoidDescription,std::allocator< mtsEventVoidDescription > >())
        __setslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, std::vector< mtsEventVoidDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i)
        __delitem__(mtsEventsVoidDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsEventsVoidDescription self, PySliceObject * slice) -> mtsEventsVoidDescription
        __getitem__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i) -> mtsEventVoidDescription
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsEventsVoidDescription self, PySliceObject * slice, mtsEventsVoidDescription v)
        __setitem__(mtsEventsVoidDescription self, PySliceObject * slice)
        __setitem__(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::difference_type i, mtsEventVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription___setitem__(self, *args)

    def append(self, *args):
        """append(mtsEventsVoidDescription self, mtsEventVoidDescription x)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_append(self, *args)

    def empty(self):
        """empty(mtsEventsVoidDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_empty(self)

    def size(self):
        """size(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_size(self)

    def clear(self):
        """clear(mtsEventsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_clear(self)

    def swap(self, *args):
        """swap(mtsEventsVoidDescription self, mtsEventsVoidDescription v)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_get_allocator(self)

    def begin(self):
        """begin(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_begin(self)

    def end(self):
        """end(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_end(self)

    def rbegin(self):
        """rbegin(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_rbegin(self)

    def rend(self):
        """rend(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_rend(self)

    def pop_back(self):
        """pop_back(mtsEventsVoidDescription self)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator pos) -> std::vector< mtsEventVoidDescription >::iterator
        erase(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator first, std::vector< mtsEventVoidDescription >::iterator last) -> std::vector< mtsEventVoidDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsEventVoidDescription)> self) -> mtsEventsVoidDescription
        __init__(std::vector<(mtsEventVoidDescription)> self, mtsEventsVoidDescription arg2) -> mtsEventsVoidDescription
        __init__(std::vector<(mtsEventVoidDescription)> self, std::vector< mtsEventVoidDescription >::size_type size) -> mtsEventsVoidDescription
        __init__(std::vector<(mtsEventVoidDescription)> self, std::vector< mtsEventVoidDescription >::size_type size, mtsEventVoidDescription value) -> mtsEventsVoidDescription
        """
        this = _cisstMultiTaskPython.new_mtsEventsVoidDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsEventsVoidDescription self, mtsEventVoidDescription x)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_push_back(self, *args)

    def front(self):
        """front(mtsEventsVoidDescription self) -> mtsEventVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_front(self)

    def back(self):
        """back(mtsEventsVoidDescription self) -> mtsEventVoidDescription"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_back(self)

    def assign(self, *args):
        """assign(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type n, mtsEventVoidDescription x)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type new_size)
        resize(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type new_size, mtsEventVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator pos, mtsEventVoidDescription x) -> std::vector< mtsEventVoidDescription >::iterator
        insert(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::iterator pos, std::vector< mtsEventVoidDescription >::size_type n, 
            mtsEventVoidDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsVoidDescription_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsEventsVoidDescription self, std::vector< mtsEventVoidDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_reserve(self, *args)

    def capacity(self):
        """capacity(mtsEventsVoidDescription self) -> std::vector< mtsEventVoidDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsVoidDescription_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventsVoidDescription
    __del__ = lambda self : None;
mtsEventsVoidDescription_swigregister = _cisstMultiTaskPython.mtsEventsVoidDescription_swigregister
mtsEventsVoidDescription_swigregister(mtsEventsVoidDescription)

class mtsEventsWriteDescription(object):
    """Proxy of C++ std::vector<(mtsEventWriteDescription)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(mtsEventsWriteDescription self) -> SwigPyIterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(mtsEventsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___nonzero__(self)

    def __bool__(self):
        """__bool__(mtsEventsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___bool__(self)

    def __len__(self):
        """__len__(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___len__(self)

    def pop(self):
        """pop(mtsEventsWriteDescription self) -> mtsEventWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_pop(self)

    def __getslice__(self, *args):
        """__getslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j) -> mtsEventsWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j, 
            mtsEventsWriteDescription v=std::vector< mtsEventWriteDescription,std::allocator< mtsEventWriteDescription > >())
        __setslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, std::vector< mtsEventWriteDescription >::difference_type j)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i)
        __delitem__(mtsEventsWriteDescription self, PySliceObject * slice)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(mtsEventsWriteDescription self, PySliceObject * slice) -> mtsEventsWriteDescription
        __getitem__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i) -> mtsEventWriteDescription
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(mtsEventsWriteDescription self, PySliceObject * slice, mtsEventsWriteDescription v)
        __setitem__(mtsEventsWriteDescription self, PySliceObject * slice)
        __setitem__(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::difference_type i, mtsEventWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription___setitem__(self, *args)

    def append(self, *args):
        """append(mtsEventsWriteDescription self, mtsEventWriteDescription x)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_append(self, *args)

    def empty(self):
        """empty(mtsEventsWriteDescription self) -> bool"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_empty(self)

    def size(self):
        """size(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_size(self)

    def clear(self):
        """clear(mtsEventsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_clear(self)

    def swap(self, *args):
        """swap(mtsEventsWriteDescription self, mtsEventsWriteDescription v)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_swap(self, *args)

    def get_allocator(self):
        """get_allocator(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::allocator_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_get_allocator(self)

    def begin(self):
        """begin(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_begin(self)

    def end(self):
        """end(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_end(self)

    def rbegin(self):
        """rbegin(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_rbegin(self)

    def rend(self):
        """rend(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::reverse_iterator"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_rend(self)

    def pop_back(self):
        """pop_back(mtsEventsWriteDescription self)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_pop_back(self)

    def erase(self, *args):
        """
        erase(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator pos) -> std::vector< mtsEventWriteDescription >::iterator
        erase(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator first, std::vector< mtsEventWriteDescription >::iterator last) -> std::vector< mtsEventWriteDescription >::iterator
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(mtsEventWriteDescription)> self) -> mtsEventsWriteDescription
        __init__(std::vector<(mtsEventWriteDescription)> self, mtsEventsWriteDescription arg2) -> mtsEventsWriteDescription
        __init__(std::vector<(mtsEventWriteDescription)> self, std::vector< mtsEventWriteDescription >::size_type size) -> mtsEventsWriteDescription
        __init__(std::vector<(mtsEventWriteDescription)> self, std::vector< mtsEventWriteDescription >::size_type size, mtsEventWriteDescription value) -> mtsEventsWriteDescription
        """
        this = _cisstMultiTaskPython.new_mtsEventsWriteDescription(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(mtsEventsWriteDescription self, mtsEventWriteDescription x)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_push_back(self, *args)

    def front(self):
        """front(mtsEventsWriteDescription self) -> mtsEventWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_front(self)

    def back(self):
        """back(mtsEventsWriteDescription self) -> mtsEventWriteDescription"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_back(self)

    def assign(self, *args):
        """assign(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type n, mtsEventWriteDescription x)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_assign(self, *args)

    def resize(self, *args):
        """
        resize(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type new_size)
        resize(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type new_size, mtsEventWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription_resize(self, *args)

    def insert(self, *args):
        """
        insert(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator pos, mtsEventWriteDescription x) -> std::vector< mtsEventWriteDescription >::iterator
        insert(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::iterator pos, std::vector< mtsEventWriteDescription >::size_type n, 
            mtsEventWriteDescription x)
        """
        return _cisstMultiTaskPython.mtsEventsWriteDescription_insert(self, *args)

    def reserve(self, *args):
        """reserve(mtsEventsWriteDescription self, std::vector< mtsEventWriteDescription >::size_type n)"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_reserve(self, *args)

    def capacity(self):
        """capacity(mtsEventsWriteDescription self) -> std::vector< mtsEventWriteDescription >::size_type"""
        return _cisstMultiTaskPython.mtsEventsWriteDescription_capacity(self)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsEventsWriteDescription
    __del__ = lambda self : None;
mtsEventsWriteDescription_swigregister = _cisstMultiTaskPython.mtsEventsWriteDescription_swigregister
mtsEventsWriteDescription_swigregister(mtsEventsWriteDescription)

class mtsDoubleVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(double)> self) -> mtsDoubleVec
        __init__(mtsVector<(double)> self, mtsVector< double >::size_type size) -> mtsDoubleVec
        __init__(mtsVector<(double)> self, mtsDoubleVec otherVector) -> mtsDoubleVec
        __init__(mtsVector<(double)> self, mtsVector< double >::VectorType const & otherVector) -> mtsDoubleVec
        """
        this = _cisstMultiTaskPython.new_mtsDoubleVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsDoubleVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsDoubleVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsDoubleVec self) -> mtsVector< double >::VectorType
        Data(mtsDoubleVec self) -> mtsVector< double >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsDoubleVec_Data(self, *args)

mtsDoubleVec_swigregister = _cisstMultiTaskPython.mtsDoubleVec_swigregister
mtsDoubleVec_swigregister(mtsDoubleVec)

def mtsDoubleVec_ClassServices():
  """mtsDoubleVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleVec_ClassServices()

class mtsFloatVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(float)> self) -> mtsFloatVec
        __init__(mtsVector<(float)> self, mtsVector< float >::size_type size) -> mtsFloatVec
        __init__(mtsVector<(float)> self, mtsFloatVec otherVector) -> mtsFloatVec
        __init__(mtsVector<(float)> self, mtsVector< float >::VectorType const & otherVector) -> mtsFloatVec
        """
        this = _cisstMultiTaskPython.new_mtsFloatVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsFloatVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsFloatVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsFloatVec self) -> mtsVector< float >::VectorType
        Data(mtsFloatVec self) -> mtsVector< float >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsFloatVec_Data(self, *args)

mtsFloatVec_swigregister = _cisstMultiTaskPython.mtsFloatVec_swigregister
mtsFloatVec_swigregister(mtsFloatVec)

def mtsFloatVec_ClassServices():
  """mtsFloatVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatVec_ClassServices()

class mtsLongVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLongVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsLongVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLongVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(long)> self) -> mtsLongVec
        __init__(mtsVector<(long)> self, mtsVector< long >::size_type size) -> mtsLongVec
        __init__(mtsVector<(long)> self, mtsLongVec otherVector) -> mtsLongVec
        __init__(mtsVector<(long)> self, mtsVector< long >::VectorType const & otherVector) -> mtsLongVec
        """
        this = _cisstMultiTaskPython.new_mtsLongVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLongVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsLongVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsLongVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsLongVec self) -> mtsVector< long >::VectorType
        Data(mtsLongVec self) -> mtsVector< long >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsLongVec_Data(self, *args)

mtsLongVec_swigregister = _cisstMultiTaskPython.mtsLongVec_swigregister
mtsLongVec_swigregister(mtsLongVec)

def mtsLongVec_ClassServices():
  """mtsLongVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsLongVec_ClassServices()

class mtsULongVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsULongVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsULongVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsULongVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(unsigned long)> self) -> mtsULongVec
        __init__(mtsVector<(unsigned long)> self, mtsVector< unsigned long >::size_type size) -> mtsULongVec
        __init__(mtsVector<(unsigned long)> self, mtsULongVec otherVector) -> mtsULongVec
        __init__(mtsVector<(unsigned long)> self, mtsVector< unsigned long >::VectorType const & otherVector) -> mtsULongVec
        """
        this = _cisstMultiTaskPython.new_mtsULongVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsULongVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsULongVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsULongVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsULongVec self) -> mtsVector< unsigned long >::VectorType
        Data(mtsULongVec self) -> mtsVector< unsigned long >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsULongVec_Data(self, *args)

mtsULongVec_swigregister = _cisstMultiTaskPython.mtsULongVec_swigregister
mtsULongVec_swigregister(mtsULongVec)

def mtsULongVec_ClassServices():
  """mtsULongVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsULongVec_ClassServices()

class mtsIntVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsIntVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(int)> self) -> mtsIntVec
        __init__(mtsVector<(int)> self, mtsVector< int >::size_type size) -> mtsIntVec
        __init__(mtsVector<(int)> self, mtsIntVec otherVector) -> mtsIntVec
        __init__(mtsVector<(int)> self, mtsVector< int >::VectorType const & otherVector) -> mtsIntVec
        """
        this = _cisstMultiTaskPython.new_mtsIntVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsIntVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsIntVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsIntVec self) -> mtsVector< int >::VectorType
        Data(mtsIntVec self) -> mtsVector< int >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsIntVec_Data(self, *args)

mtsIntVec_swigregister = _cisstMultiTaskPython.mtsIntVec_swigregister
mtsIntVec_swigregister(mtsIntVec)

def mtsIntVec_ClassServices():
  """mtsIntVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsIntVec_ClassServices()

class mtsUIntVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUIntVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUIntVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUIntVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(unsigned int)> self) -> mtsUIntVec
        __init__(mtsVector<(unsigned int)> self, mtsVector< unsigned int >::size_type size) -> mtsUIntVec
        __init__(mtsVector<(unsigned int)> self, mtsUIntVec otherVector) -> mtsUIntVec
        __init__(mtsVector<(unsigned int)> self, mtsVector< unsigned int >::VectorType const & otherVector) -> mtsUIntVec
        """
        this = _cisstMultiTaskPython.new_mtsUIntVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUIntVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsUIntVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsUIntVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsUIntVec self) -> mtsVector< unsigned int >::VectorType
        Data(mtsUIntVec self) -> mtsVector< unsigned int >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsUIntVec_Data(self, *args)

mtsUIntVec_swigregister = _cisstMultiTaskPython.mtsUIntVec_swigregister
mtsUIntVec_swigregister(mtsUIntVec)

def mtsUIntVec_ClassServices():
  """mtsUIntVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUIntVec_ClassServices()

class mtsShortVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShortVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsShortVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShortVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(short)> self) -> mtsShortVec
        __init__(mtsVector<(short)> self, mtsVector< short >::size_type size) -> mtsShortVec
        __init__(mtsVector<(short)> self, mtsShortVec otherVector) -> mtsShortVec
        __init__(mtsVector<(short)> self, mtsVector< short >::VectorType const & otherVector) -> mtsShortVec
        """
        this = _cisstMultiTaskPython.new_mtsShortVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShortVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsShortVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsShortVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsShortVec self) -> mtsVector< short >::VectorType
        Data(mtsShortVec self) -> mtsVector< short >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsShortVec_Data(self, *args)

mtsShortVec_swigregister = _cisstMultiTaskPython.mtsShortVec_swigregister
mtsShortVec_swigregister(mtsShortVec)

def mtsShortVec_ClassServices():
  """mtsShortVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsShortVec_ClassServices()

class mtsUShortVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(unsigned short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUShortVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUShortVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUShortVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(unsigned short)> self) -> mtsUShortVec
        __init__(mtsVector<(unsigned short)> self, mtsVector< unsigned short >::size_type size) -> mtsUShortVec
        __init__(mtsVector<(unsigned short)> self, mtsUShortVec otherVector) -> mtsUShortVec
        __init__(mtsVector<(unsigned short)> self, mtsVector< unsigned short >::VectorType const & otherVector) -> mtsUShortVec
        """
        this = _cisstMultiTaskPython.new_mtsUShortVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUShortVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsUShortVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsUShortVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsUShortVec self) -> mtsVector< unsigned short >::VectorType
        Data(mtsUShortVec self) -> mtsVector< unsigned short >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsUShortVec_Data(self, *args)

mtsUShortVec_swigregister = _cisstMultiTaskPython.mtsUShortVec_swigregister
mtsUShortVec_swigregister(mtsUShortVec)

def mtsUShortVec_ClassServices():
  """mtsUShortVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUShortVec_ClassServices()

class mtsCharVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsCharVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsCharVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsCharVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(char)> self) -> mtsCharVec
        __init__(mtsVector<(char)> self, mtsVector< char >::size_type size) -> mtsCharVec
        __init__(mtsVector<(char)> self, mtsCharVec otherVector) -> mtsCharVec
        __init__(mtsVector<(char)> self, mtsVector< char >::VectorType const & otherVector) -> mtsCharVec
        """
        this = _cisstMultiTaskPython.new_mtsCharVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsCharVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsCharVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsCharVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsCharVec self) -> mtsVector< char >::VectorType
        Data(mtsCharVec self) -> mtsVector< char >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsCharVec_Data(self, *args)

mtsCharVec_swigregister = _cisstMultiTaskPython.mtsCharVec_swigregister
mtsCharVec_swigregister(mtsCharVec)

def mtsCharVec_ClassServices():
  """mtsCharVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsCharVec_ClassServices()

class mtsUCharVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(unsigned char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsUCharVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsUCharVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsUCharVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(unsigned char)> self) -> mtsUCharVec
        __init__(mtsVector<(unsigned char)> self, mtsVector< unsigned char >::size_type size) -> mtsUCharVec
        __init__(mtsVector<(unsigned char)> self, mtsUCharVec otherVector) -> mtsUCharVec
        __init__(mtsVector<(unsigned char)> self, mtsVector< unsigned char >::VectorType const & otherVector) -> mtsUCharVec
        """
        this = _cisstMultiTaskPython.new_mtsUCharVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsUCharVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsUCharVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsUCharVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsUCharVec self) -> mtsVector< unsigned char >::VectorType
        Data(mtsUCharVec self) -> mtsVector< unsigned char >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsUCharVec_Data(self, *args)

mtsUCharVec_swigregister = _cisstMultiTaskPython.mtsUCharVec_swigregister
mtsUCharVec_swigregister(mtsUCharVec)

def mtsUCharVec_ClassServices():
  """mtsUCharVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsUCharVec_ClassServices()

class mtsBoolVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(bool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsBoolVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsBoolVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsBoolVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(bool)> self) -> mtsBoolVec
        __init__(mtsVector<(bool)> self, mtsVector< bool >::size_type size) -> mtsBoolVec
        __init__(mtsVector<(bool)> self, mtsBoolVec otherVector) -> mtsBoolVec
        __init__(mtsVector<(bool)> self, mtsVector< bool >::VectorType const & otherVector) -> mtsBoolVec
        """
        this = _cisstMultiTaskPython.new_mtsBoolVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsBoolVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsBoolVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsBoolVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsBoolVec self) -> mtsVector< bool >::VectorType
        Data(mtsBoolVec self) -> mtsVector< bool >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsBoolVec_Data(self, *args)

mtsBoolVec_swigregister = _cisstMultiTaskPython.mtsBoolVec_swigregister
mtsBoolVec_swigregister(mtsBoolVec)

def mtsBoolVec_ClassServices():
  """mtsBoolVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsBoolVec_ClassServices()

class mtsStdStringVec(mtsGenericObject):
    """Proxy of C++ mtsVector<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStdStringVec_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStdStringVec_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStdStringVec_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsVector<(std::string)> self) -> mtsStdStringVec
        __init__(mtsVector<(std::string)> self, mtsVector< std::string >::size_type size) -> mtsStdStringVec
        __init__(mtsVector<(std::string)> self, mtsStdStringVec otherVector) -> mtsStdStringVec
        __init__(mtsVector<(std::string)> self, mtsVector< std::string >::VectorType const & otherVector) -> mtsStdStringVec
        """
        this = _cisstMultiTaskPython.new_mtsStdStringVec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStdStringVec
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsStdStringVec self) -> std::string"""
        return _cisstMultiTaskPython.mtsStdStringVec___str__(self)

    def Data(self, *args):
        """
        Data(mtsStdStringVec self) -> mtsVector< std::string >::VectorType
        Data(mtsStdStringVec self) -> mtsVector< std::string >::VectorType const &
        """
        return _cisstMultiTaskPython.mtsStdStringVec_Data(self, *args)

mtsStdStringVec_swigregister = _cisstMultiTaskPython.mtsStdStringVec_swigregister
mtsStdStringVec_swigregister(mtsStdStringVec)

def mtsStdStringVec_ClassServices():
  """mtsStdStringVec_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStdStringVec_ClassServices()

class mtsDoubleMat(mtsGenericObject):
    """Proxy of C++ mtsMatrix<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    DIMENSION = _cisstMultiTaskPython.mtsDoubleMat_DIMENSION
    def __init__(self, *args): 
        """
        __init__(mtsMatrix<(double)> self) -> mtsDoubleMat
        __init__(mtsMatrix<(double)> self, mtsMatrix< double >::size_type rows, mtsMatrix< double >::size_type cols) -> mtsDoubleMat
        __init__(mtsMatrix<(double)> self, mtsMatrix< double >::nsize_type const & size) -> mtsDoubleMat
        __init__(mtsMatrix<(double)> self, mtsDoubleMat otherMatrix) -> mtsDoubleMat
        __init__(mtsMatrix<(double)> self, mtsMatrix< double >::MatrixType const & otherMatrix) -> mtsDoubleMat
        """
        this = _cisstMultiTaskPython.new_mtsDoubleMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMat
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsDoubleMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsDoubleMat___str__(self)

    def Data(self, *args):
        """
        Data(mtsDoubleMat self) -> mtsMatrix< double >::MatrixType
        Data(mtsDoubleMat self) -> mtsMatrix< double >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsDoubleMat_Data(self, *args)

mtsDoubleMat_swigregister = _cisstMultiTaskPython.mtsDoubleMat_swigregister
mtsDoubleMat_swigregister(mtsDoubleMat)

def mtsDoubleMat_ClassServices():
  """mtsDoubleMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleMat_ClassServices()

class mtsIntMat(mtsGenericObject):
    """Proxy of C++ mtsMatrix<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsIntMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    DIMENSION = _cisstMultiTaskPython.mtsIntMat_DIMENSION
    def __init__(self, *args): 
        """
        __init__(mtsMatrix<(int)> self) -> mtsIntMat
        __init__(mtsMatrix<(int)> self, mtsMatrix< int >::size_type rows, mtsMatrix< int >::size_type cols) -> mtsIntMat
        __init__(mtsMatrix<(int)> self, mtsMatrix< int >::nsize_type const & size) -> mtsIntMat
        __init__(mtsMatrix<(int)> self, mtsIntMat otherMatrix) -> mtsIntMat
        __init__(mtsMatrix<(int)> self, mtsMatrix< int >::MatrixType const & otherMatrix) -> mtsIntMat
        """
        this = _cisstMultiTaskPython.new_mtsIntMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntMat
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsIntMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsIntMat___str__(self)

    def Data(self, *args):
        """
        Data(mtsIntMat self) -> mtsMatrix< int >::MatrixType
        Data(mtsIntMat self) -> mtsMatrix< int >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsIntMat_Data(self, *args)

mtsIntMat_swigregister = _cisstMultiTaskPython.mtsIntMat_swigregister
mtsIntMat_swigregister(mtsIntMat)

def mtsIntMat_ClassServices():
  """mtsIntMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsIntMat_ClassServices()

class mtsShortMat(mtsGenericObject):
    """Proxy of C++ mtsMatrix<(short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsShortMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsShortMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsShortMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    DIMENSION = _cisstMultiTaskPython.mtsShortMat_DIMENSION
    def __init__(self, *args): 
        """
        __init__(mtsMatrix<(short)> self) -> mtsShortMat
        __init__(mtsMatrix<(short)> self, mtsMatrix< short >::size_type rows, mtsMatrix< short >::size_type cols) -> mtsShortMat
        __init__(mtsMatrix<(short)> self, mtsMatrix< short >::nsize_type const & size) -> mtsShortMat
        __init__(mtsMatrix<(short)> self, mtsShortMat otherMatrix) -> mtsShortMat
        __init__(mtsMatrix<(short)> self, mtsMatrix< short >::MatrixType const & otherMatrix) -> mtsShortMat
        """
        this = _cisstMultiTaskPython.new_mtsShortMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsShortMat
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsShortMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsShortMat___str__(self)

    def Data(self, *args):
        """
        Data(mtsShortMat self) -> mtsMatrix< short >::MatrixType
        Data(mtsShortMat self) -> mtsMatrix< short >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsShortMat_Data(self, *args)

mtsShortMat_swigregister = _cisstMultiTaskPython.mtsShortMat_swigregister
mtsShortMat_swigregister(mtsShortMat)

def mtsShortMat_ClassServices():
  """mtsShortMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsShortMat_ClassServices()

class mtsLongMat(mtsGenericObject):
    """Proxy of C++ mtsMatrix<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsLongMat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsLongMat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsLongMat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    DIMENSION = _cisstMultiTaskPython.mtsLongMat_DIMENSION
    def __init__(self, *args): 
        """
        __init__(mtsMatrix<(long)> self) -> mtsLongMat
        __init__(mtsMatrix<(long)> self, mtsMatrix< long >::size_type rows, mtsMatrix< long >::size_type cols) -> mtsLongMat
        __init__(mtsMatrix<(long)> self, mtsMatrix< long >::nsize_type const & size) -> mtsLongMat
        __init__(mtsMatrix<(long)> self, mtsLongMat otherMatrix) -> mtsLongMat
        __init__(mtsMatrix<(long)> self, mtsMatrix< long >::MatrixType const & otherMatrix) -> mtsLongMat
        """
        this = _cisstMultiTaskPython.new_mtsLongMat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsLongMat
    __del__ = lambda self : None;
    def __str__(self):
        """__str__(mtsLongMat self) -> std::string"""
        return _cisstMultiTaskPython.mtsLongMat___str__(self)

    def Data(self, *args):
        """
        Data(mtsLongMat self) -> mtsMatrix< long >::MatrixType
        Data(mtsLongMat self) -> mtsMatrix< long >::MatrixType const &
        """
        return _cisstMultiTaskPython.mtsLongMat_Data(self, *args)

mtsLongMat_swigregister = _cisstMultiTaskPython.mtsLongMat_swigregister
mtsLongMat_swigregister(mtsLongMat)

def mtsLongMat_ClassServices():
  """mtsLongMat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsLongMat_ClassServices()

class mtsDoubleQuat(mtsGenericObject):
    """Proxy of C++ mtsDoubleQuat class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleQuat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleQuat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleQuat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleQuat self) -> mtsDoubleQuat
        __init__(mtsDoubleQuat self, vctDoubleQuat const & other) -> mtsDoubleQuat
        """
        this = _cisstMultiTaskPython.new_mtsDoubleQuat(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleQuat self) -> vctDoubleQuat
        Data(mtsDoubleQuat self) -> vctDoubleQuat const &
        """
        return _cisstMultiTaskPython.mtsDoubleQuat_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleQuat
    __del__ = lambda self : None;
mtsDoubleQuat_swigregister = _cisstMultiTaskPython.mtsDoubleQuat_swigregister
mtsDoubleQuat_swigregister(mtsDoubleQuat)

def mtsDoubleQuat_ClassServices():
  """mtsDoubleQuat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleQuat_ClassServices()

class mtsFloatQuat(mtsGenericObject):
    """Proxy of C++ mtsFloatQuat class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatQuat_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatQuat_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatQuat_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatQuat self) -> mtsFloatQuat
        __init__(mtsFloatQuat self, vctFloatQuat const & other) -> mtsFloatQuat
        """
        this = _cisstMultiTaskPython.new_mtsFloatQuat(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatQuat self) -> vctFloatQuat
        Data(mtsFloatQuat self) -> vctFloatQuat const &
        """
        return _cisstMultiTaskPython.mtsFloatQuat_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatQuat
    __del__ = lambda self : None;
mtsFloatQuat_swigregister = _cisstMultiTaskPython.mtsFloatQuat_swigregister
mtsFloatQuat_swigregister(mtsFloatQuat)

def mtsFloatQuat_ClassServices():
  """mtsFloatQuat_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatQuat_ClassServices()

class mtsDoubleQuatRot3(mtsGenericObject):
    """Proxy of C++ mtsDoubleQuatRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleQuatRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleQuatRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleQuatRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleQuatRot3 self) -> mtsDoubleQuatRot3
        __init__(mtsDoubleQuatRot3 self, vctDoubleQuatRot3 const & other) -> mtsDoubleQuatRot3
        """
        this = _cisstMultiTaskPython.new_mtsDoubleQuatRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleQuatRot3 self) -> vctDoubleQuatRot3
        Data(mtsDoubleQuatRot3 self) -> vctDoubleQuatRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleQuatRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleQuatRot3
    __del__ = lambda self : None;
mtsDoubleQuatRot3_swigregister = _cisstMultiTaskPython.mtsDoubleQuatRot3_swigregister
mtsDoubleQuatRot3_swigregister(mtsDoubleQuatRot3)

def mtsDoubleQuatRot3_ClassServices():
  """mtsDoubleQuatRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleQuatRot3_ClassServices()

class mtsFloatQuatRot3(mtsGenericObject):
    """Proxy of C++ mtsFloatQuatRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatQuatRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatQuatRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatQuatRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatQuatRot3 self) -> mtsFloatQuatRot3
        __init__(mtsFloatQuatRot3 self, vctFloatQuatRot3 const & other) -> mtsFloatQuatRot3
        """
        this = _cisstMultiTaskPython.new_mtsFloatQuatRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatQuatRot3 self) -> vctFloatQuatRot3
        Data(mtsFloatQuatRot3 self) -> vctFloatQuatRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatQuatRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatQuatRot3
    __del__ = lambda self : None;
mtsFloatQuatRot3_swigregister = _cisstMultiTaskPython.mtsFloatQuatRot3_swigregister
mtsFloatQuatRot3_swigregister(mtsFloatQuatRot3)

def mtsFloatQuatRot3_ClassServices():
  """mtsFloatQuatRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatQuatRot3_ClassServices()

class mtsDoubleAxAnRot3(mtsGenericObject):
    """Proxy of C++ mtsDoubleAxAnRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleAxAnRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleAxAnRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleAxAnRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleAxAnRot3 self) -> mtsDoubleAxAnRot3
        __init__(mtsDoubleAxAnRot3 self, vctDoubleAxAnRot3 const & other) -> mtsDoubleAxAnRot3
        """
        this = _cisstMultiTaskPython.new_mtsDoubleAxAnRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleAxAnRot3 self) -> vctDoubleAxAnRot3
        Data(mtsDoubleAxAnRot3 self) -> vctDoubleAxAnRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleAxAnRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleAxAnRot3
    __del__ = lambda self : None;
mtsDoubleAxAnRot3_swigregister = _cisstMultiTaskPython.mtsDoubleAxAnRot3_swigregister
mtsDoubleAxAnRot3_swigregister(mtsDoubleAxAnRot3)

def mtsDoubleAxAnRot3_ClassServices():
  """mtsDoubleAxAnRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleAxAnRot3_ClassServices()

class mtsFloatAxAnRot3(mtsGenericObject):
    """Proxy of C++ mtsFloatAxAnRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatAxAnRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatAxAnRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatAxAnRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatAxAnRot3 self) -> mtsFloatAxAnRot3
        __init__(mtsFloatAxAnRot3 self, vctFloatAxAnRot3 const & other) -> mtsFloatAxAnRot3
        """
        this = _cisstMultiTaskPython.new_mtsFloatAxAnRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatAxAnRot3 self) -> vctFloatAxAnRot3
        Data(mtsFloatAxAnRot3 self) -> vctFloatAxAnRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatAxAnRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatAxAnRot3
    __del__ = lambda self : None;
mtsFloatAxAnRot3_swigregister = _cisstMultiTaskPython.mtsFloatAxAnRot3_swigregister
mtsFloatAxAnRot3_swigregister(mtsFloatAxAnRot3)

def mtsFloatAxAnRot3_ClassServices():
  """mtsFloatAxAnRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatAxAnRot3_ClassServices()

class mtsDoubleRodRot3(mtsGenericObject):
    """Proxy of C++ mtsDoubleRodRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleRodRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleRodRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleRodRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleRodRot3 self) -> mtsDoubleRodRot3
        __init__(mtsDoubleRodRot3 self, vctDoubleRodRot3 const & other) -> mtsDoubleRodRot3
        """
        this = _cisstMultiTaskPython.new_mtsDoubleRodRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleRodRot3 self) -> vctDoubleRodRot3
        Data(mtsDoubleRodRot3 self) -> vctDoubleRodRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleRodRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleRodRot3
    __del__ = lambda self : None;
mtsDoubleRodRot3_swigregister = _cisstMultiTaskPython.mtsDoubleRodRot3_swigregister
mtsDoubleRodRot3_swigregister(mtsDoubleRodRot3)

def mtsDoubleRodRot3_ClassServices():
  """mtsDoubleRodRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleRodRot3_ClassServices()

class mtsFloatRodRot3(mtsGenericObject):
    """Proxy of C++ mtsFloatRodRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatRodRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatRodRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatRodRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatRodRot3 self) -> mtsFloatRodRot3
        __init__(mtsFloatRodRot3 self, vctFloatRodRot3 const & other) -> mtsFloatRodRot3
        """
        this = _cisstMultiTaskPython.new_mtsFloatRodRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatRodRot3 self) -> vctFloatRodRot3
        Data(mtsFloatRodRot3 self) -> vctFloatRodRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatRodRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatRodRot3
    __del__ = lambda self : None;
mtsFloatRodRot3_swigregister = _cisstMultiTaskPython.mtsFloatRodRot3_swigregister
mtsFloatRodRot3_swigregister(mtsFloatRodRot3)

def mtsFloatRodRot3_ClassServices():
  """mtsFloatRodRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatRodRot3_ClassServices()

class mtsDoubleMatRot3(mtsGenericObject):
    """Proxy of C++ mtsDoubleMatRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMatRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMatRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMatRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleMatRot3 self) -> mtsDoubleMatRot3
        __init__(mtsDoubleMatRot3 self, vctDoubleMatRot3 const & other) -> mtsDoubleMatRot3
        """
        this = _cisstMultiTaskPython.new_mtsDoubleMatRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleMatRot3 self) -> vctDoubleMatRot3
        Data(mtsDoubleMatRot3 self) -> vctDoubleMatRot3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleMatRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMatRot3
    __del__ = lambda self : None;
mtsDoubleMatRot3_swigregister = _cisstMultiTaskPython.mtsDoubleMatRot3_swigregister
mtsDoubleMatRot3_swigregister(mtsDoubleMatRot3)

def mtsDoubleMatRot3_ClassServices():
  """mtsDoubleMatRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleMatRot3_ClassServices()

class mtsFloatMatRot3(mtsGenericObject):
    """Proxy of C++ mtsFloatMatRot3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatMatRot3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatMatRot3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatMatRot3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatMatRot3 self) -> mtsFloatMatRot3
        __init__(mtsFloatMatRot3 self, vctFloatMatRot3 const & other) -> mtsFloatMatRot3
        """
        this = _cisstMultiTaskPython.new_mtsFloatMatRot3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatMatRot3 self) -> vctFloatMatRot3
        Data(mtsFloatMatRot3 self) -> vctFloatMatRot3 const &
        """
        return _cisstMultiTaskPython.mtsFloatMatRot3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatMatRot3
    __del__ = lambda self : None;
mtsFloatMatRot3_swigregister = _cisstMultiTaskPython.mtsFloatMatRot3_swigregister
mtsFloatMatRot3_swigregister(mtsFloatMatRot3)

def mtsFloatMatRot3_ClassServices():
  """mtsFloatMatRot3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatMatRot3_ClassServices()

class mtsDoubleQuatFrm3(mtsGenericObject):
    """Proxy of C++ mtsDoubleQuatFrm3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleQuatFrm3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleQuatFrm3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleQuatFrm3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleQuatFrm3 self) -> mtsDoubleQuatFrm3
        __init__(mtsDoubleQuatFrm3 self, vctDoubleQuatFrm3 const & other) -> mtsDoubleQuatFrm3
        """
        this = _cisstMultiTaskPython.new_mtsDoubleQuatFrm3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleQuatFrm3 self) -> vctDoubleQuatFrm3
        Data(mtsDoubleQuatFrm3 self) -> vctDoubleQuatFrm3 const &
        """
        return _cisstMultiTaskPython.mtsDoubleQuatFrm3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleQuatFrm3
    __del__ = lambda self : None;
mtsDoubleQuatFrm3_swigregister = _cisstMultiTaskPython.mtsDoubleQuatFrm3_swigregister
mtsDoubleQuatFrm3_swigregister(mtsDoubleQuatFrm3)

def mtsDoubleQuatFrm3_ClassServices():
  """mtsDoubleQuatFrm3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleQuatFrm3_ClassServices()

class mtsFloatQuatFrm3(mtsGenericObject):
    """Proxy of C++ mtsFloatQuatFrm3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatQuatFrm3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatQuatFrm3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatQuatFrm3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatQuatFrm3 self) -> mtsFloatQuatFrm3
        __init__(mtsFloatQuatFrm3 self, vctFloatQuatFrm3 const & other) -> mtsFloatQuatFrm3
        """
        this = _cisstMultiTaskPython.new_mtsFloatQuatFrm3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatQuatFrm3 self) -> vctFloatQuatFrm3
        Data(mtsFloatQuatFrm3 self) -> vctFloatQuatFrm3 const &
        """
        return _cisstMultiTaskPython.mtsFloatQuatFrm3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatQuatFrm3
    __del__ = lambda self : None;
mtsFloatQuatFrm3_swigregister = _cisstMultiTaskPython.mtsFloatQuatFrm3_swigregister
mtsFloatQuatFrm3_swigregister(mtsFloatQuatFrm3)

def mtsFloatQuatFrm3_ClassServices():
  """mtsFloatQuatFrm3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatQuatFrm3_ClassServices()

class mtsDoubleMatFrm3(mtsGenericObject,cisstVectorPython.vctFrm3):
    """Proxy of C++ mtsDoubleMatFrm3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMatFrm3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMatFrm3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMatFrm3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleMatFrm3 self) -> mtsDoubleMatFrm3
        __init__(mtsDoubleMatFrm3 self, vctFrm3 other) -> mtsDoubleMatFrm3
        """
        this = _cisstMultiTaskPython.new_mtsDoubleMatFrm3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleMatFrm3 self) -> vctFrm3
        Data(mtsDoubleMatFrm3 self) -> vctFrm3
        """
        return _cisstMultiTaskPython.mtsDoubleMatFrm3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMatFrm3
    __del__ = lambda self : None;
mtsDoubleMatFrm3_swigregister = _cisstMultiTaskPython.mtsDoubleMatFrm3_swigregister
mtsDoubleMatFrm3_swigregister(mtsDoubleMatFrm3)

def mtsDoubleMatFrm3_ClassServices():
  """mtsDoubleMatFrm3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleMatFrm3_ClassServices()

class mtsFloatMatFrm3(mtsGenericObject):
    """Proxy of C++ mtsFloatMatFrm3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatMatFrm3_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatMatFrm3_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatMatFrm3_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatMatFrm3 self) -> mtsFloatMatFrm3
        __init__(mtsFloatMatFrm3 self, vctFloatMatFrm3 const & other) -> mtsFloatMatFrm3
        """
        this = _cisstMultiTaskPython.new_mtsFloatMatFrm3(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatMatFrm3 self) -> vctFloatMatFrm3
        Data(mtsFloatMatFrm3 self) -> vctFloatMatFrm3 const &
        """
        return _cisstMultiTaskPython.mtsFloatMatFrm3_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatMatFrm3
    __del__ = lambda self : None;
mtsFloatMatFrm3_swigregister = _cisstMultiTaskPython.mtsFloatMatFrm3_swigregister
mtsFloatMatFrm3_swigregister(mtsFloatMatFrm3)

def mtsFloatMatFrm3_ClassServices():
  """mtsFloatMatFrm3_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatMatFrm3_ClassServices()

class mtsDoubleFrm4x4(mtsGenericObject):
    """Proxy of C++ mtsDoubleFrm4x4 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleFrm4x4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleFrm4x4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleFrm4x4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleFrm4x4 self) -> mtsDoubleFrm4x4
        __init__(mtsDoubleFrm4x4 self, vctDoubleFrm4x4 const & other) -> mtsDoubleFrm4x4
        """
        this = _cisstMultiTaskPython.new_mtsDoubleFrm4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleFrm4x4 self) -> vctDoubleFrm4x4
        Data(mtsDoubleFrm4x4 self) -> vctDoubleFrm4x4 const &
        """
        return _cisstMultiTaskPython.mtsDoubleFrm4x4_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleFrm4x4
    __del__ = lambda self : None;
mtsDoubleFrm4x4_swigregister = _cisstMultiTaskPython.mtsDoubleFrm4x4_swigregister
mtsDoubleFrm4x4_swigregister(mtsDoubleFrm4x4)

def mtsDoubleFrm4x4_ClassServices():
  """mtsDoubleFrm4x4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleFrm4x4_ClassServices()

class mtsFloatFrm4x4(mtsGenericObject):
    """Proxy of C++ mtsFloatFrm4x4 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatFrm4x4_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatFrm4x4_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatFrm4x4_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatFrm4x4 self) -> mtsFloatFrm4x4
        __init__(mtsFloatFrm4x4 self, vctFloatFrm4x4 const & other) -> mtsFloatFrm4x4
        """
        this = _cisstMultiTaskPython.new_mtsFloatFrm4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatFrm4x4 self) -> vctFloatFrm4x4
        Data(mtsFloatFrm4x4 self) -> vctFloatFrm4x4 const &
        """
        return _cisstMultiTaskPython.mtsFloatFrm4x4_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatFrm4x4
    __del__ = lambda self : None;
mtsFloatFrm4x4_swigregister = _cisstMultiTaskPython.mtsFloatFrm4x4_swigregister
mtsFloatFrm4x4_swigregister(mtsFloatFrm4x4)

def mtsFloatFrm4x4_ClassServices():
  """mtsFloatFrm4x4_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatFrm4x4_ClassServices()

class mtsDoubleAnRot2(mtsGenericObject):
    """Proxy of C++ mtsDoubleAnRot2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleAnRot2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleAnRot2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleAnRot2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleAnRot2 self) -> mtsDoubleAnRot2
        __init__(mtsDoubleAnRot2 self, vctDoubleAnRot2 const & other) -> mtsDoubleAnRot2
        """
        this = _cisstMultiTaskPython.new_mtsDoubleAnRot2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleAnRot2 self) -> vctDoubleAnRot2
        Data(mtsDoubleAnRot2 self) -> vctDoubleAnRot2 const &
        """
        return _cisstMultiTaskPython.mtsDoubleAnRot2_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleAnRot2
    __del__ = lambda self : None;
mtsDoubleAnRot2_swigregister = _cisstMultiTaskPython.mtsDoubleAnRot2_swigregister
mtsDoubleAnRot2_swigregister(mtsDoubleAnRot2)

def mtsDoubleAnRot2_ClassServices():
  """mtsDoubleAnRot2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleAnRot2_ClassServices()

class mtsFloatAnRot2(mtsGenericObject):
    """Proxy of C++ mtsFloatAnRot2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatAnRot2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatAnRot2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatAnRot2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatAnRot2 self) -> mtsFloatAnRot2
        __init__(mtsFloatAnRot2 self, vctFloatAnRot2 const & other) -> mtsFloatAnRot2
        """
        this = _cisstMultiTaskPython.new_mtsFloatAnRot2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatAnRot2 self) -> vctFloatAnRot2
        Data(mtsFloatAnRot2 self) -> vctFloatAnRot2 const &
        """
        return _cisstMultiTaskPython.mtsFloatAnRot2_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatAnRot2
    __del__ = lambda self : None;
mtsFloatAnRot2_swigregister = _cisstMultiTaskPython.mtsFloatAnRot2_swigregister
mtsFloatAnRot2_swigregister(mtsFloatAnRot2)

def mtsFloatAnRot2_ClassServices():
  """mtsFloatAnRot2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatAnRot2_ClassServices()

class mtsDoubleMatRot2(mtsGenericObject):
    """Proxy of C++ mtsDoubleMatRot2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsDoubleMatRot2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsDoubleMatRot2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsDoubleMatRot2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsDoubleMatRot2 self) -> mtsDoubleMatRot2
        __init__(mtsDoubleMatRot2 self, vctDoubleMatRot2 const & other) -> mtsDoubleMatRot2
        """
        this = _cisstMultiTaskPython.new_mtsDoubleMatRot2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsDoubleMatRot2 self) -> vctDoubleMatRot2
        Data(mtsDoubleMatRot2 self) -> vctDoubleMatRot2 const &
        """
        return _cisstMultiTaskPython.mtsDoubleMatRot2_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsDoubleMatRot2
    __del__ = lambda self : None;
mtsDoubleMatRot2_swigregister = _cisstMultiTaskPython.mtsDoubleMatRot2_swigregister
mtsDoubleMatRot2_swigregister(mtsDoubleMatRot2)

def mtsDoubleMatRot2_ClassServices():
  """mtsDoubleMatRot2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsDoubleMatRot2_ClassServices()

class mtsFloatMatRot2(mtsGenericObject):
    """Proxy of C++ mtsFloatMatRot2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsFloatMatRot2_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsFloatMatRot2_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsFloatMatRot2_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsFloatMatRot2 self) -> mtsFloatMatRot2
        __init__(mtsFloatMatRot2 self, vctFloatMatRot2 const & other) -> mtsFloatMatRot2
        """
        this = _cisstMultiTaskPython.new_mtsFloatMatRot2(*args)
        try: self.this.append(this)
        except: self.this = this
    def Data(self, *args):
        """
        Data(mtsFloatMatRot2 self) -> vctFloatMatRot2
        Data(mtsFloatMatRot2 self) -> vctFloatMatRot2 const &
        """
        return _cisstMultiTaskPython.mtsFloatMatRot2_Data(self, *args)

    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsFloatMatRot2
    __del__ = lambda self : None;
mtsFloatMatRot2_swigregister = _cisstMultiTaskPython.mtsFloatMatRot2_swigregister
mtsFloatMatRot2_swigregister(mtsFloatMatRot2)

def mtsFloatMatRot2_ClassServices():
  """mtsFloatMatRot2_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsFloatMatRot2_ClassServices()

class mtsStateIndex(mtsGenericObject):
    """Proxy of C++ mtsStateIndex class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsStateIndex_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsStateIndex_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsStateIndex_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self, *args): 
        """
        __init__(mtsStateIndex self) -> mtsStateIndex
        __init__(mtsStateIndex self, double timestamp, int index, mtsStateIndex::TimeTicksType ticks, int Length) -> mtsStateIndex
        """
        this = _cisstMultiTaskPython.new_mtsStateIndex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsStateIndex
    __del__ = lambda self : None;
    def Length(self):
        """Length(mtsStateIndex self) -> int"""
        return _cisstMultiTaskPython.mtsStateIndex_Length(self)

    def Index(self):
        """Index(mtsStateIndex self) -> int"""
        return _cisstMultiTaskPython.mtsStateIndex_Index(self)

    def Ticks(self):
        """Ticks(mtsStateIndex self) -> mtsStateIndex::TimeTicksType"""
        return _cisstMultiTaskPython.mtsStateIndex_Ticks(self)

    def __isub__(self, *args):
        """__isub__(mtsStateIndex self, int number) -> mtsStateIndex"""
        return _cisstMultiTaskPython.mtsStateIndex___isub__(self, *args)

    def __sub__(self, *args):
        """__sub__(mtsStateIndex self, int number) -> mtsStateIndex"""
        return _cisstMultiTaskPython.mtsStateIndex___sub__(self, *args)

    def __eq__(self, *args):
        """__eq__(mtsStateIndex self, mtsStateIndex that) -> bool"""
        return _cisstMultiTaskPython.mtsStateIndex___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(mtsStateIndex self, mtsStateIndex that) -> bool"""
        return _cisstMultiTaskPython.mtsStateIndex___ne__(self, *args)

mtsStateIndex_swigregister = _cisstMultiTaskPython.mtsStateIndex_swigregister
mtsStateIndex_swigregister(mtsStateIndex)

def mtsStateIndex_ClassServices():
  """mtsStateIndex_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsStateIndex_ClassServices()

class mtsIntervalStatistics(mtsGenericObject):
    """Proxy of C++ mtsIntervalStatistics class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstMultiTaskPython.mtsIntervalStatistics_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstMultiTaskPython.mtsIntervalStatistics_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def GetAvg(self):
        """GetAvg(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_GetAvg(self)

    def GetStdDev(self):
        """GetStdDev(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_GetStdDev(self)

    def GetMax(self):
        """GetMax(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_GetMax(self)

    def GetMin(self):
        """GetMin(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_GetMin(self)

    def MinComputeTime(self):
        """MinComputeTime(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_MinComputeTime(self)

    def MaxComputeTime(self):
        """MaxComputeTime(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_MaxComputeTime(self)

    def SetStatisticsUpdatePeriod(self, *args):
        """SetStatisticsUpdatePeriod(mtsIntervalStatistics self, double const & time)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_SetStatisticsUpdatePeriod(self, *args)

    def GetStatisticsUpdatePeriod(self):
        """GetStatisticsUpdatePeriod(mtsIntervalStatistics self) -> double"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_GetStatisticsUpdatePeriod(self)

    def AddSample(self, *args):
        """AddSample(mtsIntervalStatistics self, double const sample)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_AddSample(self, *args)

    def AddComputeTime(self, *args):
        """AddComputeTime(mtsIntervalStatistics self, double const computeTime)"""
        return _cisstMultiTaskPython.mtsIntervalStatistics_AddComputeTime(self, *args)

    def __init__(self): 
        """__init__(mtsIntervalStatistics self) -> mtsIntervalStatistics"""
        this = _cisstMultiTaskPython.new_mtsIntervalStatistics()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstMultiTaskPython.delete_mtsIntervalStatistics
    __del__ = lambda self : None;
mtsIntervalStatistics_swigregister = _cisstMultiTaskPython.mtsIntervalStatistics_swigregister
mtsIntervalStatistics_swigregister(mtsIntervalStatistics)

def mtsIntervalStatistics_ClassServices():
  """mtsIntervalStatistics_ClassServices() -> cmnClassServicesBase"""
  return _cisstMultiTaskPython.mtsIntervalStatistics_ClassServices()



