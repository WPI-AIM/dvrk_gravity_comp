# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstOSAbstractionPython', [dirname(__file__)])
        except ImportError:
            import _cisstOSAbstractionPython
            return _cisstOSAbstractionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_cisstOSAbstractionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cisstOSAbstractionPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstOSAbstractionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstOSAbstractionPython.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cisstOSAbstractionPython.SwigPyIterator_value(self)
    def incr(self, n=1): return _cisstOSAbstractionPython.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cisstOSAbstractionPython.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cisstOSAbstractionPython.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cisstOSAbstractionPython.SwigPyIterator_equal(self, *args)
    def copy(self): return _cisstOSAbstractionPython.SwigPyIterator_copy(self)
    def next(self): return _cisstOSAbstractionPython.SwigPyIterator_next(self)
    def __next__(self): return _cisstOSAbstractionPython.SwigPyIterator___next__(self)
    def previous(self): return _cisstOSAbstractionPython.SwigPyIterator_previous(self)
    def advance(self, *args): return _cisstOSAbstractionPython.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cisstOSAbstractionPython.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cisstOSAbstractionPython.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cisstOSAbstractionPython.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cisstOSAbstractionPython.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cisstOSAbstractionPython.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cisstOSAbstractionPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cisstOSAbstractionPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _cisstOSAbstractionPython.ios_base_erase_event
    imbue_event = _cisstOSAbstractionPython.ios_base_imbue_event
    copyfmt_event = _cisstOSAbstractionPython.ios_base_copyfmt_event
    def register_callback(self, *args): return _cisstOSAbstractionPython.ios_base_register_callback(self, *args)
    def flags(self, *args): return _cisstOSAbstractionPython.ios_base_flags(self, *args)
    def setf(self, *args): return _cisstOSAbstractionPython.ios_base_setf(self, *args)
    def unsetf(self, *args): return _cisstOSAbstractionPython.ios_base_unsetf(self, *args)
    def precision(self, *args): return _cisstOSAbstractionPython.ios_base_precision(self, *args)
    def width(self, *args): return _cisstOSAbstractionPython.ios_base_width(self, *args)
    sync_with_stdio = staticmethod(_cisstOSAbstractionPython.ios_base_sync_with_stdio)
    def imbue(self, *args): return _cisstOSAbstractionPython.ios_base_imbue(self, *args)
    def getloc(self): return _cisstOSAbstractionPython.ios_base_getloc(self)
    xalloc = staticmethod(_cisstOSAbstractionPython.ios_base_xalloc)
    def iword(self, *args): return _cisstOSAbstractionPython.ios_base_iword(self, *args)
    def pword(self, *args): return _cisstOSAbstractionPython.ios_base_pword(self, *args)
    __swig_destroy__ = _cisstOSAbstractionPython.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _cisstOSAbstractionPython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _cisstOSAbstractionPython.cvar
ios_base.boolalpha = _cisstOSAbstractionPython.cvar.ios_base_boolalpha
ios_base.dec = _cisstOSAbstractionPython.cvar.ios_base_dec
ios_base.fixed = _cisstOSAbstractionPython.cvar.ios_base_fixed
ios_base.hex = _cisstOSAbstractionPython.cvar.ios_base_hex
ios_base.internal = _cisstOSAbstractionPython.cvar.ios_base_internal
ios_base.left = _cisstOSAbstractionPython.cvar.ios_base_left
ios_base.oct = _cisstOSAbstractionPython.cvar.ios_base_oct
ios_base.right = _cisstOSAbstractionPython.cvar.ios_base_right
ios_base.scientific = _cisstOSAbstractionPython.cvar.ios_base_scientific
ios_base.showbase = _cisstOSAbstractionPython.cvar.ios_base_showbase
ios_base.showpoint = _cisstOSAbstractionPython.cvar.ios_base_showpoint
ios_base.showpos = _cisstOSAbstractionPython.cvar.ios_base_showpos
ios_base.skipws = _cisstOSAbstractionPython.cvar.ios_base_skipws
ios_base.unitbuf = _cisstOSAbstractionPython.cvar.ios_base_unitbuf
ios_base.uppercase = _cisstOSAbstractionPython.cvar.ios_base_uppercase
ios_base.adjustfield = _cisstOSAbstractionPython.cvar.ios_base_adjustfield
ios_base.basefield = _cisstOSAbstractionPython.cvar.ios_base_basefield
ios_base.floatfield = _cisstOSAbstractionPython.cvar.ios_base_floatfield
ios_base.badbit = _cisstOSAbstractionPython.cvar.ios_base_badbit
ios_base.eofbit = _cisstOSAbstractionPython.cvar.ios_base_eofbit
ios_base.failbit = _cisstOSAbstractionPython.cvar.ios_base_failbit
ios_base.goodbit = _cisstOSAbstractionPython.cvar.ios_base_goodbit
ios_base.app = _cisstOSAbstractionPython.cvar.ios_base_app
ios_base.ate = _cisstOSAbstractionPython.cvar.ios_base_ate
ios_base.binary = _cisstOSAbstractionPython.cvar.ios_base_binary
ios_base.ios_base_in = _cisstOSAbstractionPython.cvar.ios_base_ios_base_in
ios_base.out = _cisstOSAbstractionPython.cvar.ios_base_out
ios_base.trunc = _cisstOSAbstractionPython.cvar.ios_base_trunc
ios_base.beg = _cisstOSAbstractionPython.cvar.ios_base_beg
ios_base.cur = _cisstOSAbstractionPython.cvar.ios_base_cur
ios_base.end = _cisstOSAbstractionPython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _cisstOSAbstractionPython.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _cisstOSAbstractionPython.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _cisstOSAbstractionPython.ios_base_xalloc()
ios_base_xalloc = _cisstOSAbstractionPython.ios_base_xalloc

class ios(ios_base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def rdstate(self): return _cisstOSAbstractionPython.ios_rdstate(self)
    def clear(self, *args): return _cisstOSAbstractionPython.ios_clear(self, *args)
    def setstate(self, *args): return _cisstOSAbstractionPython.ios_setstate(self, *args)
    def good(self): return _cisstOSAbstractionPython.ios_good(self)
    def eof(self): return _cisstOSAbstractionPython.ios_eof(self)
    def fail(self): return _cisstOSAbstractionPython.ios_fail(self)
    def bad(self): return _cisstOSAbstractionPython.ios_bad(self)
    def exceptions(self, *args): return _cisstOSAbstractionPython.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _cisstOSAbstractionPython.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _cisstOSAbstractionPython.ios_tie(self, *args)
    def rdbuf(self, *args): return _cisstOSAbstractionPython.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _cisstOSAbstractionPython.ios_copyfmt(self, *args)
    def fill(self, *args): return _cisstOSAbstractionPython.ios_fill(self, *args)
    def imbue(self, *args): return _cisstOSAbstractionPython.ios_imbue(self, *args)
    def narrow(self, *args): return _cisstOSAbstractionPython.ios_narrow(self, *args)
    def widen(self, *args): return _cisstOSAbstractionPython.ios_widen(self, *args)
ios_swigregister = _cisstOSAbstractionPython.ios_swigregister
ios_swigregister(ios)

class streambuf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstOSAbstractionPython.delete_streambuf
    __del__ = lambda self : None;
    def pubimbue(self, *args): return _cisstOSAbstractionPython.streambuf_pubimbue(self, *args)
    def getloc(self): return _cisstOSAbstractionPython.streambuf_getloc(self)
    def pubsetbuf(self, *args): return _cisstOSAbstractionPython.streambuf_pubsetbuf(self, *args)
    def pubseekoff(self, *args): return _cisstOSAbstractionPython.streambuf_pubseekoff(self, *args)
    def pubseekpos(self, *args): return _cisstOSAbstractionPython.streambuf_pubseekpos(self, *args)
    def pubsync(self): return _cisstOSAbstractionPython.streambuf_pubsync(self)
    def in_avail(self): return _cisstOSAbstractionPython.streambuf_in_avail(self)
    def snextc(self): return _cisstOSAbstractionPython.streambuf_snextc(self)
    def sbumpc(self): return _cisstOSAbstractionPython.streambuf_sbumpc(self)
    def sgetc(self): return _cisstOSAbstractionPython.streambuf_sgetc(self)
    def sgetn(self, *args): return _cisstOSAbstractionPython.streambuf_sgetn(self, *args)
    def sputbackc(self, *args): return _cisstOSAbstractionPython.streambuf_sputbackc(self, *args)
    def sungetc(self): return _cisstOSAbstractionPython.streambuf_sungetc(self)
    def sputc(self, *args): return _cisstOSAbstractionPython.streambuf_sputc(self, *args)
    def sputn(self, *args): return _cisstOSAbstractionPython.streambuf_sputn(self, *args)
streambuf_swigregister = _cisstOSAbstractionPython.streambuf_swigregister
streambuf_swigregister(streambuf)

class ostream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstOSAbstractionPython.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _cisstOSAbstractionPython.ostream___lshift__(self, *args)
    def put(self, *args): return _cisstOSAbstractionPython.ostream_put(self, *args)
    def write(self, *args): return _cisstOSAbstractionPython.ostream_write(self, *args)
    def flush(self): return _cisstOSAbstractionPython.ostream_flush(self)
    def tellp(self): return _cisstOSAbstractionPython.ostream_tellp(self)
    def seekp(self, *args): return _cisstOSAbstractionPython.ostream_seekp(self, *args)
ostream_swigregister = _cisstOSAbstractionPython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstOSAbstractionPython.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _cisstOSAbstractionPython.istream___rshift__(self, *args)
    def gcount(self): return _cisstOSAbstractionPython.istream_gcount(self)
    def get(self, *args): return _cisstOSAbstractionPython.istream_get(self, *args)
    def getline(self, *args): return _cisstOSAbstractionPython.istream_getline(self, *args)
    def ignore(self, *args): return _cisstOSAbstractionPython.istream_ignore(self, *args)
    def peek(self): return _cisstOSAbstractionPython.istream_peek(self)
    def read(self, *args): return _cisstOSAbstractionPython.istream_read(self, *args)
    def readsome(self, *args): return _cisstOSAbstractionPython.istream_readsome(self, *args)
    def putback(self, *args): return _cisstOSAbstractionPython.istream_putback(self, *args)
    def unget(self): return _cisstOSAbstractionPython.istream_unget(self)
    def sync(self): return _cisstOSAbstractionPython.istream_sync(self)
    def tellg(self): return _cisstOSAbstractionPython.istream_tellg(self)
    def seekg(self, *args): return _cisstOSAbstractionPython.istream_seekg(self, *args)
istream_swigregister = _cisstOSAbstractionPython.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cisstOSAbstractionPython.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _cisstOSAbstractionPython.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _cisstOSAbstractionPython.endl_cb_ptr

def endl(*args):
  return _cisstOSAbstractionPython.endl(*args)
endl = _cisstOSAbstractionPython.endl
ends_cb_ptr = _cisstOSAbstractionPython.ends_cb_ptr

def ends(*args):
  return _cisstOSAbstractionPython.ends(*args)
ends = _cisstOSAbstractionPython.ends
flush_cb_ptr = _cisstOSAbstractionPython.flush_cb_ptr

def flush(*args):
  return _cisstOSAbstractionPython.flush(*args)
flush = _cisstOSAbstractionPython.flush
import cisstCommonPython
class osaAbsoluteTime(object):
    """Proxy of C++ osaAbsoluteTime class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sec = _swig_property(_cisstOSAbstractionPython.osaAbsoluteTime_sec_get, _cisstOSAbstractionPython.osaAbsoluteTime_sec_set)
    nsec = _swig_property(_cisstOSAbstractionPython.osaAbsoluteTime_nsec_get, _cisstOSAbstractionPython.osaAbsoluteTime_nsec_set)
    def __init__(self, *args): 
        """
        __init__(osaAbsoluteTime self) -> osaAbsoluteTime
        __init__(osaAbsoluteTime self, long seconds, long nanoseconds) -> osaAbsoluteTime
        """
        this = _cisstOSAbstractionPython.new_osaAbsoluteTime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_osaAbsoluteTime
    __del__ = lambda self : None;
    def ToSeconds(self):
        """ToSeconds(osaAbsoluteTime self) -> double"""
        return _cisstOSAbstractionPython.osaAbsoluteTime_ToSeconds(self)

    def FromSeconds(self, *args):
        """FromSeconds(osaAbsoluteTime self, double timeInSeconds)"""
        return _cisstOSAbstractionPython.osaAbsoluteTime_FromSeconds(self, *args)

osaAbsoluteTime_swigregister = _cisstOSAbstractionPython.osaAbsoluteTime_swigregister
osaAbsoluteTime_swigregister(osaAbsoluteTime)

class osaTimeServer(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ osaTimeServer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstOSAbstractionPython.osaTimeServer_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstOSAbstractionPython.osaTimeServer_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstOSAbstractionPython.osaTimeServer_ClassServices()

    ClassServices = staticmethod(ClassServices)
    def __init__(self): 
        """__init__(osaTimeServer self) -> osaTimeServer"""
        this = _cisstOSAbstractionPython.new_osaTimeServer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_osaTimeServer
    __del__ = lambda self : None;
    def SetTimeOrigin(self):
        """SetTimeOrigin(osaTimeServer self)"""
        return _cisstOSAbstractionPython.osaTimeServer_SetTimeOrigin(self)

    def SetTimeOriginFrom(self, *args):
        """SetTimeOriginFrom(osaTimeServer self, osaTimeServer other)"""
        return _cisstOSAbstractionPython.osaTimeServer_SetTimeOriginFrom(self, *args)

    def GetTimeOrigin(self, *args):
        """GetTimeOrigin(osaTimeServer self, osaAbsoluteTime origin) -> bool"""
        return _cisstOSAbstractionPython.osaTimeServer_GetTimeOrigin(self, *args)

    def GetRelativeTime(self):
        """GetRelativeTime(osaTimeServer self) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_GetRelativeTime(self)

    def GetAbsoluteTimeInSeconds(self):
        """GetAbsoluteTimeInSeconds(osaTimeServer self) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_GetAbsoluteTimeInSeconds(self)

    def GetAbsoluteTime(self):
        """GetAbsoluteTime(osaTimeServer self) -> osaAbsoluteTime"""
        return _cisstOSAbstractionPython.osaTimeServer_GetAbsoluteTime(self)

    def EstimateDrift(self):
        """EstimateDrift(osaTimeServer self) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_EstimateDrift(self)

    def RelativeToAbsolute(self, *args):
        """RelativeToAbsolute(osaTimeServer self, double relative, osaAbsoluteTime absolute)"""
        return _cisstOSAbstractionPython.osaTimeServer_RelativeToAbsolute(self, *args)

    def AbsoluteToRelative(self, *args):
        """AbsoluteToRelative(osaTimeServer self, osaAbsoluteTime absolute) -> double"""
        return _cisstOSAbstractionPython.osaTimeServer_AbsoluteToRelative(self, *args)

osaTimeServer_swigregister = _cisstOSAbstractionPython.osaTimeServer_swigregister
osaTimeServer_swigregister(osaTimeServer)

def osaTimeServer_ClassServices():
  """osaTimeServer_ClassServices() -> cmnClassServicesBase"""
  return _cisstOSAbstractionPython.osaTimeServer_ClassServices()

class osaSerialPort(cisstCommonPython.cmnGenericObject):
    """Proxy of C++ osaSerialPort class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HAS_DYNAMIC_CREATION = _cisstOSAbstractionPython.osaSerialPort_HAS_DYNAMIC_CREATION
    InitialLoD = _cisstOSAbstractionPython.osaSerialPort_InitialLoD
    def ClassServices():
        """ClassServices() -> cmnClassServicesBase"""
        return _cisstOSAbstractionPython.osaSerialPort_ClassServices()

    ClassServices = staticmethod(ClassServices)
    BaudRate300 = _cisstOSAbstractionPython.osaSerialPort_BaudRate300
    BaudRate1200 = _cisstOSAbstractionPython.osaSerialPort_BaudRate1200
    BaudRate9600 = _cisstOSAbstractionPython.osaSerialPort_BaudRate9600
    BaudRate19200 = _cisstOSAbstractionPython.osaSerialPort_BaudRate19200
    BaudRate38400 = _cisstOSAbstractionPython.osaSerialPort_BaudRate38400
    BaudRate57600 = _cisstOSAbstractionPython.osaSerialPort_BaudRate57600
    BaudRate115200 = _cisstOSAbstractionPython.osaSerialPort_BaudRate115200
    CharacterSize5 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize5
    CharacterSize6 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize6
    CharacterSize7 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize7
    CharacterSize8 = _cisstOSAbstractionPython.osaSerialPort_CharacterSize8
    ParityCheckingNone = _cisstOSAbstractionPython.osaSerialPort_ParityCheckingNone
    ParityCheckingEven = _cisstOSAbstractionPython.osaSerialPort_ParityCheckingEven
    ParityCheckingOdd = _cisstOSAbstractionPython.osaSerialPort_ParityCheckingOdd
    FlowControlNone = _cisstOSAbstractionPython.osaSerialPort_FlowControlNone
    FlowControlSoftware = _cisstOSAbstractionPython.osaSerialPort_FlowControlSoftware
    FlowControlHardware = _cisstOSAbstractionPython.osaSerialPort_FlowControlHardware
    StopBitsOne = _cisstOSAbstractionPython.osaSerialPort_StopBitsOne
    StopBitsTwo = _cisstOSAbstractionPython.osaSerialPort_StopBitsTwo
    def __init__(self): 
        """__init__(osaSerialPort self) -> osaSerialPort"""
        this = _cisstOSAbstractionPython.new_osaSerialPort()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cisstOSAbstractionPython.delete_osaSerialPort
    __del__ = lambda self : None;
    def SetBaudRate(self, *args):
        """SetBaudRate(osaSerialPort self, osaSerialPort::BaudRateType const & baudRate)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetBaudRate(self, *args)

    def SetCharacterSize(self, *args):
        """SetCharacterSize(osaSerialPort self, osaSerialPort::CharacterSizeType const & characterSize)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetCharacterSize(self, *args)

    def SetParityChecking(self, *args):
        """SetParityChecking(osaSerialPort self, osaSerialPort::ParityCheckingType const & parityChecking)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetParityChecking(self, *args)

    def SetStopBits(self, *args):
        """SetStopBits(osaSerialPort self, osaSerialPort::StopBitsType const & stopBits)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetStopBits(self, *args)

    def SetFlowControl(self, *args):
        """SetFlowControl(osaSerialPort self, osaSerialPort::FlowControlType const & flowControl)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetFlowControl(self, *args)

    def SetPortName(self, *args):
        """SetPortName(osaSerialPort self, std::string const & portName)"""
        return _cisstOSAbstractionPython.osaSerialPort_SetPortName(self, *args)

    def GetPortName(self):
        """GetPortName(osaSerialPort self) -> std::string"""
        return _cisstOSAbstractionPython.osaSerialPort_GetPortName(self)

    def SetPortNumber(self, *args):
        """SetPortNumber(osaSerialPort self, unsigned int portNumber) -> std::string"""
        return _cisstOSAbstractionPython.osaSerialPort_SetPortNumber(self, *args)

    def Open(self, blocking=False):
        """
        Open(osaSerialPort self, bool blocking=False) -> bool
        Open(osaSerialPort self) -> bool
        """
        return _cisstOSAbstractionPython.osaSerialPort_Open(self, blocking)

    def Configure(self):
        """Configure(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Configure(self)

    def Close(self):
        """Close(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Close(self)

    def IsOpened(self):
        """IsOpened(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_IsOpened(self)

    def Write(self, *args):
        """
        Write(osaSerialPort self, char const * data, int nBytes) -> int
        Write(osaSerialPort self, unsigned char const * data, int nBytes) -> int
        Write(osaSerialPort self, std::string const & data) -> int
        """
        return _cisstOSAbstractionPython.osaSerialPort_Write(self, *args)

    def Read(self, *args):
        """
        Read(osaSerialPort self, char * data, int nBytes) -> int
        Read(osaSerialPort self, unsigned char * data, int nBytes) -> int
        """
        return _cisstOSAbstractionPython.osaSerialPort_Read(self, *args)

    def WriteBreak(self, *args):
        """WriteBreak(osaSerialPort self, double breakLengthInSeconds) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_WriteBreak(self, *args)

    def Flush(self):
        """Flush(osaSerialPort self) -> bool"""
        return _cisstOSAbstractionPython.osaSerialPort_Flush(self)

osaSerialPort_swigregister = _cisstOSAbstractionPython.osaSerialPort_swigregister
osaSerialPort_swigregister(osaSerialPort)

def osaSerialPort_ClassServices():
  """osaSerialPort_ClassServices() -> cmnClassServicesBase"""
  return _cisstOSAbstractionPython.osaSerialPort_ClassServices()



