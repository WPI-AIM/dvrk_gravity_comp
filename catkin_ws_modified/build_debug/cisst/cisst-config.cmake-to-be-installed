#
# CMake configuration file for the installed version of cisst
#
# Author(s):  Anton Deguet
# Created on: 2003-07-31
#
# (C) Copyright 2003-2015 Johns Hopkins University (JHU), All Rights Reserved.
#
# --- begin cisst license - do not edit ---
#
# This software is provided "as is" under an open source license, with
# no warranty.  The complete license can be found in license.txt and
# http://www.cisst.org/cisst/license.txt.
#
# --- end cisst license ---

# Version
set (CISST_VERSION_MAJOR "1")
set (CISST_VERSION_MINOR "0")
set (CISST_VERSION_PATCH "8")
set (CISST_VERSION "1.0.8")

# Paths
set (CISST_BINARY_DIR "")
set (CISST_INCLUDE_DIR "")
set (CISST_DOXYGEN_DIR "/home/davincic2/catkin_ws/src/cisst-saw/cisst")
set (CISST_CMAKE_DIRS "")
set (CISST_SHARE_INSTALL_SUFFIX "share/cisst-1.0")
set (CISST_CMAKE_INSTALL_SUFFIX "share/cisst-1.0/cmake")
set (CISST_CMAKE_MODULES_INSTALL_SUFFIX "share/cisst-1.0/cmake/Modules")
set (CISST_LIBRARY_INSTALL_SUFFIX "lib")

# Check that paths are set.  If CISST_BINARY_DIR is not set, we are
# using cisst-config from the installed tree and all paths are
# relative to this file.
if ("${CISST_BINARY_DIR}" STREQUAL "")
  # retrieve the path where cisst-config.cmake was installed
  set (cisst_CONFIG_FILE ${CMAKE_CURRENT_LIST_FILE})
  get_filename_component (CISST_CONFIG_PATH
                          ${cisst_CONFIG_FILE}
                          PATH)
  # add installed module path to CISST_CMAKE_DIRS
  set( CISST_CMAKE_DIRS ${CISST_CONFIG_PATH} "${CISST_CONFIG_PATH}/Modules")

  # find root of install be removing the CISST_CMAKE_INSTALL_SUFFIX
  string (REPLACE "${CISST_CMAKE_INSTALL_SUFFIX}" ""
                  CISST_BINARY_DIR
                  ${CISST_CONFIG_PATH})
  set (CISST_INCLUDE_DIR "${CISST_BINARY_DIR}/include")

  # simple check to make sure cisst has indeed been found
  find_file (CISST_HEADER_FILE_FOUND
             NAMES cisstConfig.h
             PATHS ${CISST_INCLUDE_DIR})
  if (CISST_HEADER_FILE_FOUND)
    message ("Information: cisst has been found in \"${CISST_BINARY_DIR}\", headers are in \"${CISST_INCLUDE_DIR}\"")
  else (CISST_HEADER_FILE_FOUND)
    message (WARNING "cisst-config was found in \"${CISST_CONFIG_PATH}\", the cisst install root is assumed to be \"${CISST_BINARY_DIR}\" but we can't find \"cisstConfig.h\" in \"${CISST_INCLUDE_DIR}\".  This is alarming!")
  endif (CISST_HEADER_FILE_FOUND)
  # no need to preserve this in cache (find_file does by default)
  unset (CISST_HEADER_FILE_FOUND CACHE)
endif ("${CISST_BINARY_DIR}" STREQUAL "")

# set CISST_LIBRARY_DIR
set (CISST_LIBRARY_DIR "${CISST_BINARY_DIR}/${CISST_LIBRARY_INSTALL_SUFFIX}")

# locate cisst use file
find_file (CISST_USE_FILE
           NAMES Usecisst.cmake
           PATHS ${CISST_CMAKE_DIRS}
           NO_DEFAULT_PATH)

# On Windows, CMake uses a different compiler at configuration time
set (CISST_CMAKE_COMPILER_IS_MSVC_64 OFF)

# Which libraries have been compiled
set (CISST_LIBRARIES "cisstCommonXML;cisstStereoVisionQt;cisstStereoVision;cisstRobot;cisstParameterTypesQt;cisstParameterTypes;cisstMultiTaskQt;cisstMultiTask;cisstNumerical;cisstOSAbstraction;cisstVectorFLTK;cisstVectorQt;cisstVector;cisstCommonQt;cisstCommon")
set (CISST_SETTINGS "cisstQt;cisstFLTK;cisstPython;cisstOpenGL")
set (CISST_BUILD_SHARED_LIBS ON)

# Build static or dynamic libraries
if (CISST_BUILD_SHARED_LIBS)
  set (IS_SHARED SHARED)
  set (BUILD_SHARED_LIBS SHARED)
  if (WIN32)
    remove_definitions (-DCISST_DLL)
    add_definitions (-DCISST_DLL)
  endif (WIN32)
else (CISST_BUILD_SHARED_LIBS)
  set (IS_SHARED STATIC)
endif (CISST_BUILD_SHARED_LIBS)

# Which flags have been set and include path/libs
set (CISST_HAS_LINUX_RTAI OFF)
set (CISST_HAS_LINUX_XENOMAI OFF)
set (CISST_HAS_SWIG_PYTHON ON)
set (CISST_HAS_XML ON)
set (CISST_HAS_OPENGL ON)
set (CISST_HAS_QT ON)
set (CISST_HAS_QT4 OFF)
set (CISST_HAS_QT5 ON)
set (CISST_HAS_FLTK ON)
set (CISST_HAS_JSON ON)
set (CISST_CATKIN_BUILT TRUE)
set (CISST_USE_SI_UNITS ON)

# Include settings per library
foreach (lib ${CISST_LIBRARIES})
  find_file (ADDITIONAL_BUILD_CMAKE
             NAMES ${lib}Build.cmake
             PATHS ${CISST_CMAKE_DIRS}
             NO_DEFAULT_PATH)
  if (ADDITIONAL_BUILD_CMAKE)
    include (${ADDITIONAL_BUILD_CMAKE})
  endif (ADDITIONAL_BUILD_CMAKE)
  unset (ADDITIONAL_BUILD_CMAKE CACHE) # find_file stores the result in cache
endforeach (lib ${CISST_LIBRARIES})

# To allow users to check if a library has been compiled
foreach (lib ${CISST_LIBRARIES})
  set (CISST_BUILD_LIBS_${lib} ON) # Backward compatibility
  set (BUILD_LIBS_${lib} ON) # Backward compatibility
  set (CISST_${lib} ON)
endforeach (lib ${CISST_LIBRARIES})

# Where to install
set (CISST_INSTALL_PREFIX "/home/davincic2/catkin_ws/install_debug")

# Check against componenents required
set (cisst_FOUND_AS_REQUIRED 1)
if (cisst_FIND_COMPONENTS)
  # First test that all libraries should have been compiled
  foreach (required ${cisst_FIND_COMPONENTS})
    set (CISST_LIBRARIES_AND_SETTINGS ${CISST_LIBRARIES} ${CISST_SETTINGS})
    list (FIND CISST_LIBRARIES_AND_SETTINGS ${required} FOUND_IT)
    if (${FOUND_IT} EQUAL -1 )
      # inform user and set variables to not-found/false
      if (NOT cisst_FIND_QUIETLY)
        # check if this is a "virtual" library
        if (DEFINED ${required}_OPTION_NAME)
          message (WARNING "find_package: cisst library \"${required}\" doesn't exist or hasn't been compiled, use the flag ${${required}_OPTION_NAME} to compile it")
        else (DEFINED ${required}_OPTION_NAME)
          message (WARNING "find_package: cisst library \"${required}\" doesn't exist or hasn't been compiled")
        endif (DEFINED ${required}_OPTION_NAME)
      endif (NOT cisst_FIND_QUIETLY)
      set (cisst_FOUND_AS_REQUIRED 0)
      set (cisst_${required}_FOUND 0)
    else (${FOUND_IT} EQUAL -1)
      # if found, add to list of required libraries and remove duplicates (for multiple find_package (cisst))
      set (CISST_LIBRARIES_REQUIRED_INTERNAL ${CISST_LIBRARIES_REQUIRED_INTERNAL} ${required})
      list (REMOVE_DUPLICATES CISST_LIBRARIES_REQUIRED_INTERNAL)
      set (cisst_${required}_FOUND 1)
    endif (${FOUND_IT} EQUAL -1)
  endforeach (required)
else (cisst_FIND_COMPONENTS)
  # otherwise, assumes user needs all available libraries
  set (CISST_LIBRARIES_REQUIRED_INTERNAL ${CISST_LIBRARIES})
endif (cisst_FIND_COMPONENTS)
