# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cisstVectorPython', [dirname(__file__)])
        except ImportError:
            import _cisstVectorPython
            return _cisstVectorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_cisstVectorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cisstVectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _cisstVectorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cisstVectorPython.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _cisstVectorPython.SwigPyIterator_value(self)
    def incr(self, n=1): return _cisstVectorPython.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _cisstVectorPython.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _cisstVectorPython.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _cisstVectorPython.SwigPyIterator_equal(self, *args)
    def copy(self): return _cisstVectorPython.SwigPyIterator_copy(self)
    def next(self): return _cisstVectorPython.SwigPyIterator_next(self)
    def __next__(self): return _cisstVectorPython.SwigPyIterator___next__(self)
    def previous(self): return _cisstVectorPython.SwigPyIterator_previous(self)
    def advance(self, *args): return _cisstVectorPython.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _cisstVectorPython.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _cisstVectorPython.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _cisstVectorPython.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _cisstVectorPython.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _cisstVectorPython.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _cisstVectorPython.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _cisstVectorPython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import cisstCommonPython
class vctFrm3(object):
    """Proxy of C++ vctFrameBase<(vctRot3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIMENSION = _cisstVectorPython.vctFrm3_DIMENSION
    def __init__(self): 
        """__init__(vctFrameBase<(vctRot3)> self) -> vctFrm3"""
        this = _cisstVectorPython.new_vctFrm3()
        try: self.this.append(this)
        except: self.this = this
    def Identity():
        """Identity() -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_Identity()

    Identity = staticmethod(Identity)
    def Assign(self, *args):
        """Assign(vctFrm3 self, vctFrm3 otherFrame) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_Assign(self, *args)

    def Translation(self, *args):
        """
        Translation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::TranslationType const
        Translation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::TranslationType &
        """
        return _cisstVectorPython.vctFrm3_Translation(self, *args)

    def Rotation(self, *args):
        """
        Rotation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::RotationType const
        Rotation(vctFrm3 self) -> vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::RotationType &
        """
        return _cisstVectorPython.vctFrm3_Rotation(self, *args)

    def IsNormalized(self, *args):
        """
        IsNormalized(vctFrm3 self, vctFrameBase< vctMatrixRotation3< double,VCT_ROW_MAJOR > >::value_type tolerance=TypeTraits::Tolerance()) -> bool
        IsNormalized(vctFrm3 self) -> bool
        """
        return _cisstVectorPython.vctFrm3_IsNormalized(self, *args)

    def NormalizedSelf(self):
        """NormalizedSelf(vctFrm3 self) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_NormalizedSelf(self)

    def InverseSelf(self):
        """InverseSelf(vctFrm3 self) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_InverseSelf(self)

    def InverseOf(self, *args):
        """InverseOf(vctFrm3 self, vctFrm3 otherFrame) -> vctFrm3"""
        return _cisstVectorPython.vctFrm3_InverseOf(self, *args)

    def __eq__(self, *args):
        """__eq__(vctFrm3 self, vctFrm3 other) -> bool"""
        return _cisstVectorPython.vctFrm3___eq__(self, *args)

    def __str__(self):
        """__str__(vctFrm3 self) -> std::string"""
        return _cisstVectorPython.vctFrm3___str__(self)

    __swig_destroy__ = _cisstVectorPython.delete_vctFrm3
    __del__ = lambda self : None;
vctFrm3_swigregister = _cisstVectorPython.vctFrm3_swigregister
vctFrm3_swigregister(vctFrm3)

def vctFrm3_Identity():
  """vctFrm3_Identity() -> vctFrm3"""
  return _cisstVectorPython.vctFrm3_Identity()



