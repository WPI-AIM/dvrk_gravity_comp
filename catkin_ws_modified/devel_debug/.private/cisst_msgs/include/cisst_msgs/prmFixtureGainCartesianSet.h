// Generated by gencpp from file cisst_msgs/prmFixtureGainCartesianSet.msg
// DO NOT EDIT!


#ifndef CISST_MSGS_MESSAGE_PRMFIXTUREGAINCARTESIANSET_H
#define CISST_MSGS_MESSAGE_PRMFIXTUREGAINCARTESIANSET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace cisst_msgs
{
template <class ContainerAllocator>
struct prmFixtureGainCartesianSet_
{
  typedef prmFixtureGainCartesianSet_<ContainerAllocator> Type;

  prmFixtureGainCartesianSet_()
    : header()
    , ForceOrientation()
    , ForcePosition()
    , TorqueOrientation()
    , PosStiffPos()
    , PosStiffNeg()
    , PosDampingPos()
    , PosDampingNeg()
    , ForceBiasPos()
    , ForceBiasNeg()
    , OriStiffPos()
    , OriStiffNeg()
    , OriDampingPos()
    , OriDampingNeg()
    , TorqueBiasPos()
    , TorqueBiasNeg()  {
    }
  prmFixtureGainCartesianSet_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ForceOrientation(_alloc)
    , ForcePosition(_alloc)
    , TorqueOrientation(_alloc)
    , PosStiffPos(_alloc)
    , PosStiffNeg(_alloc)
    , PosDampingPos(_alloc)
    , PosDampingNeg(_alloc)
    , ForceBiasPos(_alloc)
    , ForceBiasNeg(_alloc)
    , OriStiffPos(_alloc)
    , OriStiffNeg(_alloc)
    , OriDampingPos(_alloc)
    , OriDampingNeg(_alloc)
    , TorqueBiasPos(_alloc)
    , TorqueBiasNeg(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _ForceOrientation_type;
  _ForceOrientation_type ForceOrientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ForcePosition_type;
  _ForcePosition_type ForcePosition;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _TorqueOrientation_type;
  _TorqueOrientation_type TorqueOrientation;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _PosStiffPos_type;
  _PosStiffPos_type PosStiffPos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _PosStiffNeg_type;
  _PosStiffNeg_type PosStiffNeg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _PosDampingPos_type;
  _PosDampingPos_type PosDampingPos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _PosDampingNeg_type;
  _PosDampingNeg_type PosDampingNeg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ForceBiasPos_type;
  _ForceBiasPos_type ForceBiasPos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _ForceBiasNeg_type;
  _ForceBiasNeg_type ForceBiasNeg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _OriStiffPos_type;
  _OriStiffPos_type OriStiffPos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _OriStiffNeg_type;
  _OriStiffNeg_type OriStiffNeg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _OriDampingPos_type;
  _OriDampingPos_type OriDampingPos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _OriDampingNeg_type;
  _OriDampingNeg_type OriDampingNeg;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _TorqueBiasPos_type;
  _TorqueBiasPos_type TorqueBiasPos;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _TorqueBiasNeg_type;
  _TorqueBiasNeg_type TorqueBiasNeg;




  typedef boost::shared_ptr< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> const> ConstPtr;

}; // struct prmFixtureGainCartesianSet_

typedef ::cisst_msgs::prmFixtureGainCartesianSet_<std::allocator<void> > prmFixtureGainCartesianSet;

typedef boost::shared_ptr< ::cisst_msgs::prmFixtureGainCartesianSet > prmFixtureGainCartesianSetPtr;
typedef boost::shared_ptr< ::cisst_msgs::prmFixtureGainCartesianSet const> prmFixtureGainCartesianSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cisst_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'cisst_msgs': ['/home/davincic2/catkin_ws/src/cisst-saw/cisst-ros/cisst_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e52654ad70465afa307bde13463e05e5";
  }

  static const char* value(const ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe52654ad70465afaULL;
  static const uint64_t static_value2 = 0x307bde13463e05e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cisst_msgs/prmFixtureGainCartesianSet";
  }

  static const char* value(const ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
# vf pos & ori\n\
geometry_msgs/Quaternion  ForceOrientation\n\
geometry_msgs/Vector3     ForcePosition\n\
geometry_msgs/Quaternion  TorqueOrientation\n\
\n\
# force gains\n\
geometry_msgs/Vector3     PosStiffPos\n\
geometry_msgs/Vector3     PosStiffNeg\n\
geometry_msgs/Vector3     PosDampingPos\n\
geometry_msgs/Vector3     PosDampingNeg\n\
geometry_msgs/Vector3     ForceBiasPos\n\
geometry_msgs/Vector3     ForceBiasNeg\n\
\n\
# torque gains\n\
geometry_msgs/Vector3     OriStiffPos\n\
geometry_msgs/Vector3     OriStiffNeg\n\
geometry_msgs/Vector3     OriDampingPos\n\
geometry_msgs/Vector3     OriDampingNeg\n\
geometry_msgs/Vector3     TorqueBiasPos\n\
geometry_msgs/Vector3     TorqueBiasNeg\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ForceOrientation);
      stream.next(m.ForcePosition);
      stream.next(m.TorqueOrientation);
      stream.next(m.PosStiffPos);
      stream.next(m.PosStiffNeg);
      stream.next(m.PosDampingPos);
      stream.next(m.PosDampingNeg);
      stream.next(m.ForceBiasPos);
      stream.next(m.ForceBiasNeg);
      stream.next(m.OriStiffPos);
      stream.next(m.OriStiffNeg);
      stream.next(m.OriDampingPos);
      stream.next(m.OriDampingNeg);
      stream.next(m.TorqueBiasPos);
      stream.next(m.TorqueBiasNeg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct prmFixtureGainCartesianSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cisst_msgs::prmFixtureGainCartesianSet_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ForceOrientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.ForceOrientation);
    s << indent << "ForcePosition: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ForcePosition);
    s << indent << "TorqueOrientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.TorqueOrientation);
    s << indent << "PosStiffPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.PosStiffPos);
    s << indent << "PosStiffNeg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.PosStiffNeg);
    s << indent << "PosDampingPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.PosDampingPos);
    s << indent << "PosDampingNeg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.PosDampingNeg);
    s << indent << "ForceBiasPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ForceBiasPos);
    s << indent << "ForceBiasNeg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.ForceBiasNeg);
    s << indent << "OriStiffPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.OriStiffPos);
    s << indent << "OriStiffNeg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.OriStiffNeg);
    s << indent << "OriDampingPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.OriDampingPos);
    s << indent << "OriDampingNeg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.OriDampingNeg);
    s << indent << "TorqueBiasPos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.TorqueBiasPos);
    s << indent << "TorqueBiasNeg: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.TorqueBiasNeg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CISST_MSGS_MESSAGE_PRMFIXTUREGAINCARTESIANSET_H
